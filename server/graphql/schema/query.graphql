directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type AccessRequest implements Node {
  id: ID!
  requestedScopes: [String!]!
  grantedScopes: [String!]!
  requestedAudiences: [String!]!
  grantedAudiences: [String!]!
  request: String!
  form: String!
  active: Boolean!
}
"""
AccessRequestWhereInput is used for filtering AccessRequest objects.
Input was generated by ent.
"""
input AccessRequestWhereInput {
  not: AccessRequestWhereInput
  and: [AccessRequestWhereInput!]
  or: [AccessRequestWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """request field predicates"""
  request: String
  requestNEQ: String
  requestIn: [String!]
  requestNotIn: [String!]
  requestGT: String
  requestGTE: String
  requestLT: String
  requestLTE: String
  requestContains: String
  requestHasPrefix: String
  requestHasSuffix: String
  requestEqualFold: String
  requestContainsFold: String
  """form field predicates"""
  form: String
  formNEQ: String
  formIn: [String!]
  formNotIn: [String!]
  formGT: String
  formGTE: String
  formLT: String
  formLTE: String
  formContains: String
  formHasPrefix: String
  formHasSuffix: String
  formEqualFold: String
  formContainsFold: String
  """active field predicates"""
  active: Boolean
  activeNEQ: Boolean
}
type Cert implements Node {
  id: ID!
}
"""
CertWhereInput is used for filtering Cert objects.
Input was generated by ent.
"""
input CertWhereInput {
  not: CertWhereInput
  and: [CertWhereInput!]
  or: [CertWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/koalatea/authserver/server/ent.Noder") {
  """The id of the object."""
  id: ID!
}
type OIDCAuthCode implements Node {
  id: ID!
  authorizationCode: String!
  accessRequest: AccessRequest
  session: OIDCSession
}
"""
OIDCAuthCodeWhereInput is used for filtering OIDCAuthCode objects.
Input was generated by ent.
"""
input OIDCAuthCodeWhereInput {
  not: OIDCAuthCodeWhereInput
  and: [OIDCAuthCodeWhereInput!]
  or: [OIDCAuthCodeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """authorization_code field predicates"""
  authorizationCode: String
  authorizationCodeNEQ: String
  authorizationCodeIn: [String!]
  authorizationCodeNotIn: [String!]
  authorizationCodeGT: String
  authorizationCodeGTE: String
  authorizationCodeLT: String
  authorizationCodeLTE: String
  authorizationCodeContains: String
  authorizationCodeHasPrefix: String
  authorizationCodeHasSuffix: String
  authorizationCodeEqualFold: String
  authorizationCodeContainsFold: String
  """access_request edge predicates"""
  hasAccessRequest: Boolean
  hasAccessRequestWith: [AccessRequestWhereInput!]
  """session edge predicates"""
  hasSession: Boolean
  hasSessionWith: [OIDCSessionWhereInput!]
}
type OIDCClient implements Node {
  id: ID!
  clientID: String!
  secret: String!
  redirectUris: [String!]!
  responseTypes: [String!]!
  grantTypes: [String!]!
  scopes: [String!]!
}
"""
OIDCClientWhereInput is used for filtering OIDCClient objects.
Input was generated by ent.
"""
input OIDCClientWhereInput {
  not: OIDCClientWhereInput
  and: [OIDCClientWhereInput!]
  or: [OIDCClientWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """client_id field predicates"""
  clientID: String
  clientIDNEQ: String
  clientIDIn: [String!]
  clientIDNotIn: [String!]
  clientIDGT: String
  clientIDGTE: String
  clientIDLT: String
  clientIDLTE: String
  clientIDContains: String
  clientIDHasPrefix: String
  clientIDHasSuffix: String
  clientIDEqualFold: String
  clientIDContainsFold: String
  """secret field predicates"""
  secret: String
  secretNEQ: String
  secretIn: [String!]
  secretNotIn: [String!]
  secretGT: String
  secretGTE: String
  secretLT: String
  secretLTE: String
  secretContains: String
  secretHasPrefix: String
  secretHasSuffix: String
  secretEqualFold: String
  secretContainsFold: String
}
type OIDCSession implements Node {
  id: ID!
  issuer: String!
  subject: String!
  audiences: [String!]!
  expiresAt: Time!
  issuedAt: Time!
  requestedAt: Time!
  authTime: Time!
}
"""
OIDCSessionWhereInput is used for filtering OIDCSession objects.
Input was generated by ent.
"""
input OIDCSessionWhereInput {
  not: OIDCSessionWhereInput
  and: [OIDCSessionWhereInput!]
  or: [OIDCSessionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """issuer field predicates"""
  issuer: String
  issuerNEQ: String
  issuerIn: [String!]
  issuerNotIn: [String!]
  issuerGT: String
  issuerGTE: String
  issuerLT: String
  issuerLTE: String
  issuerContains: String
  issuerHasPrefix: String
  issuerHasSuffix: String
  issuerEqualFold: String
  issuerContainsFold: String
  """subject field predicates"""
  subject: String
  subjectNEQ: String
  subjectIn: [String!]
  subjectNotIn: [String!]
  subjectGT: String
  subjectGTE: String
  subjectLT: String
  subjectLTE: String
  subjectContains: String
  subjectHasPrefix: String
  subjectHasSuffix: String
  subjectEqualFold: String
  subjectContainsFold: String
  """expires_at field predicates"""
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  """issued_at field predicates"""
  issuedAt: Time
  issuedAtNEQ: Time
  issuedAtIn: [Time!]
  issuedAtNotIn: [Time!]
  issuedAtGT: Time
  issuedAtGTE: Time
  issuedAtLT: Time
  issuedAtLTE: Time
  """requested_at field predicates"""
  requestedAt: Time
  requestedAtNEQ: Time
  requestedAtIn: [Time!]
  requestedAtNotIn: [Time!]
  requestedAtGT: Time
  requestedAtGTE: Time
  requestedAtLT: Time
  requestedAtLTE: Time
  """auth_time field predicates"""
  authTime: Time
  authTimeNEQ: Time
  authTimeIn: [Time!]
  authTimeNotIn: [Time!]
  authTimeGT: Time
  authTimeGTE: Time
  authTimeLT: Time
  authTimeLTE: Time
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  users: [User!]!
}
"""The builtin Time type"""
scalar Time
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  """The name displayed for the user"""
  name: String
  """True if the user is active and able to authenticate"""
  isactivated: Boolean
}
type User implements Node {
  id: ID!
  """The name displayed for the user"""
  name: String!
  """True if the user is active and able to authenticate"""
  isactivated: Boolean! @goField(name: "IsActivated", forceResolver: false)
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """Name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """IsActivated field predicates"""
  isactivated: Boolean
  isactivatedNEQ: Boolean
}
