// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/oauthparrequest"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// OAuthPARRequestUpdate is the builder for updating OAuthPARRequest entities.
type OAuthPARRequestUpdate struct {
	config
	hooks    []Hook
	mutation *OAuthPARRequestMutation
}

// Where appends a list predicates to the OAuthPARRequestUpdate builder.
func (opru *OAuthPARRequestUpdate) Where(ps ...predicate.OAuthPARRequest) *OAuthPARRequestUpdate {
	opru.mutation.Where(ps...)
	return opru
}

// SetRequest sets the "request" field.
func (opru *OAuthPARRequestUpdate) SetRequest(s string) *OAuthPARRequestUpdate {
	opru.mutation.SetRequest(s)
	return opru
}

// SetNillableRequest sets the "request" field if the given value is not nil.
func (opru *OAuthPARRequestUpdate) SetNillableRequest(s *string) *OAuthPARRequestUpdate {
	if s != nil {
		opru.SetRequest(*s)
	}
	return opru
}

// Mutation returns the OAuthPARRequestMutation object of the builder.
func (opru *OAuthPARRequestUpdate) Mutation() *OAuthPARRequestMutation {
	return opru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opru *OAuthPARRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, opru.sqlSave, opru.mutation, opru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opru *OAuthPARRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := opru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opru *OAuthPARRequestUpdate) Exec(ctx context.Context) error {
	_, err := opru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opru *OAuthPARRequestUpdate) ExecX(ctx context.Context) {
	if err := opru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (opru *OAuthPARRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthparrequest.Table, oauthparrequest.Columns, sqlgraph.NewFieldSpec(oauthparrequest.FieldID, field.TypeInt))
	if ps := opru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opru.mutation.Request(); ok {
		_spec.SetField(oauthparrequest.FieldRequest, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, opru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthparrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	opru.mutation.done = true
	return n, nil
}

// OAuthPARRequestUpdateOne is the builder for updating a single OAuthPARRequest entity.
type OAuthPARRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OAuthPARRequestMutation
}

// SetRequest sets the "request" field.
func (opruo *OAuthPARRequestUpdateOne) SetRequest(s string) *OAuthPARRequestUpdateOne {
	opruo.mutation.SetRequest(s)
	return opruo
}

// SetNillableRequest sets the "request" field if the given value is not nil.
func (opruo *OAuthPARRequestUpdateOne) SetNillableRequest(s *string) *OAuthPARRequestUpdateOne {
	if s != nil {
		opruo.SetRequest(*s)
	}
	return opruo
}

// Mutation returns the OAuthPARRequestMutation object of the builder.
func (opruo *OAuthPARRequestUpdateOne) Mutation() *OAuthPARRequestMutation {
	return opruo.mutation
}

// Where appends a list predicates to the OAuthPARRequestUpdate builder.
func (opruo *OAuthPARRequestUpdateOne) Where(ps ...predicate.OAuthPARRequest) *OAuthPARRequestUpdateOne {
	opruo.mutation.Where(ps...)
	return opruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opruo *OAuthPARRequestUpdateOne) Select(field string, fields ...string) *OAuthPARRequestUpdateOne {
	opruo.fields = append([]string{field}, fields...)
	return opruo
}

// Save executes the query and returns the updated OAuthPARRequest entity.
func (opruo *OAuthPARRequestUpdateOne) Save(ctx context.Context) (*OAuthPARRequest, error) {
	return withHooks(ctx, opruo.sqlSave, opruo.mutation, opruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opruo *OAuthPARRequestUpdateOne) SaveX(ctx context.Context) *OAuthPARRequest {
	node, err := opruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opruo *OAuthPARRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := opruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opruo *OAuthPARRequestUpdateOne) ExecX(ctx context.Context) {
	if err := opruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (opruo *OAuthPARRequestUpdateOne) sqlSave(ctx context.Context) (_node *OAuthPARRequest, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthparrequest.Table, oauthparrequest.Columns, sqlgraph.NewFieldSpec(oauthparrequest.FieldID, field.TypeInt))
	id, ok := opruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthPARRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := opruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthparrequest.FieldID)
		for _, f := range fields {
			if !oauthparrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthparrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opruo.mutation.Request(); ok {
		_spec.SetField(oauthparrequest.FieldRequest, field.TypeString, value)
	}
	_node = &OAuthPARRequest{config: opruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthparrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	opruo.mutation.done = true
	return _node, nil
}
