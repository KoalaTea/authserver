// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/oauthsession"
	"github.com/koalatea/authserver/server/ent/pkce"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// PKCEUpdate is the builder for updating PKCE entities.
type PKCEUpdate struct {
	config
	hooks    []Hook
	mutation *PKCEMutation
}

// Where appends a list predicates to the PKCEUpdate builder.
func (pu *PKCEUpdate) Where(ps ...predicate.PKCE) *PKCEUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCode sets the "code" field.
func (pu *PKCEUpdate) SetCode(s string) *PKCEUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *PKCEUpdate) SetNillableCode(s *string) *PKCEUpdate {
	if s != nil {
		pu.SetCode(*s)
	}
	return pu
}

// SetSessionID sets the "session" edge to the OAuthSession entity by ID.
func (pu *PKCEUpdate) SetSessionID(id int) *PKCEUpdate {
	pu.mutation.SetSessionID(id)
	return pu
}

// SetNillableSessionID sets the "session" edge to the OAuthSession entity by ID if the given value is not nil.
func (pu *PKCEUpdate) SetNillableSessionID(id *int) *PKCEUpdate {
	if id != nil {
		pu = pu.SetSessionID(*id)
	}
	return pu
}

// SetSession sets the "session" edge to the OAuthSession entity.
func (pu *PKCEUpdate) SetSession(o *OAuthSession) *PKCEUpdate {
	return pu.SetSessionID(o.ID)
}

// Mutation returns the PKCEMutation object of the builder.
func (pu *PKCEUpdate) Mutation() *PKCEMutation {
	return pu.mutation
}

// ClearSession clears the "session" edge to the OAuthSession entity.
func (pu *PKCEUpdate) ClearSession() *PKCEUpdate {
	pu.mutation.ClearSession()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PKCEUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PKCEUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PKCEUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PKCEUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PKCEUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pkce.Table, pkce.Columns, sqlgraph.NewFieldSpec(pkce.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(pkce.FieldCode, field.TypeString, value)
	}
	if pu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkce.SessionTable,
			Columns: []string{pkce.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkce.SessionTable,
			Columns: []string{pkce.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pkce.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PKCEUpdateOne is the builder for updating a single PKCE entity.
type PKCEUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PKCEMutation
}

// SetCode sets the "code" field.
func (puo *PKCEUpdateOne) SetCode(s string) *PKCEUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *PKCEUpdateOne) SetNillableCode(s *string) *PKCEUpdateOne {
	if s != nil {
		puo.SetCode(*s)
	}
	return puo
}

// SetSessionID sets the "session" edge to the OAuthSession entity by ID.
func (puo *PKCEUpdateOne) SetSessionID(id int) *PKCEUpdateOne {
	puo.mutation.SetSessionID(id)
	return puo
}

// SetNillableSessionID sets the "session" edge to the OAuthSession entity by ID if the given value is not nil.
func (puo *PKCEUpdateOne) SetNillableSessionID(id *int) *PKCEUpdateOne {
	if id != nil {
		puo = puo.SetSessionID(*id)
	}
	return puo
}

// SetSession sets the "session" edge to the OAuthSession entity.
func (puo *PKCEUpdateOne) SetSession(o *OAuthSession) *PKCEUpdateOne {
	return puo.SetSessionID(o.ID)
}

// Mutation returns the PKCEMutation object of the builder.
func (puo *PKCEUpdateOne) Mutation() *PKCEMutation {
	return puo.mutation
}

// ClearSession clears the "session" edge to the OAuthSession entity.
func (puo *PKCEUpdateOne) ClearSession() *PKCEUpdateOne {
	puo.mutation.ClearSession()
	return puo
}

// Where appends a list predicates to the PKCEUpdate builder.
func (puo *PKCEUpdateOne) Where(ps ...predicate.PKCE) *PKCEUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PKCEUpdateOne) Select(field string, fields ...string) *PKCEUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated PKCE entity.
func (puo *PKCEUpdateOne) Save(ctx context.Context) (*PKCE, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PKCEUpdateOne) SaveX(ctx context.Context) *PKCE {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PKCEUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PKCEUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PKCEUpdateOne) sqlSave(ctx context.Context) (_node *PKCE, err error) {
	_spec := sqlgraph.NewUpdateSpec(pkce.Table, pkce.Columns, sqlgraph.NewFieldSpec(pkce.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PKCE.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pkce.FieldID)
		for _, f := range fields {
			if !pkce.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pkce.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(pkce.FieldCode, field.TypeString, value)
	}
	if puo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkce.SessionTable,
			Columns: []string{pkce.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pkce.SessionTable,
			Columns: []string{pkce.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PKCE{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pkce.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
