// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/koalatea/authserver/server/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/koalatea/authserver/server/ent/authcode"
	"github.com/koalatea/authserver/server/ent/cert"
	"github.com/koalatea/authserver/server/ent/denylistedjti"
	"github.com/koalatea/authserver/server/ent/oauthaccesstoken"
	"github.com/koalatea/authserver/server/ent/oauthclient"
	"github.com/koalatea/authserver/server/ent/oauthparrequest"
	"github.com/koalatea/authserver/server/ent/oauthrefreshtoken"
	"github.com/koalatea/authserver/server/ent/oauthsession"
	"github.com/koalatea/authserver/server/ent/oidcauthcode"
	"github.com/koalatea/authserver/server/ent/pkce"
	"github.com/koalatea/authserver/server/ent/publicjwk"
	"github.com/koalatea/authserver/server/ent/publicjwkset"
	"github.com/koalatea/authserver/server/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AuthCode is the client for interacting with the AuthCode builders.
	AuthCode *AuthCodeClient
	// Cert is the client for interacting with the Cert builders.
	Cert *CertClient
	// DenyListedJTI is the client for interacting with the DenyListedJTI builders.
	DenyListedJTI *DenyListedJTIClient
	// OAuthAccessToken is the client for interacting with the OAuthAccessToken builders.
	OAuthAccessToken *OAuthAccessTokenClient
	// OAuthClient is the client for interacting with the OAuthClient builders.
	OAuthClient *OAuthClientClient
	// OAuthPARRequest is the client for interacting with the OAuthPARRequest builders.
	OAuthPARRequest *OAuthPARRequestClient
	// OAuthRefreshToken is the client for interacting with the OAuthRefreshToken builders.
	OAuthRefreshToken *OAuthRefreshTokenClient
	// OAuthSession is the client for interacting with the OAuthSession builders.
	OAuthSession *OAuthSessionClient
	// OIDCAuthCode is the client for interacting with the OIDCAuthCode builders.
	OIDCAuthCode *OIDCAuthCodeClient
	// PKCE is the client for interacting with the PKCE builders.
	PKCE *PKCEClient
	// PublicJWK is the client for interacting with the PublicJWK builders.
	PublicJWK *PublicJWKClient
	// PublicJWKSet is the client for interacting with the PublicJWKSet builders.
	PublicJWKSet *PublicJWKSetClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AuthCode = NewAuthCodeClient(c.config)
	c.Cert = NewCertClient(c.config)
	c.DenyListedJTI = NewDenyListedJTIClient(c.config)
	c.OAuthAccessToken = NewOAuthAccessTokenClient(c.config)
	c.OAuthClient = NewOAuthClientClient(c.config)
	c.OAuthPARRequest = NewOAuthPARRequestClient(c.config)
	c.OAuthRefreshToken = NewOAuthRefreshTokenClient(c.config)
	c.OAuthSession = NewOAuthSessionClient(c.config)
	c.OIDCAuthCode = NewOIDCAuthCodeClient(c.config)
	c.PKCE = NewPKCEClient(c.config)
	c.PublicJWK = NewPublicJWKClient(c.config)
	c.PublicJWKSet = NewPublicJWKSetClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		AuthCode:          NewAuthCodeClient(cfg),
		Cert:              NewCertClient(cfg),
		DenyListedJTI:     NewDenyListedJTIClient(cfg),
		OAuthAccessToken:  NewOAuthAccessTokenClient(cfg),
		OAuthClient:       NewOAuthClientClient(cfg),
		OAuthPARRequest:   NewOAuthPARRequestClient(cfg),
		OAuthRefreshToken: NewOAuthRefreshTokenClient(cfg),
		OAuthSession:      NewOAuthSessionClient(cfg),
		OIDCAuthCode:      NewOIDCAuthCodeClient(cfg),
		PKCE:              NewPKCEClient(cfg),
		PublicJWK:         NewPublicJWKClient(cfg),
		PublicJWKSet:      NewPublicJWKSetClient(cfg),
		User:              NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		AuthCode:          NewAuthCodeClient(cfg),
		Cert:              NewCertClient(cfg),
		DenyListedJTI:     NewDenyListedJTIClient(cfg),
		OAuthAccessToken:  NewOAuthAccessTokenClient(cfg),
		OAuthClient:       NewOAuthClientClient(cfg),
		OAuthPARRequest:   NewOAuthPARRequestClient(cfg),
		OAuthRefreshToken: NewOAuthRefreshTokenClient(cfg),
		OAuthSession:      NewOAuthSessionClient(cfg),
		OIDCAuthCode:      NewOIDCAuthCodeClient(cfg),
		PKCE:              NewPKCEClient(cfg),
		PublicJWK:         NewPublicJWKClient(cfg),
		PublicJWKSet:      NewPublicJWKSetClient(cfg),
		User:              NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AuthCode.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AuthCode, c.Cert, c.DenyListedJTI, c.OAuthAccessToken, c.OAuthClient,
		c.OAuthPARRequest, c.OAuthRefreshToken, c.OAuthSession, c.OIDCAuthCode, c.PKCE,
		c.PublicJWK, c.PublicJWKSet, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AuthCode, c.Cert, c.DenyListedJTI, c.OAuthAccessToken, c.OAuthClient,
		c.OAuthPARRequest, c.OAuthRefreshToken, c.OAuthSession, c.OIDCAuthCode, c.PKCE,
		c.PublicJWK, c.PublicJWKSet, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuthCodeMutation:
		return c.AuthCode.mutate(ctx, m)
	case *CertMutation:
		return c.Cert.mutate(ctx, m)
	case *DenyListedJTIMutation:
		return c.DenyListedJTI.mutate(ctx, m)
	case *OAuthAccessTokenMutation:
		return c.OAuthAccessToken.mutate(ctx, m)
	case *OAuthClientMutation:
		return c.OAuthClient.mutate(ctx, m)
	case *OAuthPARRequestMutation:
		return c.OAuthPARRequest.mutate(ctx, m)
	case *OAuthRefreshTokenMutation:
		return c.OAuthRefreshToken.mutate(ctx, m)
	case *OAuthSessionMutation:
		return c.OAuthSession.mutate(ctx, m)
	case *OIDCAuthCodeMutation:
		return c.OIDCAuthCode.mutate(ctx, m)
	case *PKCEMutation:
		return c.PKCE.mutate(ctx, m)
	case *PublicJWKMutation:
		return c.PublicJWK.mutate(ctx, m)
	case *PublicJWKSetMutation:
		return c.PublicJWKSet.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuthCodeClient is a client for the AuthCode schema.
type AuthCodeClient struct {
	config
}

// NewAuthCodeClient returns a client for the AuthCode from the given config.
func NewAuthCodeClient(c config) *AuthCodeClient {
	return &AuthCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authcode.Hooks(f(g(h())))`.
func (c *AuthCodeClient) Use(hooks ...Hook) {
	c.hooks.AuthCode = append(c.hooks.AuthCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `authcode.Intercept(f(g(h())))`.
func (c *AuthCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuthCode = append(c.inters.AuthCode, interceptors...)
}

// Create returns a builder for creating a AuthCode entity.
func (c *AuthCodeClient) Create() *AuthCodeCreate {
	mutation := newAuthCodeMutation(c.config, OpCreate)
	return &AuthCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthCode entities.
func (c *AuthCodeClient) CreateBulk(builders ...*AuthCodeCreate) *AuthCodeCreateBulk {
	return &AuthCodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuthCodeClient) MapCreateBulk(slice any, setFunc func(*AuthCodeCreate, int)) *AuthCodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuthCodeCreateBulk{err: fmt.Errorf("calling to AuthCodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuthCodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuthCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthCode.
func (c *AuthCodeClient) Update() *AuthCodeUpdate {
	mutation := newAuthCodeMutation(c.config, OpUpdate)
	return &AuthCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthCodeClient) UpdateOne(ac *AuthCode) *AuthCodeUpdateOne {
	mutation := newAuthCodeMutation(c.config, OpUpdateOne, withAuthCode(ac))
	return &AuthCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthCodeClient) UpdateOneID(id int) *AuthCodeUpdateOne {
	mutation := newAuthCodeMutation(c.config, OpUpdateOne, withAuthCodeID(id))
	return &AuthCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthCode.
func (c *AuthCodeClient) Delete() *AuthCodeDelete {
	mutation := newAuthCodeMutation(c.config, OpDelete)
	return &AuthCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthCodeClient) DeleteOne(ac *AuthCode) *AuthCodeDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthCodeClient) DeleteOneID(id int) *AuthCodeDeleteOne {
	builder := c.Delete().Where(authcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthCodeDeleteOne{builder}
}

// Query returns a query builder for AuthCode.
func (c *AuthCodeClient) Query() *AuthCodeQuery {
	return &AuthCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthCode},
		inters: c.Interceptors(),
	}
}

// Get returns a AuthCode entity by its id.
func (c *AuthCodeClient) Get(ctx context.Context, id int) (*AuthCode, error) {
	return c.Query().Where(authcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthCodeClient) GetX(ctx context.Context, id int) *AuthCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a AuthCode.
func (c *AuthCodeClient) QuerySession(ac *AuthCode) *OAuthSessionQuery {
	query := (&OAuthSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(authcode.Table, authcode.FieldID, id),
			sqlgraph.To(oauthsession.Table, oauthsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, authcode.SessionTable, authcode.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuthCodeClient) Hooks() []Hook {
	return c.hooks.AuthCode
}

// Interceptors returns the client interceptors.
func (c *AuthCodeClient) Interceptors() []Interceptor {
	return c.inters.AuthCode
}

func (c *AuthCodeClient) mutate(ctx context.Context, m *AuthCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AuthCode mutation op: %q", m.Op())
	}
}

// CertClient is a client for the Cert schema.
type CertClient struct {
	config
}

// NewCertClient returns a client for the Cert from the given config.
func NewCertClient(c config) *CertClient {
	return &CertClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cert.Hooks(f(g(h())))`.
func (c *CertClient) Use(hooks ...Hook) {
	c.hooks.Cert = append(c.hooks.Cert, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cert.Intercept(f(g(h())))`.
func (c *CertClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cert = append(c.inters.Cert, interceptors...)
}

// Create returns a builder for creating a Cert entity.
func (c *CertClient) Create() *CertCreate {
	mutation := newCertMutation(c.config, OpCreate)
	return &CertCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cert entities.
func (c *CertClient) CreateBulk(builders ...*CertCreate) *CertCreateBulk {
	return &CertCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CertClient) MapCreateBulk(slice any, setFunc func(*CertCreate, int)) *CertCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CertCreateBulk{err: fmt.Errorf("calling to CertClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CertCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CertCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cert.
func (c *CertClient) Update() *CertUpdate {
	mutation := newCertMutation(c.config, OpUpdate)
	return &CertUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CertClient) UpdateOne(ce *Cert) *CertUpdateOne {
	mutation := newCertMutation(c.config, OpUpdateOne, withCert(ce))
	return &CertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CertClient) UpdateOneID(id int) *CertUpdateOne {
	mutation := newCertMutation(c.config, OpUpdateOne, withCertID(id))
	return &CertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cert.
func (c *CertClient) Delete() *CertDelete {
	mutation := newCertMutation(c.config, OpDelete)
	return &CertDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CertClient) DeleteOne(ce *Cert) *CertDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CertClient) DeleteOneID(id int) *CertDeleteOne {
	builder := c.Delete().Where(cert.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CertDeleteOne{builder}
}

// Query returns a query builder for Cert.
func (c *CertClient) Query() *CertQuery {
	return &CertQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCert},
		inters: c.Interceptors(),
	}
}

// Get returns a Cert entity by its id.
func (c *CertClient) Get(ctx context.Context, id int) (*Cert, error) {
	return c.Query().Where(cert.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CertClient) GetX(ctx context.Context, id int) *Cert {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CertClient) Hooks() []Hook {
	return c.hooks.Cert
}

// Interceptors returns the client interceptors.
func (c *CertClient) Interceptors() []Interceptor {
	return c.inters.Cert
}

func (c *CertClient) mutate(ctx context.Context, m *CertMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CertCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CertUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CertDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cert mutation op: %q", m.Op())
	}
}

// DenyListedJTIClient is a client for the DenyListedJTI schema.
type DenyListedJTIClient struct {
	config
}

// NewDenyListedJTIClient returns a client for the DenyListedJTI from the given config.
func NewDenyListedJTIClient(c config) *DenyListedJTIClient {
	return &DenyListedJTIClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `denylistedjti.Hooks(f(g(h())))`.
func (c *DenyListedJTIClient) Use(hooks ...Hook) {
	c.hooks.DenyListedJTI = append(c.hooks.DenyListedJTI, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `denylistedjti.Intercept(f(g(h())))`.
func (c *DenyListedJTIClient) Intercept(interceptors ...Interceptor) {
	c.inters.DenyListedJTI = append(c.inters.DenyListedJTI, interceptors...)
}

// Create returns a builder for creating a DenyListedJTI entity.
func (c *DenyListedJTIClient) Create() *DenyListedJTICreate {
	mutation := newDenyListedJTIMutation(c.config, OpCreate)
	return &DenyListedJTICreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DenyListedJTI entities.
func (c *DenyListedJTIClient) CreateBulk(builders ...*DenyListedJTICreate) *DenyListedJTICreateBulk {
	return &DenyListedJTICreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DenyListedJTIClient) MapCreateBulk(slice any, setFunc func(*DenyListedJTICreate, int)) *DenyListedJTICreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DenyListedJTICreateBulk{err: fmt.Errorf("calling to DenyListedJTIClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DenyListedJTICreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DenyListedJTICreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DenyListedJTI.
func (c *DenyListedJTIClient) Update() *DenyListedJTIUpdate {
	mutation := newDenyListedJTIMutation(c.config, OpUpdate)
	return &DenyListedJTIUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DenyListedJTIClient) UpdateOne(dlj *DenyListedJTI) *DenyListedJTIUpdateOne {
	mutation := newDenyListedJTIMutation(c.config, OpUpdateOne, withDenyListedJTI(dlj))
	return &DenyListedJTIUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DenyListedJTIClient) UpdateOneID(id int) *DenyListedJTIUpdateOne {
	mutation := newDenyListedJTIMutation(c.config, OpUpdateOne, withDenyListedJTIID(id))
	return &DenyListedJTIUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DenyListedJTI.
func (c *DenyListedJTIClient) Delete() *DenyListedJTIDelete {
	mutation := newDenyListedJTIMutation(c.config, OpDelete)
	return &DenyListedJTIDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DenyListedJTIClient) DeleteOne(dlj *DenyListedJTI) *DenyListedJTIDeleteOne {
	return c.DeleteOneID(dlj.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DenyListedJTIClient) DeleteOneID(id int) *DenyListedJTIDeleteOne {
	builder := c.Delete().Where(denylistedjti.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DenyListedJTIDeleteOne{builder}
}

// Query returns a query builder for DenyListedJTI.
func (c *DenyListedJTIClient) Query() *DenyListedJTIQuery {
	return &DenyListedJTIQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDenyListedJTI},
		inters: c.Interceptors(),
	}
}

// Get returns a DenyListedJTI entity by its id.
func (c *DenyListedJTIClient) Get(ctx context.Context, id int) (*DenyListedJTI, error) {
	return c.Query().Where(denylistedjti.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DenyListedJTIClient) GetX(ctx context.Context, id int) *DenyListedJTI {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DenyListedJTIClient) Hooks() []Hook {
	return c.hooks.DenyListedJTI
}

// Interceptors returns the client interceptors.
func (c *DenyListedJTIClient) Interceptors() []Interceptor {
	return c.inters.DenyListedJTI
}

func (c *DenyListedJTIClient) mutate(ctx context.Context, m *DenyListedJTIMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DenyListedJTICreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DenyListedJTIUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DenyListedJTIUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DenyListedJTIDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DenyListedJTI mutation op: %q", m.Op())
	}
}

// OAuthAccessTokenClient is a client for the OAuthAccessToken schema.
type OAuthAccessTokenClient struct {
	config
}

// NewOAuthAccessTokenClient returns a client for the OAuthAccessToken from the given config.
func NewOAuthAccessTokenClient(c config) *OAuthAccessTokenClient {
	return &OAuthAccessTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthaccesstoken.Hooks(f(g(h())))`.
func (c *OAuthAccessTokenClient) Use(hooks ...Hook) {
	c.hooks.OAuthAccessToken = append(c.hooks.OAuthAccessToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauthaccesstoken.Intercept(f(g(h())))`.
func (c *OAuthAccessTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.OAuthAccessToken = append(c.inters.OAuthAccessToken, interceptors...)
}

// Create returns a builder for creating a OAuthAccessToken entity.
func (c *OAuthAccessTokenClient) Create() *OAuthAccessTokenCreate {
	mutation := newOAuthAccessTokenMutation(c.config, OpCreate)
	return &OAuthAccessTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthAccessToken entities.
func (c *OAuthAccessTokenClient) CreateBulk(builders ...*OAuthAccessTokenCreate) *OAuthAccessTokenCreateBulk {
	return &OAuthAccessTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OAuthAccessTokenClient) MapCreateBulk(slice any, setFunc func(*OAuthAccessTokenCreate, int)) *OAuthAccessTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OAuthAccessTokenCreateBulk{err: fmt.Errorf("calling to OAuthAccessTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OAuthAccessTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OAuthAccessTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthAccessToken.
func (c *OAuthAccessTokenClient) Update() *OAuthAccessTokenUpdate {
	mutation := newOAuthAccessTokenMutation(c.config, OpUpdate)
	return &OAuthAccessTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthAccessTokenClient) UpdateOne(oat *OAuthAccessToken) *OAuthAccessTokenUpdateOne {
	mutation := newOAuthAccessTokenMutation(c.config, OpUpdateOne, withOAuthAccessToken(oat))
	return &OAuthAccessTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthAccessTokenClient) UpdateOneID(id int) *OAuthAccessTokenUpdateOne {
	mutation := newOAuthAccessTokenMutation(c.config, OpUpdateOne, withOAuthAccessTokenID(id))
	return &OAuthAccessTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthAccessToken.
func (c *OAuthAccessTokenClient) Delete() *OAuthAccessTokenDelete {
	mutation := newOAuthAccessTokenMutation(c.config, OpDelete)
	return &OAuthAccessTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthAccessTokenClient) DeleteOne(oat *OAuthAccessToken) *OAuthAccessTokenDeleteOne {
	return c.DeleteOneID(oat.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthAccessTokenClient) DeleteOneID(id int) *OAuthAccessTokenDeleteOne {
	builder := c.Delete().Where(oauthaccesstoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthAccessTokenDeleteOne{builder}
}

// Query returns a query builder for OAuthAccessToken.
func (c *OAuthAccessTokenClient) Query() *OAuthAccessTokenQuery {
	return &OAuthAccessTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOAuthAccessToken},
		inters: c.Interceptors(),
	}
}

// Get returns a OAuthAccessToken entity by its id.
func (c *OAuthAccessTokenClient) Get(ctx context.Context, id int) (*OAuthAccessToken, error) {
	return c.Query().Where(oauthaccesstoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthAccessTokenClient) GetX(ctx context.Context, id int) *OAuthAccessToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a OAuthAccessToken.
func (c *OAuthAccessTokenClient) QuerySession(oat *OAuthAccessToken) *OAuthSessionQuery {
	query := (&OAuthSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthaccesstoken.Table, oauthaccesstoken.FieldID, id),
			sqlgraph.To(oauthsession.Table, oauthsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oauthaccesstoken.SessionTable, oauthaccesstoken.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(oat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OAuthAccessTokenClient) Hooks() []Hook {
	return c.hooks.OAuthAccessToken
}

// Interceptors returns the client interceptors.
func (c *OAuthAccessTokenClient) Interceptors() []Interceptor {
	return c.inters.OAuthAccessToken
}

func (c *OAuthAccessTokenClient) mutate(ctx context.Context, m *OAuthAccessTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OAuthAccessTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OAuthAccessTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OAuthAccessTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OAuthAccessTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OAuthAccessToken mutation op: %q", m.Op())
	}
}

// OAuthClientClient is a client for the OAuthClient schema.
type OAuthClientClient struct {
	config
}

// NewOAuthClientClient returns a client for the OAuthClient from the given config.
func NewOAuthClientClient(c config) *OAuthClientClient {
	return &OAuthClientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthclient.Hooks(f(g(h())))`.
func (c *OAuthClientClient) Use(hooks ...Hook) {
	c.hooks.OAuthClient = append(c.hooks.OAuthClient, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauthclient.Intercept(f(g(h())))`.
func (c *OAuthClientClient) Intercept(interceptors ...Interceptor) {
	c.inters.OAuthClient = append(c.inters.OAuthClient, interceptors...)
}

// Create returns a builder for creating a OAuthClient entity.
func (c *OAuthClientClient) Create() *OAuthClientCreate {
	mutation := newOAuthClientMutation(c.config, OpCreate)
	return &OAuthClientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthClient entities.
func (c *OAuthClientClient) CreateBulk(builders ...*OAuthClientCreate) *OAuthClientCreateBulk {
	return &OAuthClientCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OAuthClientClient) MapCreateBulk(slice any, setFunc func(*OAuthClientCreate, int)) *OAuthClientCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OAuthClientCreateBulk{err: fmt.Errorf("calling to OAuthClientClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OAuthClientCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OAuthClientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthClient.
func (c *OAuthClientClient) Update() *OAuthClientUpdate {
	mutation := newOAuthClientMutation(c.config, OpUpdate)
	return &OAuthClientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthClientClient) UpdateOne(oc *OAuthClient) *OAuthClientUpdateOne {
	mutation := newOAuthClientMutation(c.config, OpUpdateOne, withOAuthClient(oc))
	return &OAuthClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthClientClient) UpdateOneID(id int) *OAuthClientUpdateOne {
	mutation := newOAuthClientMutation(c.config, OpUpdateOne, withOAuthClientID(id))
	return &OAuthClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthClient.
func (c *OAuthClientClient) Delete() *OAuthClientDelete {
	mutation := newOAuthClientMutation(c.config, OpDelete)
	return &OAuthClientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthClientClient) DeleteOne(oc *OAuthClient) *OAuthClientDeleteOne {
	return c.DeleteOneID(oc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthClientClient) DeleteOneID(id int) *OAuthClientDeleteOne {
	builder := c.Delete().Where(oauthclient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthClientDeleteOne{builder}
}

// Query returns a query builder for OAuthClient.
func (c *OAuthClientClient) Query() *OAuthClientQuery {
	return &OAuthClientQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOAuthClient},
		inters: c.Interceptors(),
	}
}

// Get returns a OAuthClient entity by its id.
func (c *OAuthClientClient) Get(ctx context.Context, id int) (*OAuthClient, error) {
	return c.Query().Where(oauthclient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthClientClient) GetX(ctx context.Context, id int) *OAuthClient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OAuthClientClient) Hooks() []Hook {
	return c.hooks.OAuthClient
}

// Interceptors returns the client interceptors.
func (c *OAuthClientClient) Interceptors() []Interceptor {
	return c.inters.OAuthClient
}

func (c *OAuthClientClient) mutate(ctx context.Context, m *OAuthClientMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OAuthClientCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OAuthClientUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OAuthClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OAuthClientDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OAuthClient mutation op: %q", m.Op())
	}
}

// OAuthPARRequestClient is a client for the OAuthPARRequest schema.
type OAuthPARRequestClient struct {
	config
}

// NewOAuthPARRequestClient returns a client for the OAuthPARRequest from the given config.
func NewOAuthPARRequestClient(c config) *OAuthPARRequestClient {
	return &OAuthPARRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthparrequest.Hooks(f(g(h())))`.
func (c *OAuthPARRequestClient) Use(hooks ...Hook) {
	c.hooks.OAuthPARRequest = append(c.hooks.OAuthPARRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauthparrequest.Intercept(f(g(h())))`.
func (c *OAuthPARRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.OAuthPARRequest = append(c.inters.OAuthPARRequest, interceptors...)
}

// Create returns a builder for creating a OAuthPARRequest entity.
func (c *OAuthPARRequestClient) Create() *OAuthPARRequestCreate {
	mutation := newOAuthPARRequestMutation(c.config, OpCreate)
	return &OAuthPARRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthPARRequest entities.
func (c *OAuthPARRequestClient) CreateBulk(builders ...*OAuthPARRequestCreate) *OAuthPARRequestCreateBulk {
	return &OAuthPARRequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OAuthPARRequestClient) MapCreateBulk(slice any, setFunc func(*OAuthPARRequestCreate, int)) *OAuthPARRequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OAuthPARRequestCreateBulk{err: fmt.Errorf("calling to OAuthPARRequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OAuthPARRequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OAuthPARRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthPARRequest.
func (c *OAuthPARRequestClient) Update() *OAuthPARRequestUpdate {
	mutation := newOAuthPARRequestMutation(c.config, OpUpdate)
	return &OAuthPARRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthPARRequestClient) UpdateOne(opr *OAuthPARRequest) *OAuthPARRequestUpdateOne {
	mutation := newOAuthPARRequestMutation(c.config, OpUpdateOne, withOAuthPARRequest(opr))
	return &OAuthPARRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthPARRequestClient) UpdateOneID(id int) *OAuthPARRequestUpdateOne {
	mutation := newOAuthPARRequestMutation(c.config, OpUpdateOne, withOAuthPARRequestID(id))
	return &OAuthPARRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthPARRequest.
func (c *OAuthPARRequestClient) Delete() *OAuthPARRequestDelete {
	mutation := newOAuthPARRequestMutation(c.config, OpDelete)
	return &OAuthPARRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthPARRequestClient) DeleteOne(opr *OAuthPARRequest) *OAuthPARRequestDeleteOne {
	return c.DeleteOneID(opr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthPARRequestClient) DeleteOneID(id int) *OAuthPARRequestDeleteOne {
	builder := c.Delete().Where(oauthparrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthPARRequestDeleteOne{builder}
}

// Query returns a query builder for OAuthPARRequest.
func (c *OAuthPARRequestClient) Query() *OAuthPARRequestQuery {
	return &OAuthPARRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOAuthPARRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a OAuthPARRequest entity by its id.
func (c *OAuthPARRequestClient) Get(ctx context.Context, id int) (*OAuthPARRequest, error) {
	return c.Query().Where(oauthparrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthPARRequestClient) GetX(ctx context.Context, id int) *OAuthPARRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OAuthPARRequestClient) Hooks() []Hook {
	return c.hooks.OAuthPARRequest
}

// Interceptors returns the client interceptors.
func (c *OAuthPARRequestClient) Interceptors() []Interceptor {
	return c.inters.OAuthPARRequest
}

func (c *OAuthPARRequestClient) mutate(ctx context.Context, m *OAuthPARRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OAuthPARRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OAuthPARRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OAuthPARRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OAuthPARRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OAuthPARRequest mutation op: %q", m.Op())
	}
}

// OAuthRefreshTokenClient is a client for the OAuthRefreshToken schema.
type OAuthRefreshTokenClient struct {
	config
}

// NewOAuthRefreshTokenClient returns a client for the OAuthRefreshToken from the given config.
func NewOAuthRefreshTokenClient(c config) *OAuthRefreshTokenClient {
	return &OAuthRefreshTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthrefreshtoken.Hooks(f(g(h())))`.
func (c *OAuthRefreshTokenClient) Use(hooks ...Hook) {
	c.hooks.OAuthRefreshToken = append(c.hooks.OAuthRefreshToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauthrefreshtoken.Intercept(f(g(h())))`.
func (c *OAuthRefreshTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.OAuthRefreshToken = append(c.inters.OAuthRefreshToken, interceptors...)
}

// Create returns a builder for creating a OAuthRefreshToken entity.
func (c *OAuthRefreshTokenClient) Create() *OAuthRefreshTokenCreate {
	mutation := newOAuthRefreshTokenMutation(c.config, OpCreate)
	return &OAuthRefreshTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthRefreshToken entities.
func (c *OAuthRefreshTokenClient) CreateBulk(builders ...*OAuthRefreshTokenCreate) *OAuthRefreshTokenCreateBulk {
	return &OAuthRefreshTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OAuthRefreshTokenClient) MapCreateBulk(slice any, setFunc func(*OAuthRefreshTokenCreate, int)) *OAuthRefreshTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OAuthRefreshTokenCreateBulk{err: fmt.Errorf("calling to OAuthRefreshTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OAuthRefreshTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OAuthRefreshTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthRefreshToken.
func (c *OAuthRefreshTokenClient) Update() *OAuthRefreshTokenUpdate {
	mutation := newOAuthRefreshTokenMutation(c.config, OpUpdate)
	return &OAuthRefreshTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthRefreshTokenClient) UpdateOne(ort *OAuthRefreshToken) *OAuthRefreshTokenUpdateOne {
	mutation := newOAuthRefreshTokenMutation(c.config, OpUpdateOne, withOAuthRefreshToken(ort))
	return &OAuthRefreshTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthRefreshTokenClient) UpdateOneID(id int) *OAuthRefreshTokenUpdateOne {
	mutation := newOAuthRefreshTokenMutation(c.config, OpUpdateOne, withOAuthRefreshTokenID(id))
	return &OAuthRefreshTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthRefreshToken.
func (c *OAuthRefreshTokenClient) Delete() *OAuthRefreshTokenDelete {
	mutation := newOAuthRefreshTokenMutation(c.config, OpDelete)
	return &OAuthRefreshTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthRefreshTokenClient) DeleteOne(ort *OAuthRefreshToken) *OAuthRefreshTokenDeleteOne {
	return c.DeleteOneID(ort.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthRefreshTokenClient) DeleteOneID(id int) *OAuthRefreshTokenDeleteOne {
	builder := c.Delete().Where(oauthrefreshtoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthRefreshTokenDeleteOne{builder}
}

// Query returns a query builder for OAuthRefreshToken.
func (c *OAuthRefreshTokenClient) Query() *OAuthRefreshTokenQuery {
	return &OAuthRefreshTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOAuthRefreshToken},
		inters: c.Interceptors(),
	}
}

// Get returns a OAuthRefreshToken entity by its id.
func (c *OAuthRefreshTokenClient) Get(ctx context.Context, id int) (*OAuthRefreshToken, error) {
	return c.Query().Where(oauthrefreshtoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthRefreshTokenClient) GetX(ctx context.Context, id int) *OAuthRefreshToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a OAuthRefreshToken.
func (c *OAuthRefreshTokenClient) QuerySession(ort *OAuthRefreshToken) *OAuthSessionQuery {
	query := (&OAuthSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ort.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthrefreshtoken.Table, oauthrefreshtoken.FieldID, id),
			sqlgraph.To(oauthsession.Table, oauthsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oauthrefreshtoken.SessionTable, oauthrefreshtoken.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(ort.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OAuthRefreshTokenClient) Hooks() []Hook {
	return c.hooks.OAuthRefreshToken
}

// Interceptors returns the client interceptors.
func (c *OAuthRefreshTokenClient) Interceptors() []Interceptor {
	return c.inters.OAuthRefreshToken
}

func (c *OAuthRefreshTokenClient) mutate(ctx context.Context, m *OAuthRefreshTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OAuthRefreshTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OAuthRefreshTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OAuthRefreshTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OAuthRefreshTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OAuthRefreshToken mutation op: %q", m.Op())
	}
}

// OAuthSessionClient is a client for the OAuthSession schema.
type OAuthSessionClient struct {
	config
}

// NewOAuthSessionClient returns a client for the OAuthSession from the given config.
func NewOAuthSessionClient(c config) *OAuthSessionClient {
	return &OAuthSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthsession.Hooks(f(g(h())))`.
func (c *OAuthSessionClient) Use(hooks ...Hook) {
	c.hooks.OAuthSession = append(c.hooks.OAuthSession, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauthsession.Intercept(f(g(h())))`.
func (c *OAuthSessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.OAuthSession = append(c.inters.OAuthSession, interceptors...)
}

// Create returns a builder for creating a OAuthSession entity.
func (c *OAuthSessionClient) Create() *OAuthSessionCreate {
	mutation := newOAuthSessionMutation(c.config, OpCreate)
	return &OAuthSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthSession entities.
func (c *OAuthSessionClient) CreateBulk(builders ...*OAuthSessionCreate) *OAuthSessionCreateBulk {
	return &OAuthSessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OAuthSessionClient) MapCreateBulk(slice any, setFunc func(*OAuthSessionCreate, int)) *OAuthSessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OAuthSessionCreateBulk{err: fmt.Errorf("calling to OAuthSessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OAuthSessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OAuthSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthSession.
func (c *OAuthSessionClient) Update() *OAuthSessionUpdate {
	mutation := newOAuthSessionMutation(c.config, OpUpdate)
	return &OAuthSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthSessionClient) UpdateOne(os *OAuthSession) *OAuthSessionUpdateOne {
	mutation := newOAuthSessionMutation(c.config, OpUpdateOne, withOAuthSession(os))
	return &OAuthSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthSessionClient) UpdateOneID(id int) *OAuthSessionUpdateOne {
	mutation := newOAuthSessionMutation(c.config, OpUpdateOne, withOAuthSessionID(id))
	return &OAuthSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthSession.
func (c *OAuthSessionClient) Delete() *OAuthSessionDelete {
	mutation := newOAuthSessionMutation(c.config, OpDelete)
	return &OAuthSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthSessionClient) DeleteOne(os *OAuthSession) *OAuthSessionDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthSessionClient) DeleteOneID(id int) *OAuthSessionDeleteOne {
	builder := c.Delete().Where(oauthsession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthSessionDeleteOne{builder}
}

// Query returns a query builder for OAuthSession.
func (c *OAuthSessionClient) Query() *OAuthSessionQuery {
	return &OAuthSessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOAuthSession},
		inters: c.Interceptors(),
	}
}

// Get returns a OAuthSession entity by its id.
func (c *OAuthSessionClient) Get(ctx context.Context, id int) (*OAuthSession, error) {
	return c.Query().Where(oauthsession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthSessionClient) GetX(ctx context.Context, id int) *OAuthSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OAuthSessionClient) Hooks() []Hook {
	return c.hooks.OAuthSession
}

// Interceptors returns the client interceptors.
func (c *OAuthSessionClient) Interceptors() []Interceptor {
	return c.inters.OAuthSession
}

func (c *OAuthSessionClient) mutate(ctx context.Context, m *OAuthSessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OAuthSessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OAuthSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OAuthSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OAuthSessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OAuthSession mutation op: %q", m.Op())
	}
}

// OIDCAuthCodeClient is a client for the OIDCAuthCode schema.
type OIDCAuthCodeClient struct {
	config
}

// NewOIDCAuthCodeClient returns a client for the OIDCAuthCode from the given config.
func NewOIDCAuthCodeClient(c config) *OIDCAuthCodeClient {
	return &OIDCAuthCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oidcauthcode.Hooks(f(g(h())))`.
func (c *OIDCAuthCodeClient) Use(hooks ...Hook) {
	c.hooks.OIDCAuthCode = append(c.hooks.OIDCAuthCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oidcauthcode.Intercept(f(g(h())))`.
func (c *OIDCAuthCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.OIDCAuthCode = append(c.inters.OIDCAuthCode, interceptors...)
}

// Create returns a builder for creating a OIDCAuthCode entity.
func (c *OIDCAuthCodeClient) Create() *OIDCAuthCodeCreate {
	mutation := newOIDCAuthCodeMutation(c.config, OpCreate)
	return &OIDCAuthCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OIDCAuthCode entities.
func (c *OIDCAuthCodeClient) CreateBulk(builders ...*OIDCAuthCodeCreate) *OIDCAuthCodeCreateBulk {
	return &OIDCAuthCodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OIDCAuthCodeClient) MapCreateBulk(slice any, setFunc func(*OIDCAuthCodeCreate, int)) *OIDCAuthCodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OIDCAuthCodeCreateBulk{err: fmt.Errorf("calling to OIDCAuthCodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OIDCAuthCodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OIDCAuthCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OIDCAuthCode.
func (c *OIDCAuthCodeClient) Update() *OIDCAuthCodeUpdate {
	mutation := newOIDCAuthCodeMutation(c.config, OpUpdate)
	return &OIDCAuthCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OIDCAuthCodeClient) UpdateOne(oac *OIDCAuthCode) *OIDCAuthCodeUpdateOne {
	mutation := newOIDCAuthCodeMutation(c.config, OpUpdateOne, withOIDCAuthCode(oac))
	return &OIDCAuthCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OIDCAuthCodeClient) UpdateOneID(id int) *OIDCAuthCodeUpdateOne {
	mutation := newOIDCAuthCodeMutation(c.config, OpUpdateOne, withOIDCAuthCodeID(id))
	return &OIDCAuthCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OIDCAuthCode.
func (c *OIDCAuthCodeClient) Delete() *OIDCAuthCodeDelete {
	mutation := newOIDCAuthCodeMutation(c.config, OpDelete)
	return &OIDCAuthCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OIDCAuthCodeClient) DeleteOne(oac *OIDCAuthCode) *OIDCAuthCodeDeleteOne {
	return c.DeleteOneID(oac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OIDCAuthCodeClient) DeleteOneID(id int) *OIDCAuthCodeDeleteOne {
	builder := c.Delete().Where(oidcauthcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OIDCAuthCodeDeleteOne{builder}
}

// Query returns a query builder for OIDCAuthCode.
func (c *OIDCAuthCodeClient) Query() *OIDCAuthCodeQuery {
	return &OIDCAuthCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOIDCAuthCode},
		inters: c.Interceptors(),
	}
}

// Get returns a OIDCAuthCode entity by its id.
func (c *OIDCAuthCodeClient) Get(ctx context.Context, id int) (*OIDCAuthCode, error) {
	return c.Query().Where(oidcauthcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OIDCAuthCodeClient) GetX(ctx context.Context, id int) *OIDCAuthCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a OIDCAuthCode.
func (c *OIDCAuthCodeClient) QuerySession(oac *OIDCAuthCode) *OAuthSessionQuery {
	query := (&OAuthSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oidcauthcode.Table, oidcauthcode.FieldID, id),
			sqlgraph.To(oauthsession.Table, oauthsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oidcauthcode.SessionTable, oidcauthcode.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(oac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OIDCAuthCodeClient) Hooks() []Hook {
	return c.hooks.OIDCAuthCode
}

// Interceptors returns the client interceptors.
func (c *OIDCAuthCodeClient) Interceptors() []Interceptor {
	return c.inters.OIDCAuthCode
}

func (c *OIDCAuthCodeClient) mutate(ctx context.Context, m *OIDCAuthCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OIDCAuthCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OIDCAuthCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OIDCAuthCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OIDCAuthCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OIDCAuthCode mutation op: %q", m.Op())
	}
}

// PKCEClient is a client for the PKCE schema.
type PKCEClient struct {
	config
}

// NewPKCEClient returns a client for the PKCE from the given config.
func NewPKCEClient(c config) *PKCEClient {
	return &PKCEClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pkce.Hooks(f(g(h())))`.
func (c *PKCEClient) Use(hooks ...Hook) {
	c.hooks.PKCE = append(c.hooks.PKCE, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pkce.Intercept(f(g(h())))`.
func (c *PKCEClient) Intercept(interceptors ...Interceptor) {
	c.inters.PKCE = append(c.inters.PKCE, interceptors...)
}

// Create returns a builder for creating a PKCE entity.
func (c *PKCEClient) Create() *PKCECreate {
	mutation := newPKCEMutation(c.config, OpCreate)
	return &PKCECreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PKCE entities.
func (c *PKCEClient) CreateBulk(builders ...*PKCECreate) *PKCECreateBulk {
	return &PKCECreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PKCEClient) MapCreateBulk(slice any, setFunc func(*PKCECreate, int)) *PKCECreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PKCECreateBulk{err: fmt.Errorf("calling to PKCEClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PKCECreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PKCECreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PKCE.
func (c *PKCEClient) Update() *PKCEUpdate {
	mutation := newPKCEMutation(c.config, OpUpdate)
	return &PKCEUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PKCEClient) UpdateOne(pk *PKCE) *PKCEUpdateOne {
	mutation := newPKCEMutation(c.config, OpUpdateOne, withPKCE(pk))
	return &PKCEUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PKCEClient) UpdateOneID(id int) *PKCEUpdateOne {
	mutation := newPKCEMutation(c.config, OpUpdateOne, withPKCEID(id))
	return &PKCEUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PKCE.
func (c *PKCEClient) Delete() *PKCEDelete {
	mutation := newPKCEMutation(c.config, OpDelete)
	return &PKCEDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PKCEClient) DeleteOne(pk *PKCE) *PKCEDeleteOne {
	return c.DeleteOneID(pk.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PKCEClient) DeleteOneID(id int) *PKCEDeleteOne {
	builder := c.Delete().Where(pkce.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PKCEDeleteOne{builder}
}

// Query returns a query builder for PKCE.
func (c *PKCEClient) Query() *PKCEQuery {
	return &PKCEQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePKCE},
		inters: c.Interceptors(),
	}
}

// Get returns a PKCE entity by its id.
func (c *PKCEClient) Get(ctx context.Context, id int) (*PKCE, error) {
	return c.Query().Where(pkce.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PKCEClient) GetX(ctx context.Context, id int) *PKCE {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a PKCE.
func (c *PKCEClient) QuerySession(pk *PKCE) *OAuthSessionQuery {
	query := (&OAuthSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pk.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pkce.Table, pkce.FieldID, id),
			sqlgraph.To(oauthsession.Table, oauthsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pkce.SessionTable, pkce.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(pk.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PKCEClient) Hooks() []Hook {
	return c.hooks.PKCE
}

// Interceptors returns the client interceptors.
func (c *PKCEClient) Interceptors() []Interceptor {
	return c.inters.PKCE
}

func (c *PKCEClient) mutate(ctx context.Context, m *PKCEMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PKCECreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PKCEUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PKCEUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PKCEDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PKCE mutation op: %q", m.Op())
	}
}

// PublicJWKClient is a client for the PublicJWK schema.
type PublicJWKClient struct {
	config
}

// NewPublicJWKClient returns a client for the PublicJWK from the given config.
func NewPublicJWKClient(c config) *PublicJWKClient {
	return &PublicJWKClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `publicjwk.Hooks(f(g(h())))`.
func (c *PublicJWKClient) Use(hooks ...Hook) {
	c.hooks.PublicJWK = append(c.hooks.PublicJWK, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `publicjwk.Intercept(f(g(h())))`.
func (c *PublicJWKClient) Intercept(interceptors ...Interceptor) {
	c.inters.PublicJWK = append(c.inters.PublicJWK, interceptors...)
}

// Create returns a builder for creating a PublicJWK entity.
func (c *PublicJWKClient) Create() *PublicJWKCreate {
	mutation := newPublicJWKMutation(c.config, OpCreate)
	return &PublicJWKCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PublicJWK entities.
func (c *PublicJWKClient) CreateBulk(builders ...*PublicJWKCreate) *PublicJWKCreateBulk {
	return &PublicJWKCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PublicJWKClient) MapCreateBulk(slice any, setFunc func(*PublicJWKCreate, int)) *PublicJWKCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PublicJWKCreateBulk{err: fmt.Errorf("calling to PublicJWKClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PublicJWKCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PublicJWKCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PublicJWK.
func (c *PublicJWKClient) Update() *PublicJWKUpdate {
	mutation := newPublicJWKMutation(c.config, OpUpdate)
	return &PublicJWKUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PublicJWKClient) UpdateOne(pj *PublicJWK) *PublicJWKUpdateOne {
	mutation := newPublicJWKMutation(c.config, OpUpdateOne, withPublicJWK(pj))
	return &PublicJWKUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PublicJWKClient) UpdateOneID(id int) *PublicJWKUpdateOne {
	mutation := newPublicJWKMutation(c.config, OpUpdateOne, withPublicJWKID(id))
	return &PublicJWKUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PublicJWK.
func (c *PublicJWKClient) Delete() *PublicJWKDelete {
	mutation := newPublicJWKMutation(c.config, OpDelete)
	return &PublicJWKDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PublicJWKClient) DeleteOne(pj *PublicJWK) *PublicJWKDeleteOne {
	return c.DeleteOneID(pj.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PublicJWKClient) DeleteOneID(id int) *PublicJWKDeleteOne {
	builder := c.Delete().Where(publicjwk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PublicJWKDeleteOne{builder}
}

// Query returns a query builder for PublicJWK.
func (c *PublicJWKClient) Query() *PublicJWKQuery {
	return &PublicJWKQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePublicJWK},
		inters: c.Interceptors(),
	}
}

// Get returns a PublicJWK entity by its id.
func (c *PublicJWKClient) Get(ctx context.Context, id int) (*PublicJWK, error) {
	return c.Query().Where(publicjwk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PublicJWKClient) GetX(ctx context.Context, id int) *PublicJWK {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PublicJWKClient) Hooks() []Hook {
	return c.hooks.PublicJWK
}

// Interceptors returns the client interceptors.
func (c *PublicJWKClient) Interceptors() []Interceptor {
	return c.inters.PublicJWK
}

func (c *PublicJWKClient) mutate(ctx context.Context, m *PublicJWKMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PublicJWKCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PublicJWKUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PublicJWKUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PublicJWKDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PublicJWK mutation op: %q", m.Op())
	}
}

// PublicJWKSetClient is a client for the PublicJWKSet schema.
type PublicJWKSetClient struct {
	config
}

// NewPublicJWKSetClient returns a client for the PublicJWKSet from the given config.
func NewPublicJWKSetClient(c config) *PublicJWKSetClient {
	return &PublicJWKSetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `publicjwkset.Hooks(f(g(h())))`.
func (c *PublicJWKSetClient) Use(hooks ...Hook) {
	c.hooks.PublicJWKSet = append(c.hooks.PublicJWKSet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `publicjwkset.Intercept(f(g(h())))`.
func (c *PublicJWKSetClient) Intercept(interceptors ...Interceptor) {
	c.inters.PublicJWKSet = append(c.inters.PublicJWKSet, interceptors...)
}

// Create returns a builder for creating a PublicJWKSet entity.
func (c *PublicJWKSetClient) Create() *PublicJWKSetCreate {
	mutation := newPublicJWKSetMutation(c.config, OpCreate)
	return &PublicJWKSetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PublicJWKSet entities.
func (c *PublicJWKSetClient) CreateBulk(builders ...*PublicJWKSetCreate) *PublicJWKSetCreateBulk {
	return &PublicJWKSetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PublicJWKSetClient) MapCreateBulk(slice any, setFunc func(*PublicJWKSetCreate, int)) *PublicJWKSetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PublicJWKSetCreateBulk{err: fmt.Errorf("calling to PublicJWKSetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PublicJWKSetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PublicJWKSetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PublicJWKSet.
func (c *PublicJWKSetClient) Update() *PublicJWKSetUpdate {
	mutation := newPublicJWKSetMutation(c.config, OpUpdate)
	return &PublicJWKSetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PublicJWKSetClient) UpdateOne(pjs *PublicJWKSet) *PublicJWKSetUpdateOne {
	mutation := newPublicJWKSetMutation(c.config, OpUpdateOne, withPublicJWKSet(pjs))
	return &PublicJWKSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PublicJWKSetClient) UpdateOneID(id int) *PublicJWKSetUpdateOne {
	mutation := newPublicJWKSetMutation(c.config, OpUpdateOne, withPublicJWKSetID(id))
	return &PublicJWKSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PublicJWKSet.
func (c *PublicJWKSetClient) Delete() *PublicJWKSetDelete {
	mutation := newPublicJWKSetMutation(c.config, OpDelete)
	return &PublicJWKSetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PublicJWKSetClient) DeleteOne(pjs *PublicJWKSet) *PublicJWKSetDeleteOne {
	return c.DeleteOneID(pjs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PublicJWKSetClient) DeleteOneID(id int) *PublicJWKSetDeleteOne {
	builder := c.Delete().Where(publicjwkset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PublicJWKSetDeleteOne{builder}
}

// Query returns a query builder for PublicJWKSet.
func (c *PublicJWKSetClient) Query() *PublicJWKSetQuery {
	return &PublicJWKSetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePublicJWKSet},
		inters: c.Interceptors(),
	}
}

// Get returns a PublicJWKSet entity by its id.
func (c *PublicJWKSetClient) Get(ctx context.Context, id int) (*PublicJWKSet, error) {
	return c.Query().Where(publicjwkset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PublicJWKSetClient) GetX(ctx context.Context, id int) *PublicJWKSet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PublicJWKSetClient) Hooks() []Hook {
	return c.hooks.PublicJWKSet
}

// Interceptors returns the client interceptors.
func (c *PublicJWKSetClient) Interceptors() []Interceptor {
	return c.inters.PublicJWKSet
}

func (c *PublicJWKSetClient) mutate(ctx context.Context, m *PublicJWKSetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PublicJWKSetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PublicJWKSetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PublicJWKSetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PublicJWKSetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PublicJWKSet mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AuthCode, Cert, DenyListedJTI, OAuthAccessToken, OAuthClient, OAuthPARRequest,
		OAuthRefreshToken, OAuthSession, OIDCAuthCode, PKCE, PublicJWK, PublicJWKSet,
		User []ent.Hook
	}
	inters struct {
		AuthCode, Cert, DenyListedJTI, OAuthAccessToken, OAuthClient, OAuthPARRequest,
		OAuthRefreshToken, OAuthSession, OIDCAuthCode, PKCE, PublicJWK, PublicJWKSet,
		User []ent.Interceptor
	}
)
