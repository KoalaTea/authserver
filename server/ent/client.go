// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/koalatea/authserver/server/ent/migrate"

	"github.com/koalatea/authserver/server/ent/authcode"
	"github.com/koalatea/authserver/server/ent/cert"
	"github.com/koalatea/authserver/server/ent/denylistedjti"
	"github.com/koalatea/authserver/server/ent/oauthaccesstoken"
	"github.com/koalatea/authserver/server/ent/oauthclient"
	"github.com/koalatea/authserver/server/ent/oauthparrequest"
	"github.com/koalatea/authserver/server/ent/oauthrefreshtoken"
	"github.com/koalatea/authserver/server/ent/oauthsession"
	"github.com/koalatea/authserver/server/ent/oidcauthcode"
	"github.com/koalatea/authserver/server/ent/pkce"
	"github.com/koalatea/authserver/server/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AuthCode is the client for interacting with the AuthCode builders.
	AuthCode *AuthCodeClient
	// Cert is the client for interacting with the Cert builders.
	Cert *CertClient
	// DenyListedJTI is the client for interacting with the DenyListedJTI builders.
	DenyListedJTI *DenyListedJTIClient
	// OAuthAccessToken is the client for interacting with the OAuthAccessToken builders.
	OAuthAccessToken *OAuthAccessTokenClient
	// OAuthClient is the client for interacting with the OAuthClient builders.
	OAuthClient *OAuthClientClient
	// OAuthPARRequest is the client for interacting with the OAuthPARRequest builders.
	OAuthPARRequest *OAuthPARRequestClient
	// OAuthRefreshToken is the client for interacting with the OAuthRefreshToken builders.
	OAuthRefreshToken *OAuthRefreshTokenClient
	// OAuthSession is the client for interacting with the OAuthSession builders.
	OAuthSession *OAuthSessionClient
	// OIDCAuthCode is the client for interacting with the OIDCAuthCode builders.
	OIDCAuthCode *OIDCAuthCodeClient
	// PKCE is the client for interacting with the PKCE builders.
	PKCE *PKCEClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AuthCode = NewAuthCodeClient(c.config)
	c.Cert = NewCertClient(c.config)
	c.DenyListedJTI = NewDenyListedJTIClient(c.config)
	c.OAuthAccessToken = NewOAuthAccessTokenClient(c.config)
	c.OAuthClient = NewOAuthClientClient(c.config)
	c.OAuthPARRequest = NewOAuthPARRequestClient(c.config)
	c.OAuthRefreshToken = NewOAuthRefreshTokenClient(c.config)
	c.OAuthSession = NewOAuthSessionClient(c.config)
	c.OIDCAuthCode = NewOIDCAuthCodeClient(c.config)
	c.PKCE = NewPKCEClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		AuthCode:          NewAuthCodeClient(cfg),
		Cert:              NewCertClient(cfg),
		DenyListedJTI:     NewDenyListedJTIClient(cfg),
		OAuthAccessToken:  NewOAuthAccessTokenClient(cfg),
		OAuthClient:       NewOAuthClientClient(cfg),
		OAuthPARRequest:   NewOAuthPARRequestClient(cfg),
		OAuthRefreshToken: NewOAuthRefreshTokenClient(cfg),
		OAuthSession:      NewOAuthSessionClient(cfg),
		OIDCAuthCode:      NewOIDCAuthCodeClient(cfg),
		PKCE:              NewPKCEClient(cfg),
		User:              NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		AuthCode:          NewAuthCodeClient(cfg),
		Cert:              NewCertClient(cfg),
		DenyListedJTI:     NewDenyListedJTIClient(cfg),
		OAuthAccessToken:  NewOAuthAccessTokenClient(cfg),
		OAuthClient:       NewOAuthClientClient(cfg),
		OAuthPARRequest:   NewOAuthPARRequestClient(cfg),
		OAuthRefreshToken: NewOAuthRefreshTokenClient(cfg),
		OAuthSession:      NewOAuthSessionClient(cfg),
		OIDCAuthCode:      NewOIDCAuthCodeClient(cfg),
		PKCE:              NewPKCEClient(cfg),
		User:              NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AuthCode.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AuthCode.Use(hooks...)
	c.Cert.Use(hooks...)
	c.DenyListedJTI.Use(hooks...)
	c.OAuthAccessToken.Use(hooks...)
	c.OAuthClient.Use(hooks...)
	c.OAuthPARRequest.Use(hooks...)
	c.OAuthRefreshToken.Use(hooks...)
	c.OAuthSession.Use(hooks...)
	c.OIDCAuthCode.Use(hooks...)
	c.PKCE.Use(hooks...)
	c.User.Use(hooks...)
}

// AuthCodeClient is a client for the AuthCode schema.
type AuthCodeClient struct {
	config
}

// NewAuthCodeClient returns a client for the AuthCode from the given config.
func NewAuthCodeClient(c config) *AuthCodeClient {
	return &AuthCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authcode.Hooks(f(g(h())))`.
func (c *AuthCodeClient) Use(hooks ...Hook) {
	c.hooks.AuthCode = append(c.hooks.AuthCode, hooks...)
}

// Create returns a builder for creating a AuthCode entity.
func (c *AuthCodeClient) Create() *AuthCodeCreate {
	mutation := newAuthCodeMutation(c.config, OpCreate)
	return &AuthCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthCode entities.
func (c *AuthCodeClient) CreateBulk(builders ...*AuthCodeCreate) *AuthCodeCreateBulk {
	return &AuthCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthCode.
func (c *AuthCodeClient) Update() *AuthCodeUpdate {
	mutation := newAuthCodeMutation(c.config, OpUpdate)
	return &AuthCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthCodeClient) UpdateOne(ac *AuthCode) *AuthCodeUpdateOne {
	mutation := newAuthCodeMutation(c.config, OpUpdateOne, withAuthCode(ac))
	return &AuthCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthCodeClient) UpdateOneID(id int) *AuthCodeUpdateOne {
	mutation := newAuthCodeMutation(c.config, OpUpdateOne, withAuthCodeID(id))
	return &AuthCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthCode.
func (c *AuthCodeClient) Delete() *AuthCodeDelete {
	mutation := newAuthCodeMutation(c.config, OpDelete)
	return &AuthCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthCodeClient) DeleteOne(ac *AuthCode) *AuthCodeDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthCodeClient) DeleteOneID(id int) *AuthCodeDeleteOne {
	builder := c.Delete().Where(authcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthCodeDeleteOne{builder}
}

// Query returns a query builder for AuthCode.
func (c *AuthCodeClient) Query() *AuthCodeQuery {
	return &AuthCodeQuery{
		config: c.config,
	}
}

// Get returns a AuthCode entity by its id.
func (c *AuthCodeClient) Get(ctx context.Context, id int) (*AuthCode, error) {
	return c.Query().Where(authcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthCodeClient) GetX(ctx context.Context, id int) *AuthCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a AuthCode.
func (c *AuthCodeClient) QuerySession(ac *AuthCode) *OAuthSessionQuery {
	query := &OAuthSessionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(authcode.Table, authcode.FieldID, id),
			sqlgraph.To(oauthsession.Table, oauthsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, authcode.SessionTable, authcode.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuthCodeClient) Hooks() []Hook {
	return c.hooks.AuthCode
}

// CertClient is a client for the Cert schema.
type CertClient struct {
	config
}

// NewCertClient returns a client for the Cert from the given config.
func NewCertClient(c config) *CertClient {
	return &CertClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cert.Hooks(f(g(h())))`.
func (c *CertClient) Use(hooks ...Hook) {
	c.hooks.Cert = append(c.hooks.Cert, hooks...)
}

// Create returns a builder for creating a Cert entity.
func (c *CertClient) Create() *CertCreate {
	mutation := newCertMutation(c.config, OpCreate)
	return &CertCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cert entities.
func (c *CertClient) CreateBulk(builders ...*CertCreate) *CertCreateBulk {
	return &CertCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cert.
func (c *CertClient) Update() *CertUpdate {
	mutation := newCertMutation(c.config, OpUpdate)
	return &CertUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CertClient) UpdateOne(ce *Cert) *CertUpdateOne {
	mutation := newCertMutation(c.config, OpUpdateOne, withCert(ce))
	return &CertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CertClient) UpdateOneID(id int) *CertUpdateOne {
	mutation := newCertMutation(c.config, OpUpdateOne, withCertID(id))
	return &CertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cert.
func (c *CertClient) Delete() *CertDelete {
	mutation := newCertMutation(c.config, OpDelete)
	return &CertDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CertClient) DeleteOne(ce *Cert) *CertDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CertClient) DeleteOneID(id int) *CertDeleteOne {
	builder := c.Delete().Where(cert.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CertDeleteOne{builder}
}

// Query returns a query builder for Cert.
func (c *CertClient) Query() *CertQuery {
	return &CertQuery{
		config: c.config,
	}
}

// Get returns a Cert entity by its id.
func (c *CertClient) Get(ctx context.Context, id int) (*Cert, error) {
	return c.Query().Where(cert.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CertClient) GetX(ctx context.Context, id int) *Cert {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CertClient) Hooks() []Hook {
	return c.hooks.Cert
}

// DenyListedJTIClient is a client for the DenyListedJTI schema.
type DenyListedJTIClient struct {
	config
}

// NewDenyListedJTIClient returns a client for the DenyListedJTI from the given config.
func NewDenyListedJTIClient(c config) *DenyListedJTIClient {
	return &DenyListedJTIClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `denylistedjti.Hooks(f(g(h())))`.
func (c *DenyListedJTIClient) Use(hooks ...Hook) {
	c.hooks.DenyListedJTI = append(c.hooks.DenyListedJTI, hooks...)
}

// Create returns a builder for creating a DenyListedJTI entity.
func (c *DenyListedJTIClient) Create() *DenyListedJTICreate {
	mutation := newDenyListedJTIMutation(c.config, OpCreate)
	return &DenyListedJTICreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DenyListedJTI entities.
func (c *DenyListedJTIClient) CreateBulk(builders ...*DenyListedJTICreate) *DenyListedJTICreateBulk {
	return &DenyListedJTICreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DenyListedJTI.
func (c *DenyListedJTIClient) Update() *DenyListedJTIUpdate {
	mutation := newDenyListedJTIMutation(c.config, OpUpdate)
	return &DenyListedJTIUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DenyListedJTIClient) UpdateOne(dlj *DenyListedJTI) *DenyListedJTIUpdateOne {
	mutation := newDenyListedJTIMutation(c.config, OpUpdateOne, withDenyListedJTI(dlj))
	return &DenyListedJTIUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DenyListedJTIClient) UpdateOneID(id int) *DenyListedJTIUpdateOne {
	mutation := newDenyListedJTIMutation(c.config, OpUpdateOne, withDenyListedJTIID(id))
	return &DenyListedJTIUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DenyListedJTI.
func (c *DenyListedJTIClient) Delete() *DenyListedJTIDelete {
	mutation := newDenyListedJTIMutation(c.config, OpDelete)
	return &DenyListedJTIDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DenyListedJTIClient) DeleteOne(dlj *DenyListedJTI) *DenyListedJTIDeleteOne {
	return c.DeleteOneID(dlj.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DenyListedJTIClient) DeleteOneID(id int) *DenyListedJTIDeleteOne {
	builder := c.Delete().Where(denylistedjti.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DenyListedJTIDeleteOne{builder}
}

// Query returns a query builder for DenyListedJTI.
func (c *DenyListedJTIClient) Query() *DenyListedJTIQuery {
	return &DenyListedJTIQuery{
		config: c.config,
	}
}

// Get returns a DenyListedJTI entity by its id.
func (c *DenyListedJTIClient) Get(ctx context.Context, id int) (*DenyListedJTI, error) {
	return c.Query().Where(denylistedjti.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DenyListedJTIClient) GetX(ctx context.Context, id int) *DenyListedJTI {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DenyListedJTIClient) Hooks() []Hook {
	return c.hooks.DenyListedJTI
}

// OAuthAccessTokenClient is a client for the OAuthAccessToken schema.
type OAuthAccessTokenClient struct {
	config
}

// NewOAuthAccessTokenClient returns a client for the OAuthAccessToken from the given config.
func NewOAuthAccessTokenClient(c config) *OAuthAccessTokenClient {
	return &OAuthAccessTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthaccesstoken.Hooks(f(g(h())))`.
func (c *OAuthAccessTokenClient) Use(hooks ...Hook) {
	c.hooks.OAuthAccessToken = append(c.hooks.OAuthAccessToken, hooks...)
}

// Create returns a builder for creating a OAuthAccessToken entity.
func (c *OAuthAccessTokenClient) Create() *OAuthAccessTokenCreate {
	mutation := newOAuthAccessTokenMutation(c.config, OpCreate)
	return &OAuthAccessTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthAccessToken entities.
func (c *OAuthAccessTokenClient) CreateBulk(builders ...*OAuthAccessTokenCreate) *OAuthAccessTokenCreateBulk {
	return &OAuthAccessTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthAccessToken.
func (c *OAuthAccessTokenClient) Update() *OAuthAccessTokenUpdate {
	mutation := newOAuthAccessTokenMutation(c.config, OpUpdate)
	return &OAuthAccessTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthAccessTokenClient) UpdateOne(oat *OAuthAccessToken) *OAuthAccessTokenUpdateOne {
	mutation := newOAuthAccessTokenMutation(c.config, OpUpdateOne, withOAuthAccessToken(oat))
	return &OAuthAccessTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthAccessTokenClient) UpdateOneID(id int) *OAuthAccessTokenUpdateOne {
	mutation := newOAuthAccessTokenMutation(c.config, OpUpdateOne, withOAuthAccessTokenID(id))
	return &OAuthAccessTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthAccessToken.
func (c *OAuthAccessTokenClient) Delete() *OAuthAccessTokenDelete {
	mutation := newOAuthAccessTokenMutation(c.config, OpDelete)
	return &OAuthAccessTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthAccessTokenClient) DeleteOne(oat *OAuthAccessToken) *OAuthAccessTokenDeleteOne {
	return c.DeleteOneID(oat.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthAccessTokenClient) DeleteOneID(id int) *OAuthAccessTokenDeleteOne {
	builder := c.Delete().Where(oauthaccesstoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthAccessTokenDeleteOne{builder}
}

// Query returns a query builder for OAuthAccessToken.
func (c *OAuthAccessTokenClient) Query() *OAuthAccessTokenQuery {
	return &OAuthAccessTokenQuery{
		config: c.config,
	}
}

// Get returns a OAuthAccessToken entity by its id.
func (c *OAuthAccessTokenClient) Get(ctx context.Context, id int) (*OAuthAccessToken, error) {
	return c.Query().Where(oauthaccesstoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthAccessTokenClient) GetX(ctx context.Context, id int) *OAuthAccessToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a OAuthAccessToken.
func (c *OAuthAccessTokenClient) QuerySession(oat *OAuthAccessToken) *OAuthSessionQuery {
	query := &OAuthSessionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthaccesstoken.Table, oauthaccesstoken.FieldID, id),
			sqlgraph.To(oauthsession.Table, oauthsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oauthaccesstoken.SessionTable, oauthaccesstoken.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(oat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OAuthAccessTokenClient) Hooks() []Hook {
	return c.hooks.OAuthAccessToken
}

// OAuthClientClient is a client for the OAuthClient schema.
type OAuthClientClient struct {
	config
}

// NewOAuthClientClient returns a client for the OAuthClient from the given config.
func NewOAuthClientClient(c config) *OAuthClientClient {
	return &OAuthClientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthclient.Hooks(f(g(h())))`.
func (c *OAuthClientClient) Use(hooks ...Hook) {
	c.hooks.OAuthClient = append(c.hooks.OAuthClient, hooks...)
}

// Create returns a builder for creating a OAuthClient entity.
func (c *OAuthClientClient) Create() *OAuthClientCreate {
	mutation := newOAuthClientMutation(c.config, OpCreate)
	return &OAuthClientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthClient entities.
func (c *OAuthClientClient) CreateBulk(builders ...*OAuthClientCreate) *OAuthClientCreateBulk {
	return &OAuthClientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthClient.
func (c *OAuthClientClient) Update() *OAuthClientUpdate {
	mutation := newOAuthClientMutation(c.config, OpUpdate)
	return &OAuthClientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthClientClient) UpdateOne(oc *OAuthClient) *OAuthClientUpdateOne {
	mutation := newOAuthClientMutation(c.config, OpUpdateOne, withOAuthClient(oc))
	return &OAuthClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthClientClient) UpdateOneID(id int) *OAuthClientUpdateOne {
	mutation := newOAuthClientMutation(c.config, OpUpdateOne, withOAuthClientID(id))
	return &OAuthClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthClient.
func (c *OAuthClientClient) Delete() *OAuthClientDelete {
	mutation := newOAuthClientMutation(c.config, OpDelete)
	return &OAuthClientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthClientClient) DeleteOne(oc *OAuthClient) *OAuthClientDeleteOne {
	return c.DeleteOneID(oc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthClientClient) DeleteOneID(id int) *OAuthClientDeleteOne {
	builder := c.Delete().Where(oauthclient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthClientDeleteOne{builder}
}

// Query returns a query builder for OAuthClient.
func (c *OAuthClientClient) Query() *OAuthClientQuery {
	return &OAuthClientQuery{
		config: c.config,
	}
}

// Get returns a OAuthClient entity by its id.
func (c *OAuthClientClient) Get(ctx context.Context, id int) (*OAuthClient, error) {
	return c.Query().Where(oauthclient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthClientClient) GetX(ctx context.Context, id int) *OAuthClient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OAuthClientClient) Hooks() []Hook {
	return c.hooks.OAuthClient
}

// OAuthPARRequestClient is a client for the OAuthPARRequest schema.
type OAuthPARRequestClient struct {
	config
}

// NewOAuthPARRequestClient returns a client for the OAuthPARRequest from the given config.
func NewOAuthPARRequestClient(c config) *OAuthPARRequestClient {
	return &OAuthPARRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthparrequest.Hooks(f(g(h())))`.
func (c *OAuthPARRequestClient) Use(hooks ...Hook) {
	c.hooks.OAuthPARRequest = append(c.hooks.OAuthPARRequest, hooks...)
}

// Create returns a builder for creating a OAuthPARRequest entity.
func (c *OAuthPARRequestClient) Create() *OAuthPARRequestCreate {
	mutation := newOAuthPARRequestMutation(c.config, OpCreate)
	return &OAuthPARRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthPARRequest entities.
func (c *OAuthPARRequestClient) CreateBulk(builders ...*OAuthPARRequestCreate) *OAuthPARRequestCreateBulk {
	return &OAuthPARRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthPARRequest.
func (c *OAuthPARRequestClient) Update() *OAuthPARRequestUpdate {
	mutation := newOAuthPARRequestMutation(c.config, OpUpdate)
	return &OAuthPARRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthPARRequestClient) UpdateOne(opr *OAuthPARRequest) *OAuthPARRequestUpdateOne {
	mutation := newOAuthPARRequestMutation(c.config, OpUpdateOne, withOAuthPARRequest(opr))
	return &OAuthPARRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthPARRequestClient) UpdateOneID(id int) *OAuthPARRequestUpdateOne {
	mutation := newOAuthPARRequestMutation(c.config, OpUpdateOne, withOAuthPARRequestID(id))
	return &OAuthPARRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthPARRequest.
func (c *OAuthPARRequestClient) Delete() *OAuthPARRequestDelete {
	mutation := newOAuthPARRequestMutation(c.config, OpDelete)
	return &OAuthPARRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthPARRequestClient) DeleteOne(opr *OAuthPARRequest) *OAuthPARRequestDeleteOne {
	return c.DeleteOneID(opr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthPARRequestClient) DeleteOneID(id int) *OAuthPARRequestDeleteOne {
	builder := c.Delete().Where(oauthparrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthPARRequestDeleteOne{builder}
}

// Query returns a query builder for OAuthPARRequest.
func (c *OAuthPARRequestClient) Query() *OAuthPARRequestQuery {
	return &OAuthPARRequestQuery{
		config: c.config,
	}
}

// Get returns a OAuthPARRequest entity by its id.
func (c *OAuthPARRequestClient) Get(ctx context.Context, id int) (*OAuthPARRequest, error) {
	return c.Query().Where(oauthparrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthPARRequestClient) GetX(ctx context.Context, id int) *OAuthPARRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OAuthPARRequestClient) Hooks() []Hook {
	return c.hooks.OAuthPARRequest
}

// OAuthRefreshTokenClient is a client for the OAuthRefreshToken schema.
type OAuthRefreshTokenClient struct {
	config
}

// NewOAuthRefreshTokenClient returns a client for the OAuthRefreshToken from the given config.
func NewOAuthRefreshTokenClient(c config) *OAuthRefreshTokenClient {
	return &OAuthRefreshTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthrefreshtoken.Hooks(f(g(h())))`.
func (c *OAuthRefreshTokenClient) Use(hooks ...Hook) {
	c.hooks.OAuthRefreshToken = append(c.hooks.OAuthRefreshToken, hooks...)
}

// Create returns a builder for creating a OAuthRefreshToken entity.
func (c *OAuthRefreshTokenClient) Create() *OAuthRefreshTokenCreate {
	mutation := newOAuthRefreshTokenMutation(c.config, OpCreate)
	return &OAuthRefreshTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthRefreshToken entities.
func (c *OAuthRefreshTokenClient) CreateBulk(builders ...*OAuthRefreshTokenCreate) *OAuthRefreshTokenCreateBulk {
	return &OAuthRefreshTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthRefreshToken.
func (c *OAuthRefreshTokenClient) Update() *OAuthRefreshTokenUpdate {
	mutation := newOAuthRefreshTokenMutation(c.config, OpUpdate)
	return &OAuthRefreshTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthRefreshTokenClient) UpdateOne(ort *OAuthRefreshToken) *OAuthRefreshTokenUpdateOne {
	mutation := newOAuthRefreshTokenMutation(c.config, OpUpdateOne, withOAuthRefreshToken(ort))
	return &OAuthRefreshTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthRefreshTokenClient) UpdateOneID(id int) *OAuthRefreshTokenUpdateOne {
	mutation := newOAuthRefreshTokenMutation(c.config, OpUpdateOne, withOAuthRefreshTokenID(id))
	return &OAuthRefreshTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthRefreshToken.
func (c *OAuthRefreshTokenClient) Delete() *OAuthRefreshTokenDelete {
	mutation := newOAuthRefreshTokenMutation(c.config, OpDelete)
	return &OAuthRefreshTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthRefreshTokenClient) DeleteOne(ort *OAuthRefreshToken) *OAuthRefreshTokenDeleteOne {
	return c.DeleteOneID(ort.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthRefreshTokenClient) DeleteOneID(id int) *OAuthRefreshTokenDeleteOne {
	builder := c.Delete().Where(oauthrefreshtoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthRefreshTokenDeleteOne{builder}
}

// Query returns a query builder for OAuthRefreshToken.
func (c *OAuthRefreshTokenClient) Query() *OAuthRefreshTokenQuery {
	return &OAuthRefreshTokenQuery{
		config: c.config,
	}
}

// Get returns a OAuthRefreshToken entity by its id.
func (c *OAuthRefreshTokenClient) Get(ctx context.Context, id int) (*OAuthRefreshToken, error) {
	return c.Query().Where(oauthrefreshtoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthRefreshTokenClient) GetX(ctx context.Context, id int) *OAuthRefreshToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a OAuthRefreshToken.
func (c *OAuthRefreshTokenClient) QuerySession(ort *OAuthRefreshToken) *OAuthSessionQuery {
	query := &OAuthSessionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ort.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthrefreshtoken.Table, oauthrefreshtoken.FieldID, id),
			sqlgraph.To(oauthsession.Table, oauthsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oauthrefreshtoken.SessionTable, oauthrefreshtoken.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(ort.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OAuthRefreshTokenClient) Hooks() []Hook {
	return c.hooks.OAuthRefreshToken
}

// OAuthSessionClient is a client for the OAuthSession schema.
type OAuthSessionClient struct {
	config
}

// NewOAuthSessionClient returns a client for the OAuthSession from the given config.
func NewOAuthSessionClient(c config) *OAuthSessionClient {
	return &OAuthSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthsession.Hooks(f(g(h())))`.
func (c *OAuthSessionClient) Use(hooks ...Hook) {
	c.hooks.OAuthSession = append(c.hooks.OAuthSession, hooks...)
}

// Create returns a builder for creating a OAuthSession entity.
func (c *OAuthSessionClient) Create() *OAuthSessionCreate {
	mutation := newOAuthSessionMutation(c.config, OpCreate)
	return &OAuthSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OAuthSession entities.
func (c *OAuthSessionClient) CreateBulk(builders ...*OAuthSessionCreate) *OAuthSessionCreateBulk {
	return &OAuthSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OAuthSession.
func (c *OAuthSessionClient) Update() *OAuthSessionUpdate {
	mutation := newOAuthSessionMutation(c.config, OpUpdate)
	return &OAuthSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OAuthSessionClient) UpdateOne(os *OAuthSession) *OAuthSessionUpdateOne {
	mutation := newOAuthSessionMutation(c.config, OpUpdateOne, withOAuthSession(os))
	return &OAuthSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OAuthSessionClient) UpdateOneID(id int) *OAuthSessionUpdateOne {
	mutation := newOAuthSessionMutation(c.config, OpUpdateOne, withOAuthSessionID(id))
	return &OAuthSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OAuthSession.
func (c *OAuthSessionClient) Delete() *OAuthSessionDelete {
	mutation := newOAuthSessionMutation(c.config, OpDelete)
	return &OAuthSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OAuthSessionClient) DeleteOne(os *OAuthSession) *OAuthSessionDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OAuthSessionClient) DeleteOneID(id int) *OAuthSessionDeleteOne {
	builder := c.Delete().Where(oauthsession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OAuthSessionDeleteOne{builder}
}

// Query returns a query builder for OAuthSession.
func (c *OAuthSessionClient) Query() *OAuthSessionQuery {
	return &OAuthSessionQuery{
		config: c.config,
	}
}

// Get returns a OAuthSession entity by its id.
func (c *OAuthSessionClient) Get(ctx context.Context, id int) (*OAuthSession, error) {
	return c.Query().Where(oauthsession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OAuthSessionClient) GetX(ctx context.Context, id int) *OAuthSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OAuthSessionClient) Hooks() []Hook {
	return c.hooks.OAuthSession
}

// OIDCAuthCodeClient is a client for the OIDCAuthCode schema.
type OIDCAuthCodeClient struct {
	config
}

// NewOIDCAuthCodeClient returns a client for the OIDCAuthCode from the given config.
func NewOIDCAuthCodeClient(c config) *OIDCAuthCodeClient {
	return &OIDCAuthCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oidcauthcode.Hooks(f(g(h())))`.
func (c *OIDCAuthCodeClient) Use(hooks ...Hook) {
	c.hooks.OIDCAuthCode = append(c.hooks.OIDCAuthCode, hooks...)
}

// Create returns a builder for creating a OIDCAuthCode entity.
func (c *OIDCAuthCodeClient) Create() *OIDCAuthCodeCreate {
	mutation := newOIDCAuthCodeMutation(c.config, OpCreate)
	return &OIDCAuthCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OIDCAuthCode entities.
func (c *OIDCAuthCodeClient) CreateBulk(builders ...*OIDCAuthCodeCreate) *OIDCAuthCodeCreateBulk {
	return &OIDCAuthCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OIDCAuthCode.
func (c *OIDCAuthCodeClient) Update() *OIDCAuthCodeUpdate {
	mutation := newOIDCAuthCodeMutation(c.config, OpUpdate)
	return &OIDCAuthCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OIDCAuthCodeClient) UpdateOne(oac *OIDCAuthCode) *OIDCAuthCodeUpdateOne {
	mutation := newOIDCAuthCodeMutation(c.config, OpUpdateOne, withOIDCAuthCode(oac))
	return &OIDCAuthCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OIDCAuthCodeClient) UpdateOneID(id int) *OIDCAuthCodeUpdateOne {
	mutation := newOIDCAuthCodeMutation(c.config, OpUpdateOne, withOIDCAuthCodeID(id))
	return &OIDCAuthCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OIDCAuthCode.
func (c *OIDCAuthCodeClient) Delete() *OIDCAuthCodeDelete {
	mutation := newOIDCAuthCodeMutation(c.config, OpDelete)
	return &OIDCAuthCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OIDCAuthCodeClient) DeleteOne(oac *OIDCAuthCode) *OIDCAuthCodeDeleteOne {
	return c.DeleteOneID(oac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OIDCAuthCodeClient) DeleteOneID(id int) *OIDCAuthCodeDeleteOne {
	builder := c.Delete().Where(oidcauthcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OIDCAuthCodeDeleteOne{builder}
}

// Query returns a query builder for OIDCAuthCode.
func (c *OIDCAuthCodeClient) Query() *OIDCAuthCodeQuery {
	return &OIDCAuthCodeQuery{
		config: c.config,
	}
}

// Get returns a OIDCAuthCode entity by its id.
func (c *OIDCAuthCodeClient) Get(ctx context.Context, id int) (*OIDCAuthCode, error) {
	return c.Query().Where(oidcauthcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OIDCAuthCodeClient) GetX(ctx context.Context, id int) *OIDCAuthCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a OIDCAuthCode.
func (c *OIDCAuthCodeClient) QuerySession(oac *OIDCAuthCode) *OAuthSessionQuery {
	query := &OAuthSessionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oidcauthcode.Table, oidcauthcode.FieldID, id),
			sqlgraph.To(oauthsession.Table, oauthsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oidcauthcode.SessionTable, oidcauthcode.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(oac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OIDCAuthCodeClient) Hooks() []Hook {
	return c.hooks.OIDCAuthCode
}

// PKCEClient is a client for the PKCE schema.
type PKCEClient struct {
	config
}

// NewPKCEClient returns a client for the PKCE from the given config.
func NewPKCEClient(c config) *PKCEClient {
	return &PKCEClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pkce.Hooks(f(g(h())))`.
func (c *PKCEClient) Use(hooks ...Hook) {
	c.hooks.PKCE = append(c.hooks.PKCE, hooks...)
}

// Create returns a builder for creating a PKCE entity.
func (c *PKCEClient) Create() *PKCECreate {
	mutation := newPKCEMutation(c.config, OpCreate)
	return &PKCECreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PKCE entities.
func (c *PKCEClient) CreateBulk(builders ...*PKCECreate) *PKCECreateBulk {
	return &PKCECreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PKCE.
func (c *PKCEClient) Update() *PKCEUpdate {
	mutation := newPKCEMutation(c.config, OpUpdate)
	return &PKCEUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PKCEClient) UpdateOne(pk *PKCE) *PKCEUpdateOne {
	mutation := newPKCEMutation(c.config, OpUpdateOne, withPKCE(pk))
	return &PKCEUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PKCEClient) UpdateOneID(id int) *PKCEUpdateOne {
	mutation := newPKCEMutation(c.config, OpUpdateOne, withPKCEID(id))
	return &PKCEUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PKCE.
func (c *PKCEClient) Delete() *PKCEDelete {
	mutation := newPKCEMutation(c.config, OpDelete)
	return &PKCEDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PKCEClient) DeleteOne(pk *PKCE) *PKCEDeleteOne {
	return c.DeleteOneID(pk.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PKCEClient) DeleteOneID(id int) *PKCEDeleteOne {
	builder := c.Delete().Where(pkce.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PKCEDeleteOne{builder}
}

// Query returns a query builder for PKCE.
func (c *PKCEClient) Query() *PKCEQuery {
	return &PKCEQuery{
		config: c.config,
	}
}

// Get returns a PKCE entity by its id.
func (c *PKCEClient) Get(ctx context.Context, id int) (*PKCE, error) {
	return c.Query().Where(pkce.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PKCEClient) GetX(ctx context.Context, id int) *PKCE {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a PKCE.
func (c *PKCEClient) QuerySession(pk *PKCE) *OAuthSessionQuery {
	query := &OAuthSessionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pk.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pkce.Table, pkce.FieldID, id),
			sqlgraph.To(oauthsession.Table, oauthsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pkce.SessionTable, pkce.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(pk.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PKCEClient) Hooks() []Hook {
	return c.hooks.PKCE
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
