// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/koalatea/authserver/server/ent/migrate"

	"github.com/koalatea/authserver/server/ent/accessrequest"
	"github.com/koalatea/authserver/server/ent/cert"
	"github.com/koalatea/authserver/server/ent/oidcauthcode"
	"github.com/koalatea/authserver/server/ent/oidcclient"
	"github.com/koalatea/authserver/server/ent/oidcsession"
	"github.com/koalatea/authserver/server/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AccessRequest is the client for interacting with the AccessRequest builders.
	AccessRequest *AccessRequestClient
	// Cert is the client for interacting with the Cert builders.
	Cert *CertClient
	// OIDCAuthCode is the client for interacting with the OIDCAuthCode builders.
	OIDCAuthCode *OIDCAuthCodeClient
	// OIDCClient is the client for interacting with the OIDCClient builders.
	OIDCClient *OIDCClientClient
	// OIDCSession is the client for interacting with the OIDCSession builders.
	OIDCSession *OIDCSessionClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AccessRequest = NewAccessRequestClient(c.config)
	c.Cert = NewCertClient(c.config)
	c.OIDCAuthCode = NewOIDCAuthCodeClient(c.config)
	c.OIDCClient = NewOIDCClientClient(c.config)
	c.OIDCSession = NewOIDCSessionClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		AccessRequest: NewAccessRequestClient(cfg),
		Cert:          NewCertClient(cfg),
		OIDCAuthCode:  NewOIDCAuthCodeClient(cfg),
		OIDCClient:    NewOIDCClientClient(cfg),
		OIDCSession:   NewOIDCSessionClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		AccessRequest: NewAccessRequestClient(cfg),
		Cert:          NewCertClient(cfg),
		OIDCAuthCode:  NewOIDCAuthCodeClient(cfg),
		OIDCClient:    NewOIDCClientClient(cfg),
		OIDCSession:   NewOIDCSessionClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AccessRequest.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AccessRequest.Use(hooks...)
	c.Cert.Use(hooks...)
	c.OIDCAuthCode.Use(hooks...)
	c.OIDCClient.Use(hooks...)
	c.OIDCSession.Use(hooks...)
	c.User.Use(hooks...)
}

// AccessRequestClient is a client for the AccessRequest schema.
type AccessRequestClient struct {
	config
}

// NewAccessRequestClient returns a client for the AccessRequest from the given config.
func NewAccessRequestClient(c config) *AccessRequestClient {
	return &AccessRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accessrequest.Hooks(f(g(h())))`.
func (c *AccessRequestClient) Use(hooks ...Hook) {
	c.hooks.AccessRequest = append(c.hooks.AccessRequest, hooks...)
}

// Create returns a builder for creating a AccessRequest entity.
func (c *AccessRequestClient) Create() *AccessRequestCreate {
	mutation := newAccessRequestMutation(c.config, OpCreate)
	return &AccessRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccessRequest entities.
func (c *AccessRequestClient) CreateBulk(builders ...*AccessRequestCreate) *AccessRequestCreateBulk {
	return &AccessRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccessRequest.
func (c *AccessRequestClient) Update() *AccessRequestUpdate {
	mutation := newAccessRequestMutation(c.config, OpUpdate)
	return &AccessRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccessRequestClient) UpdateOne(ar *AccessRequest) *AccessRequestUpdateOne {
	mutation := newAccessRequestMutation(c.config, OpUpdateOne, withAccessRequest(ar))
	return &AccessRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccessRequestClient) UpdateOneID(id int) *AccessRequestUpdateOne {
	mutation := newAccessRequestMutation(c.config, OpUpdateOne, withAccessRequestID(id))
	return &AccessRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccessRequest.
func (c *AccessRequestClient) Delete() *AccessRequestDelete {
	mutation := newAccessRequestMutation(c.config, OpDelete)
	return &AccessRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccessRequestClient) DeleteOne(ar *AccessRequest) *AccessRequestDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccessRequestClient) DeleteOneID(id int) *AccessRequestDeleteOne {
	builder := c.Delete().Where(accessrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccessRequestDeleteOne{builder}
}

// Query returns a query builder for AccessRequest.
func (c *AccessRequestClient) Query() *AccessRequestQuery {
	return &AccessRequestQuery{
		config: c.config,
	}
}

// Get returns a AccessRequest entity by its id.
func (c *AccessRequestClient) Get(ctx context.Context, id int) (*AccessRequest, error) {
	return c.Query().Where(accessrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccessRequestClient) GetX(ctx context.Context, id int) *AccessRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AccessRequestClient) Hooks() []Hook {
	return c.hooks.AccessRequest
}

// CertClient is a client for the Cert schema.
type CertClient struct {
	config
}

// NewCertClient returns a client for the Cert from the given config.
func NewCertClient(c config) *CertClient {
	return &CertClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cert.Hooks(f(g(h())))`.
func (c *CertClient) Use(hooks ...Hook) {
	c.hooks.Cert = append(c.hooks.Cert, hooks...)
}

// Create returns a builder for creating a Cert entity.
func (c *CertClient) Create() *CertCreate {
	mutation := newCertMutation(c.config, OpCreate)
	return &CertCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cert entities.
func (c *CertClient) CreateBulk(builders ...*CertCreate) *CertCreateBulk {
	return &CertCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cert.
func (c *CertClient) Update() *CertUpdate {
	mutation := newCertMutation(c.config, OpUpdate)
	return &CertUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CertClient) UpdateOne(ce *Cert) *CertUpdateOne {
	mutation := newCertMutation(c.config, OpUpdateOne, withCert(ce))
	return &CertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CertClient) UpdateOneID(id int) *CertUpdateOne {
	mutation := newCertMutation(c.config, OpUpdateOne, withCertID(id))
	return &CertUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cert.
func (c *CertClient) Delete() *CertDelete {
	mutation := newCertMutation(c.config, OpDelete)
	return &CertDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CertClient) DeleteOne(ce *Cert) *CertDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CertClient) DeleteOneID(id int) *CertDeleteOne {
	builder := c.Delete().Where(cert.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CertDeleteOne{builder}
}

// Query returns a query builder for Cert.
func (c *CertClient) Query() *CertQuery {
	return &CertQuery{
		config: c.config,
	}
}

// Get returns a Cert entity by its id.
func (c *CertClient) Get(ctx context.Context, id int) (*Cert, error) {
	return c.Query().Where(cert.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CertClient) GetX(ctx context.Context, id int) *Cert {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CertClient) Hooks() []Hook {
	return c.hooks.Cert
}

// OIDCAuthCodeClient is a client for the OIDCAuthCode schema.
type OIDCAuthCodeClient struct {
	config
}

// NewOIDCAuthCodeClient returns a client for the OIDCAuthCode from the given config.
func NewOIDCAuthCodeClient(c config) *OIDCAuthCodeClient {
	return &OIDCAuthCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oidcauthcode.Hooks(f(g(h())))`.
func (c *OIDCAuthCodeClient) Use(hooks ...Hook) {
	c.hooks.OIDCAuthCode = append(c.hooks.OIDCAuthCode, hooks...)
}

// Create returns a builder for creating a OIDCAuthCode entity.
func (c *OIDCAuthCodeClient) Create() *OIDCAuthCodeCreate {
	mutation := newOIDCAuthCodeMutation(c.config, OpCreate)
	return &OIDCAuthCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OIDCAuthCode entities.
func (c *OIDCAuthCodeClient) CreateBulk(builders ...*OIDCAuthCodeCreate) *OIDCAuthCodeCreateBulk {
	return &OIDCAuthCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OIDCAuthCode.
func (c *OIDCAuthCodeClient) Update() *OIDCAuthCodeUpdate {
	mutation := newOIDCAuthCodeMutation(c.config, OpUpdate)
	return &OIDCAuthCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OIDCAuthCodeClient) UpdateOne(oac *OIDCAuthCode) *OIDCAuthCodeUpdateOne {
	mutation := newOIDCAuthCodeMutation(c.config, OpUpdateOne, withOIDCAuthCode(oac))
	return &OIDCAuthCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OIDCAuthCodeClient) UpdateOneID(id int) *OIDCAuthCodeUpdateOne {
	mutation := newOIDCAuthCodeMutation(c.config, OpUpdateOne, withOIDCAuthCodeID(id))
	return &OIDCAuthCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OIDCAuthCode.
func (c *OIDCAuthCodeClient) Delete() *OIDCAuthCodeDelete {
	mutation := newOIDCAuthCodeMutation(c.config, OpDelete)
	return &OIDCAuthCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OIDCAuthCodeClient) DeleteOne(oac *OIDCAuthCode) *OIDCAuthCodeDeleteOne {
	return c.DeleteOneID(oac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OIDCAuthCodeClient) DeleteOneID(id int) *OIDCAuthCodeDeleteOne {
	builder := c.Delete().Where(oidcauthcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OIDCAuthCodeDeleteOne{builder}
}

// Query returns a query builder for OIDCAuthCode.
func (c *OIDCAuthCodeClient) Query() *OIDCAuthCodeQuery {
	return &OIDCAuthCodeQuery{
		config: c.config,
	}
}

// Get returns a OIDCAuthCode entity by its id.
func (c *OIDCAuthCodeClient) Get(ctx context.Context, id int) (*OIDCAuthCode, error) {
	return c.Query().Where(oidcauthcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OIDCAuthCodeClient) GetX(ctx context.Context, id int) *OIDCAuthCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAccessRequest queries the access_request edge of a OIDCAuthCode.
func (c *OIDCAuthCodeClient) QueryAccessRequest(oac *OIDCAuthCode) *AccessRequestQuery {
	query := &AccessRequestQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oidcauthcode.Table, oidcauthcode.FieldID, id),
			sqlgraph.To(accessrequest.Table, accessrequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oidcauthcode.AccessRequestTable, oidcauthcode.AccessRequestColumn),
		)
		fromV = sqlgraph.Neighbors(oac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySession queries the session edge of a OIDCAuthCode.
func (c *OIDCAuthCodeClient) QuerySession(oac *OIDCAuthCode) *OIDCSessionQuery {
	query := &OIDCSessionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oidcauthcode.Table, oidcauthcode.FieldID, id),
			sqlgraph.To(oidcsession.Table, oidcsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oidcauthcode.SessionTable, oidcauthcode.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(oac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OIDCAuthCodeClient) Hooks() []Hook {
	return c.hooks.OIDCAuthCode
}

// OIDCClientClient is a client for the OIDCClient schema.
type OIDCClientClient struct {
	config
}

// NewOIDCClientClient returns a client for the OIDCClient from the given config.
func NewOIDCClientClient(c config) *OIDCClientClient {
	return &OIDCClientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oidcclient.Hooks(f(g(h())))`.
func (c *OIDCClientClient) Use(hooks ...Hook) {
	c.hooks.OIDCClient = append(c.hooks.OIDCClient, hooks...)
}

// Create returns a builder for creating a OIDCClient entity.
func (c *OIDCClientClient) Create() *OIDCClientCreate {
	mutation := newOIDCClientMutation(c.config, OpCreate)
	return &OIDCClientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OIDCClient entities.
func (c *OIDCClientClient) CreateBulk(builders ...*OIDCClientCreate) *OIDCClientCreateBulk {
	return &OIDCClientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OIDCClient.
func (c *OIDCClientClient) Update() *OIDCClientUpdate {
	mutation := newOIDCClientMutation(c.config, OpUpdate)
	return &OIDCClientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OIDCClientClient) UpdateOne(oc *OIDCClient) *OIDCClientUpdateOne {
	mutation := newOIDCClientMutation(c.config, OpUpdateOne, withOIDCClient(oc))
	return &OIDCClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OIDCClientClient) UpdateOneID(id int) *OIDCClientUpdateOne {
	mutation := newOIDCClientMutation(c.config, OpUpdateOne, withOIDCClientID(id))
	return &OIDCClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OIDCClient.
func (c *OIDCClientClient) Delete() *OIDCClientDelete {
	mutation := newOIDCClientMutation(c.config, OpDelete)
	return &OIDCClientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OIDCClientClient) DeleteOne(oc *OIDCClient) *OIDCClientDeleteOne {
	return c.DeleteOneID(oc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OIDCClientClient) DeleteOneID(id int) *OIDCClientDeleteOne {
	builder := c.Delete().Where(oidcclient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OIDCClientDeleteOne{builder}
}

// Query returns a query builder for OIDCClient.
func (c *OIDCClientClient) Query() *OIDCClientQuery {
	return &OIDCClientQuery{
		config: c.config,
	}
}

// Get returns a OIDCClient entity by its id.
func (c *OIDCClientClient) Get(ctx context.Context, id int) (*OIDCClient, error) {
	return c.Query().Where(oidcclient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OIDCClientClient) GetX(ctx context.Context, id int) *OIDCClient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OIDCClientClient) Hooks() []Hook {
	return c.hooks.OIDCClient
}

// OIDCSessionClient is a client for the OIDCSession schema.
type OIDCSessionClient struct {
	config
}

// NewOIDCSessionClient returns a client for the OIDCSession from the given config.
func NewOIDCSessionClient(c config) *OIDCSessionClient {
	return &OIDCSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oidcsession.Hooks(f(g(h())))`.
func (c *OIDCSessionClient) Use(hooks ...Hook) {
	c.hooks.OIDCSession = append(c.hooks.OIDCSession, hooks...)
}

// Create returns a builder for creating a OIDCSession entity.
func (c *OIDCSessionClient) Create() *OIDCSessionCreate {
	mutation := newOIDCSessionMutation(c.config, OpCreate)
	return &OIDCSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OIDCSession entities.
func (c *OIDCSessionClient) CreateBulk(builders ...*OIDCSessionCreate) *OIDCSessionCreateBulk {
	return &OIDCSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OIDCSession.
func (c *OIDCSessionClient) Update() *OIDCSessionUpdate {
	mutation := newOIDCSessionMutation(c.config, OpUpdate)
	return &OIDCSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OIDCSessionClient) UpdateOne(os *OIDCSession) *OIDCSessionUpdateOne {
	mutation := newOIDCSessionMutation(c.config, OpUpdateOne, withOIDCSession(os))
	return &OIDCSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OIDCSessionClient) UpdateOneID(id int) *OIDCSessionUpdateOne {
	mutation := newOIDCSessionMutation(c.config, OpUpdateOne, withOIDCSessionID(id))
	return &OIDCSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OIDCSession.
func (c *OIDCSessionClient) Delete() *OIDCSessionDelete {
	mutation := newOIDCSessionMutation(c.config, OpDelete)
	return &OIDCSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OIDCSessionClient) DeleteOne(os *OIDCSession) *OIDCSessionDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OIDCSessionClient) DeleteOneID(id int) *OIDCSessionDeleteOne {
	builder := c.Delete().Where(oidcsession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OIDCSessionDeleteOne{builder}
}

// Query returns a query builder for OIDCSession.
func (c *OIDCSessionClient) Query() *OIDCSessionQuery {
	return &OIDCSessionQuery{
		config: c.config,
	}
}

// Get returns a OIDCSession entity by its id.
func (c *OIDCSessionClient) Get(ctx context.Context, id int) (*OIDCSession, error) {
	return c.Query().Where(oidcsession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OIDCSessionClient) GetX(ctx context.Context, id int) *OIDCSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OIDCSessionClient) Hooks() []Hook {
	return c.hooks.OIDCSession
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
