// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/koalatea/authserver/server/ent/oauthaccesstoken"
	"github.com/koalatea/authserver/server/ent/oauthsession"
)

// OAuthAccessToken is the model entity for the OAuthAccessToken schema.
type OAuthAccessToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Signature holds the value of the "signature" field.
	Signature string `json:"signature,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OAuthAccessTokenQuery when eager-loading is set.
	Edges                      OAuthAccessTokenEdges `json:"edges"`
	oauth_access_token_session *int
	selectValues               sql.SelectValues
}

// OAuthAccessTokenEdges holds the relations/edges for other nodes in the graph.
type OAuthAccessTokenEdges struct {
	// information about the request
	Session *OAuthSession `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthAccessTokenEdges) SessionOrErr() (*OAuthSession, error) {
	if e.Session != nil {
		return e.Session, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: oauthsession.Label}
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthAccessToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthaccesstoken.FieldID:
			values[i] = new(sql.NullInt64)
		case oauthaccesstoken.FieldSignature:
			values[i] = new(sql.NullString)
		case oauthaccesstoken.ForeignKeys[0]: // oauth_access_token_session
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthAccessToken fields.
func (oat *OAuthAccessToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthaccesstoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oat.ID = int(value.Int64)
		case oauthaccesstoken.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signature", values[i])
			} else if value.Valid {
				oat.Signature = value.String
			}
		case oauthaccesstoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field oauth_access_token_session", value)
			} else if value.Valid {
				oat.oauth_access_token_session = new(int)
				*oat.oauth_access_token_session = int(value.Int64)
			}
		default:
			oat.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuthAccessToken.
// This includes values selected through modifiers, order, etc.
func (oat *OAuthAccessToken) Value(name string) (ent.Value, error) {
	return oat.selectValues.Get(name)
}

// QuerySession queries the "session" edge of the OAuthAccessToken entity.
func (oat *OAuthAccessToken) QuerySession() *OAuthSessionQuery {
	return NewOAuthAccessTokenClient(oat.config).QuerySession(oat)
}

// Update returns a builder for updating this OAuthAccessToken.
// Note that you need to call OAuthAccessToken.Unwrap() before calling this method if this OAuthAccessToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (oat *OAuthAccessToken) Update() *OAuthAccessTokenUpdateOne {
	return NewOAuthAccessTokenClient(oat.config).UpdateOne(oat)
}

// Unwrap unwraps the OAuthAccessToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oat *OAuthAccessToken) Unwrap() *OAuthAccessToken {
	_tx, ok := oat.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthAccessToken is not a transactional entity")
	}
	oat.config.driver = _tx.drv
	return oat
}

// String implements the fmt.Stringer.
func (oat *OAuthAccessToken) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthAccessToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oat.ID))
	builder.WriteString("signature=")
	builder.WriteString(oat.Signature)
	builder.WriteByte(')')
	return builder.String()
}

// OAuthAccessTokens is a parsable slice of OAuthAccessToken.
type OAuthAccessTokens []*OAuthAccessToken
