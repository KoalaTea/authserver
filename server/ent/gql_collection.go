// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ac *AuthCodeQuery) CollectFields(ctx context.Context, satisfies ...string) (*AuthCodeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ac, nil
	}
	if err := ac.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ac, nil
}

func (ac *AuthCodeQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "session":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &OAuthSessionQuery{config: ac.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			ac.withSession = query
		}
	}
	return nil
}

type authcodePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AuthCodePaginateOption
}

func newAuthCodePaginateArgs(rv map[string]interface{}) *authcodePaginateArgs {
	args := &authcodePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*AuthCodeWhereInput); ok {
		args.opts = append(args.opts, WithAuthCodeFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CertQuery) CollectFields(ctx context.Context, satisfies ...string) (*CertQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return c, nil
	}
	if err := c.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return c, nil
}

func (c *CertQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type certPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CertPaginateOption
}

func newCertPaginateArgs(rv map[string]interface{}) *certPaginateArgs {
	args := &certPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*CertWhereInput); ok {
		args.opts = append(args.opts, WithCertFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (dlj *DenyListedJTIQuery) CollectFields(ctx context.Context, satisfies ...string) (*DenyListedJTIQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return dlj, nil
	}
	if err := dlj.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return dlj, nil
}

func (dlj *DenyListedJTIQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type denylistedjtiPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DenyListedJTIPaginateOption
}

func newDenyListedJTIPaginateArgs(rv map[string]interface{}) *denylistedjtiPaginateArgs {
	args := &denylistedjtiPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*DenyListedJTIWhereInput); ok {
		args.opts = append(args.opts, WithDenyListedJTIFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (oat *OAuthAccessTokenQuery) CollectFields(ctx context.Context, satisfies ...string) (*OAuthAccessTokenQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return oat, nil
	}
	if err := oat.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return oat, nil
}

func (oat *OAuthAccessTokenQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "session":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &OAuthSessionQuery{config: oat.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			oat.withSession = query
		}
	}
	return nil
}

type oauthaccesstokenPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []OAuthAccessTokenPaginateOption
}

func newOAuthAccessTokenPaginateArgs(rv map[string]interface{}) *oauthaccesstokenPaginateArgs {
	args := &oauthaccesstokenPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*OAuthAccessTokenWhereInput); ok {
		args.opts = append(args.opts, WithOAuthAccessTokenFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (oc *OAuthClientQuery) CollectFields(ctx context.Context, satisfies ...string) (*OAuthClientQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return oc, nil
	}
	if err := oc.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return oc, nil
}

func (oc *OAuthClientQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type oauthclientPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []OAuthClientPaginateOption
}

func newOAuthClientPaginateArgs(rv map[string]interface{}) *oauthclientPaginateArgs {
	args := &oauthclientPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*OAuthClientWhereInput); ok {
		args.opts = append(args.opts, WithOAuthClientFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (opr *OAuthPARRequestQuery) CollectFields(ctx context.Context, satisfies ...string) (*OAuthPARRequestQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return opr, nil
	}
	if err := opr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return opr, nil
}

func (opr *OAuthPARRequestQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type oauthparrequestPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []OAuthPARRequestPaginateOption
}

func newOAuthPARRequestPaginateArgs(rv map[string]interface{}) *oauthparrequestPaginateArgs {
	args := &oauthparrequestPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*OAuthPARRequestWhereInput); ok {
		args.opts = append(args.opts, WithOAuthPARRequestFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ort *OAuthRefreshTokenQuery) CollectFields(ctx context.Context, satisfies ...string) (*OAuthRefreshTokenQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ort, nil
	}
	if err := ort.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ort, nil
}

func (ort *OAuthRefreshTokenQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "session":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &OAuthSessionQuery{config: ort.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			ort.withSession = query
		}
	}
	return nil
}

type oauthrefreshtokenPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []OAuthRefreshTokenPaginateOption
}

func newOAuthRefreshTokenPaginateArgs(rv map[string]interface{}) *oauthrefreshtokenPaginateArgs {
	args := &oauthrefreshtokenPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*OAuthRefreshTokenWhereInput); ok {
		args.opts = append(args.opts, WithOAuthRefreshTokenFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (os *OAuthSessionQuery) CollectFields(ctx context.Context, satisfies ...string) (*OAuthSessionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return os, nil
	}
	if err := os.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return os, nil
}

func (os *OAuthSessionQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type oauthsessionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []OAuthSessionPaginateOption
}

func newOAuthSessionPaginateArgs(rv map[string]interface{}) *oauthsessionPaginateArgs {
	args := &oauthsessionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*OAuthSessionWhereInput); ok {
		args.opts = append(args.opts, WithOAuthSessionFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (oac *OIDCAuthCodeQuery) CollectFields(ctx context.Context, satisfies ...string) (*OIDCAuthCodeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return oac, nil
	}
	if err := oac.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return oac, nil
}

func (oac *OIDCAuthCodeQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "session":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &OAuthSessionQuery{config: oac.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			oac.withSession = query
		}
	}
	return nil
}

type oidcauthcodePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []OIDCAuthCodePaginateOption
}

func newOIDCAuthCodePaginateArgs(rv map[string]interface{}) *oidcauthcodePaginateArgs {
	args := &oidcauthcodePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*OIDCAuthCodeWhereInput); ok {
		args.opts = append(args.opts, WithOIDCAuthCodeFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pk *PKCEQuery) CollectFields(ctx context.Context, satisfies ...string) (*PKCEQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pk, nil
	}
	if err := pk.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pk, nil
}

func (pk *PKCEQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	for _, field := range graphql.CollectFields(op, field.Selections, satisfies) {
		switch field.Name {
		case "session":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = &OAuthSessionQuery{config: pk.config}
			)
			if err := query.collectField(ctx, op, field, path, satisfies...); err != nil {
				return err
			}
			pk.withSession = query
		}
	}
	return nil
}

type pkcePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PKCEPaginateOption
}

func newPKCEPaginateArgs(rv map[string]interface{}) *pkcePaginateArgs {
	args := &pkcePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*PKCEWhereInput); ok {
		args.opts = append(args.opts, WithPKCEFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pj *PublicJWKQuery) CollectFields(ctx context.Context, satisfies ...string) (*PublicJWKQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pj, nil
	}
	if err := pj.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pj, nil
}

func (pj *PublicJWKQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type publicjwkPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PublicJWKPaginateOption
}

func newPublicJWKPaginateArgs(rv map[string]interface{}) *publicjwkPaginateArgs {
	args := &publicjwkPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*PublicJWKWhereInput); ok {
		args.opts = append(args.opts, WithPublicJWKFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pjs *PublicJWKSetQuery) CollectFields(ctx context.Context, satisfies ...string) (*PublicJWKSetQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pjs, nil
	}
	if err := pjs.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pjs, nil
}

func (pjs *PublicJWKSetQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type publicjwksetPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PublicJWKSetPaginateOption
}

func newPublicJWKSetPaginateArgs(rv map[string]interface{}) *publicjwksetPaginateArgs {
	args := &publicjwksetPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*PublicJWKSetWhereInput); ok {
		args.opts = append(args.opts, WithPublicJWKSetFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, op *graphql.OperationContext, field graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]interface{}) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}
