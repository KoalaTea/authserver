// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/oauthrefreshtoken"
	"github.com/koalatea/authserver/server/ent/oauthsession"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// OAuthRefreshTokenQuery is the builder for querying OAuthRefreshToken entities.
type OAuthRefreshTokenQuery struct {
	config
	ctx         *QueryContext
	order       []oauthrefreshtoken.OrderOption
	inters      []Interceptor
	predicates  []predicate.OAuthRefreshToken
	withSession *OAuthSessionQuery
	withFKs     bool
	modifiers   []func(*sql.Selector)
	loadTotal   []func(context.Context, []*OAuthRefreshToken) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OAuthRefreshTokenQuery builder.
func (ortq *OAuthRefreshTokenQuery) Where(ps ...predicate.OAuthRefreshToken) *OAuthRefreshTokenQuery {
	ortq.predicates = append(ortq.predicates, ps...)
	return ortq
}

// Limit the number of records to be returned by this query.
func (ortq *OAuthRefreshTokenQuery) Limit(limit int) *OAuthRefreshTokenQuery {
	ortq.ctx.Limit = &limit
	return ortq
}

// Offset to start from.
func (ortq *OAuthRefreshTokenQuery) Offset(offset int) *OAuthRefreshTokenQuery {
	ortq.ctx.Offset = &offset
	return ortq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ortq *OAuthRefreshTokenQuery) Unique(unique bool) *OAuthRefreshTokenQuery {
	ortq.ctx.Unique = &unique
	return ortq
}

// Order specifies how the records should be ordered.
func (ortq *OAuthRefreshTokenQuery) Order(o ...oauthrefreshtoken.OrderOption) *OAuthRefreshTokenQuery {
	ortq.order = append(ortq.order, o...)
	return ortq
}

// QuerySession chains the current query on the "session" edge.
func (ortq *OAuthRefreshTokenQuery) QuerySession() *OAuthSessionQuery {
	query := (&OAuthSessionClient{config: ortq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ortq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ortq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthrefreshtoken.Table, oauthrefreshtoken.FieldID, selector),
			sqlgraph.To(oauthsession.Table, oauthsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oauthrefreshtoken.SessionTable, oauthrefreshtoken.SessionColumn),
		)
		fromU = sqlgraph.SetNeighbors(ortq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OAuthRefreshToken entity from the query.
// Returns a *NotFoundError when no OAuthRefreshToken was found.
func (ortq *OAuthRefreshTokenQuery) First(ctx context.Context) (*OAuthRefreshToken, error) {
	nodes, err := ortq.Limit(1).All(setContextOp(ctx, ortq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oauthrefreshtoken.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ortq *OAuthRefreshTokenQuery) FirstX(ctx context.Context) *OAuthRefreshToken {
	node, err := ortq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OAuthRefreshToken ID from the query.
// Returns a *NotFoundError when no OAuthRefreshToken ID was found.
func (ortq *OAuthRefreshTokenQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ortq.Limit(1).IDs(setContextOp(ctx, ortq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oauthrefreshtoken.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ortq *OAuthRefreshTokenQuery) FirstIDX(ctx context.Context) int {
	id, err := ortq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OAuthRefreshToken entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OAuthRefreshToken entity is found.
// Returns a *NotFoundError when no OAuthRefreshToken entities are found.
func (ortq *OAuthRefreshTokenQuery) Only(ctx context.Context) (*OAuthRefreshToken, error) {
	nodes, err := ortq.Limit(2).All(setContextOp(ctx, ortq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oauthrefreshtoken.Label}
	default:
		return nil, &NotSingularError{oauthrefreshtoken.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ortq *OAuthRefreshTokenQuery) OnlyX(ctx context.Context) *OAuthRefreshToken {
	node, err := ortq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OAuthRefreshToken ID in the query.
// Returns a *NotSingularError when more than one OAuthRefreshToken ID is found.
// Returns a *NotFoundError when no entities are found.
func (ortq *OAuthRefreshTokenQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ortq.Limit(2).IDs(setContextOp(ctx, ortq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oauthrefreshtoken.Label}
	default:
		err = &NotSingularError{oauthrefreshtoken.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ortq *OAuthRefreshTokenQuery) OnlyIDX(ctx context.Context) int {
	id, err := ortq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OAuthRefreshTokens.
func (ortq *OAuthRefreshTokenQuery) All(ctx context.Context) ([]*OAuthRefreshToken, error) {
	ctx = setContextOp(ctx, ortq.ctx, "All")
	if err := ortq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OAuthRefreshToken, *OAuthRefreshTokenQuery]()
	return withInterceptors[[]*OAuthRefreshToken](ctx, ortq, qr, ortq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ortq *OAuthRefreshTokenQuery) AllX(ctx context.Context) []*OAuthRefreshToken {
	nodes, err := ortq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OAuthRefreshToken IDs.
func (ortq *OAuthRefreshTokenQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ortq.ctx.Unique == nil && ortq.path != nil {
		ortq.Unique(true)
	}
	ctx = setContextOp(ctx, ortq.ctx, "IDs")
	if err = ortq.Select(oauthrefreshtoken.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ortq *OAuthRefreshTokenQuery) IDsX(ctx context.Context) []int {
	ids, err := ortq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ortq *OAuthRefreshTokenQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ortq.ctx, "Count")
	if err := ortq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ortq, querierCount[*OAuthRefreshTokenQuery](), ortq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ortq *OAuthRefreshTokenQuery) CountX(ctx context.Context) int {
	count, err := ortq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ortq *OAuthRefreshTokenQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ortq.ctx, "Exist")
	switch _, err := ortq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ortq *OAuthRefreshTokenQuery) ExistX(ctx context.Context) bool {
	exist, err := ortq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OAuthRefreshTokenQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ortq *OAuthRefreshTokenQuery) Clone() *OAuthRefreshTokenQuery {
	if ortq == nil {
		return nil
	}
	return &OAuthRefreshTokenQuery{
		config:      ortq.config,
		ctx:         ortq.ctx.Clone(),
		order:       append([]oauthrefreshtoken.OrderOption{}, ortq.order...),
		inters:      append([]Interceptor{}, ortq.inters...),
		predicates:  append([]predicate.OAuthRefreshToken{}, ortq.predicates...),
		withSession: ortq.withSession.Clone(),
		// clone intermediate query.
		sql:  ortq.sql.Clone(),
		path: ortq.path,
	}
}

// WithSession tells the query-builder to eager-load the nodes that are connected to
// the "session" edge. The optional arguments are used to configure the query builder of the edge.
func (ortq *OAuthRefreshTokenQuery) WithSession(opts ...func(*OAuthSessionQuery)) *OAuthRefreshTokenQuery {
	query := (&OAuthSessionClient{config: ortq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ortq.withSession = query
	return ortq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Signature string `json:"signature,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OAuthRefreshToken.Query().
//		GroupBy(oauthrefreshtoken.FieldSignature).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ortq *OAuthRefreshTokenQuery) GroupBy(field string, fields ...string) *OAuthRefreshTokenGroupBy {
	ortq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OAuthRefreshTokenGroupBy{build: ortq}
	grbuild.flds = &ortq.ctx.Fields
	grbuild.label = oauthrefreshtoken.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Signature string `json:"signature,omitempty"`
//	}
//
//	client.OAuthRefreshToken.Query().
//		Select(oauthrefreshtoken.FieldSignature).
//		Scan(ctx, &v)
func (ortq *OAuthRefreshTokenQuery) Select(fields ...string) *OAuthRefreshTokenSelect {
	ortq.ctx.Fields = append(ortq.ctx.Fields, fields...)
	sbuild := &OAuthRefreshTokenSelect{OAuthRefreshTokenQuery: ortq}
	sbuild.label = oauthrefreshtoken.Label
	sbuild.flds, sbuild.scan = &ortq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OAuthRefreshTokenSelect configured with the given aggregations.
func (ortq *OAuthRefreshTokenQuery) Aggregate(fns ...AggregateFunc) *OAuthRefreshTokenSelect {
	return ortq.Select().Aggregate(fns...)
}

func (ortq *OAuthRefreshTokenQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ortq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ortq); err != nil {
				return err
			}
		}
	}
	for _, f := range ortq.ctx.Fields {
		if !oauthrefreshtoken.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ortq.path != nil {
		prev, err := ortq.path(ctx)
		if err != nil {
			return err
		}
		ortq.sql = prev
	}
	return nil
}

func (ortq *OAuthRefreshTokenQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OAuthRefreshToken, error) {
	var (
		nodes       = []*OAuthRefreshToken{}
		withFKs     = ortq.withFKs
		_spec       = ortq.querySpec()
		loadedTypes = [1]bool{
			ortq.withSession != nil,
		}
	)
	if ortq.withSession != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, oauthrefreshtoken.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OAuthRefreshToken).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OAuthRefreshToken{config: ortq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ortq.modifiers) > 0 {
		_spec.Modifiers = ortq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ortq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ortq.withSession; query != nil {
		if err := ortq.loadSession(ctx, query, nodes, nil,
			func(n *OAuthRefreshToken, e *OAuthSession) { n.Edges.Session = e }); err != nil {
			return nil, err
		}
	}
	for i := range ortq.loadTotal {
		if err := ortq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ortq *OAuthRefreshTokenQuery) loadSession(ctx context.Context, query *OAuthSessionQuery, nodes []*OAuthRefreshToken, init func(*OAuthRefreshToken), assign func(*OAuthRefreshToken, *OAuthSession)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OAuthRefreshToken)
	for i := range nodes {
		if nodes[i].oauth_refresh_token_session == nil {
			continue
		}
		fk := *nodes[i].oauth_refresh_token_session
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(oauthsession.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "oauth_refresh_token_session" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ortq *OAuthRefreshTokenQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ortq.querySpec()
	if len(ortq.modifiers) > 0 {
		_spec.Modifiers = ortq.modifiers
	}
	_spec.Node.Columns = ortq.ctx.Fields
	if len(ortq.ctx.Fields) > 0 {
		_spec.Unique = ortq.ctx.Unique != nil && *ortq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ortq.driver, _spec)
}

func (ortq *OAuthRefreshTokenQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oauthrefreshtoken.Table, oauthrefreshtoken.Columns, sqlgraph.NewFieldSpec(oauthrefreshtoken.FieldID, field.TypeInt))
	_spec.From = ortq.sql
	if unique := ortq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ortq.path != nil {
		_spec.Unique = true
	}
	if fields := ortq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthrefreshtoken.FieldID)
		for i := range fields {
			if fields[i] != oauthrefreshtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ortq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ortq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ortq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ortq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ortq *OAuthRefreshTokenQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ortq.driver.Dialect())
	t1 := builder.Table(oauthrefreshtoken.Table)
	columns := ortq.ctx.Fields
	if len(columns) == 0 {
		columns = oauthrefreshtoken.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ortq.sql != nil {
		selector = ortq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ortq.ctx.Unique != nil && *ortq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ortq.predicates {
		p(selector)
	}
	for _, p := range ortq.order {
		p(selector)
	}
	if offset := ortq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ortq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OAuthRefreshTokenGroupBy is the group-by builder for OAuthRefreshToken entities.
type OAuthRefreshTokenGroupBy struct {
	selector
	build *OAuthRefreshTokenQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ortgb *OAuthRefreshTokenGroupBy) Aggregate(fns ...AggregateFunc) *OAuthRefreshTokenGroupBy {
	ortgb.fns = append(ortgb.fns, fns...)
	return ortgb
}

// Scan applies the selector query and scans the result into the given value.
func (ortgb *OAuthRefreshTokenGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ortgb.build.ctx, "GroupBy")
	if err := ortgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OAuthRefreshTokenQuery, *OAuthRefreshTokenGroupBy](ctx, ortgb.build, ortgb, ortgb.build.inters, v)
}

func (ortgb *OAuthRefreshTokenGroupBy) sqlScan(ctx context.Context, root *OAuthRefreshTokenQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ortgb.fns))
	for _, fn := range ortgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ortgb.flds)+len(ortgb.fns))
		for _, f := range *ortgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ortgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ortgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OAuthRefreshTokenSelect is the builder for selecting fields of OAuthRefreshToken entities.
type OAuthRefreshTokenSelect struct {
	*OAuthRefreshTokenQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (orts *OAuthRefreshTokenSelect) Aggregate(fns ...AggregateFunc) *OAuthRefreshTokenSelect {
	orts.fns = append(orts.fns, fns...)
	return orts
}

// Scan applies the selector query and scans the result into the given value.
func (orts *OAuthRefreshTokenSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, orts.ctx, "Select")
	if err := orts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OAuthRefreshTokenQuery, *OAuthRefreshTokenSelect](ctx, orts.OAuthRefreshTokenQuery, orts, orts.inters, v)
}

func (orts *OAuthRefreshTokenSelect) sqlScan(ctx context.Context, root *OAuthRefreshTokenQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(orts.fns))
	for _, fn := range orts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*orts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := orts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
