// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"

	"github.com/koalatea/authserver/server/ent"

	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// MutationRuleFunc type is an adapter which allows the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// QueryMutationRule is an interface which groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AuthCodeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AuthCodeQueryRuleFunc func(context.Context, *ent.AuthCodeQuery) error

// EvalQuery return f(ctx, q).
func (f AuthCodeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AuthCodeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AuthCodeQuery", q)
}

// The AuthCodeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AuthCodeMutationRuleFunc func(context.Context, *ent.AuthCodeMutation) error

// EvalMutation calls f(ctx, m).
func (f AuthCodeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AuthCodeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AuthCodeMutation", m)
}

// The CertQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CertQueryRuleFunc func(context.Context, *ent.CertQuery) error

// EvalQuery return f(ctx, q).
func (f CertQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CertQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CertQuery", q)
}

// The CertMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CertMutationRuleFunc func(context.Context, *ent.CertMutation) error

// EvalMutation calls f(ctx, m).
func (f CertMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CertMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CertMutation", m)
}

// The DenyListedJTIQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DenyListedJTIQueryRuleFunc func(context.Context, *ent.DenyListedJTIQuery) error

// EvalQuery return f(ctx, q).
func (f DenyListedJTIQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DenyListedJTIQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DenyListedJTIQuery", q)
}

// The DenyListedJTIMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DenyListedJTIMutationRuleFunc func(context.Context, *ent.DenyListedJTIMutation) error

// EvalMutation calls f(ctx, m).
func (f DenyListedJTIMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DenyListedJTIMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DenyListedJTIMutation", m)
}

// The OAuthAccessTokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OAuthAccessTokenQueryRuleFunc func(context.Context, *ent.OAuthAccessTokenQuery) error

// EvalQuery return f(ctx, q).
func (f OAuthAccessTokenQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthAccessTokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OAuthAccessTokenQuery", q)
}

// The OAuthAccessTokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OAuthAccessTokenMutationRuleFunc func(context.Context, *ent.OAuthAccessTokenMutation) error

// EvalMutation calls f(ctx, m).
func (f OAuthAccessTokenMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OAuthAccessTokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OAuthAccessTokenMutation", m)
}

// The OAuthClientQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OAuthClientQueryRuleFunc func(context.Context, *ent.OAuthClientQuery) error

// EvalQuery return f(ctx, q).
func (f OAuthClientQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthClientQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OAuthClientQuery", q)
}

// The OAuthClientMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OAuthClientMutationRuleFunc func(context.Context, *ent.OAuthClientMutation) error

// EvalMutation calls f(ctx, m).
func (f OAuthClientMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OAuthClientMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OAuthClientMutation", m)
}

// The OAuthPARRequestQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OAuthPARRequestQueryRuleFunc func(context.Context, *ent.OAuthPARRequestQuery) error

// EvalQuery return f(ctx, q).
func (f OAuthPARRequestQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthPARRequestQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OAuthPARRequestQuery", q)
}

// The OAuthPARRequestMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OAuthPARRequestMutationRuleFunc func(context.Context, *ent.OAuthPARRequestMutation) error

// EvalMutation calls f(ctx, m).
func (f OAuthPARRequestMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OAuthPARRequestMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OAuthPARRequestMutation", m)
}

// The OAuthRefreshTokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OAuthRefreshTokenQueryRuleFunc func(context.Context, *ent.OAuthRefreshTokenQuery) error

// EvalQuery return f(ctx, q).
func (f OAuthRefreshTokenQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthRefreshTokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OAuthRefreshTokenQuery", q)
}

// The OAuthRefreshTokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OAuthRefreshTokenMutationRuleFunc func(context.Context, *ent.OAuthRefreshTokenMutation) error

// EvalMutation calls f(ctx, m).
func (f OAuthRefreshTokenMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OAuthRefreshTokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OAuthRefreshTokenMutation", m)
}

// The OAuthSessionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OAuthSessionQueryRuleFunc func(context.Context, *ent.OAuthSessionQuery) error

// EvalQuery return f(ctx, q).
func (f OAuthSessionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OAuthSessionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OAuthSessionQuery", q)
}

// The OAuthSessionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OAuthSessionMutationRuleFunc func(context.Context, *ent.OAuthSessionMutation) error

// EvalMutation calls f(ctx, m).
func (f OAuthSessionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OAuthSessionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OAuthSessionMutation", m)
}

// The OIDCAuthCodeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OIDCAuthCodeQueryRuleFunc func(context.Context, *ent.OIDCAuthCodeQuery) error

// EvalQuery return f(ctx, q).
func (f OIDCAuthCodeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OIDCAuthCodeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OIDCAuthCodeQuery", q)
}

// The OIDCAuthCodeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OIDCAuthCodeMutationRuleFunc func(context.Context, *ent.OIDCAuthCodeMutation) error

// EvalMutation calls f(ctx, m).
func (f OIDCAuthCodeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OIDCAuthCodeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OIDCAuthCodeMutation", m)
}

// The PKCEQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PKCEQueryRuleFunc func(context.Context, *ent.PKCEQuery) error

// EvalQuery return f(ctx, q).
func (f PKCEQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PKCEQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PKCEQuery", q)
}

// The PKCEMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PKCEMutationRuleFunc func(context.Context, *ent.PKCEMutation) error

// EvalMutation calls f(ctx, m).
func (f PKCEMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PKCEMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PKCEMutation", m)
}

// The PublicJWKQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PublicJWKQueryRuleFunc func(context.Context, *ent.PublicJWKQuery) error

// EvalQuery return f(ctx, q).
func (f PublicJWKQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PublicJWKQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PublicJWKQuery", q)
}

// The PublicJWKMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PublicJWKMutationRuleFunc func(context.Context, *ent.PublicJWKMutation) error

// EvalMutation calls f(ctx, m).
func (f PublicJWKMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PublicJWKMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PublicJWKMutation", m)
}

// The PublicJWKSetQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PublicJWKSetQueryRuleFunc func(context.Context, *ent.PublicJWKSetQuery) error

// EvalQuery return f(ctx, q).
func (f PublicJWKSetQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PublicJWKSetQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PublicJWKSetQuery", q)
}

// The PublicJWKSetMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PublicJWKSetMutationRuleFunc func(context.Context, *ent.PublicJWKSetMutation) error

// EvalMutation calls f(ctx, m).
func (f PublicJWKSetMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PublicJWKSetMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PublicJWKSetMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}
