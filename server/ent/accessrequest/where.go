// Code generated by ent, DO NOT EDIT.

package accessrequest

import (
	"entgo.io/ent/dialect/sql"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Request applies equality check predicate on the "request" field. It's identical to RequestEQ.
func Request(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequest), v))
	})
}

// Form applies equality check predicate on the "form" field. It's identical to FormEQ.
func Form(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForm), v))
	})
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// RequestEQ applies the EQ predicate on the "request" field.
func RequestEQ(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequest), v))
	})
}

// RequestNEQ applies the NEQ predicate on the "request" field.
func RequestNEQ(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequest), v))
	})
}

// RequestIn applies the In predicate on the "request" field.
func RequestIn(vs ...string) predicate.AccessRequest {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRequest), v...))
	})
}

// RequestNotIn applies the NotIn predicate on the "request" field.
func RequestNotIn(vs ...string) predicate.AccessRequest {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRequest), v...))
	})
}

// RequestGT applies the GT predicate on the "request" field.
func RequestGT(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRequest), v))
	})
}

// RequestGTE applies the GTE predicate on the "request" field.
func RequestGTE(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRequest), v))
	})
}

// RequestLT applies the LT predicate on the "request" field.
func RequestLT(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRequest), v))
	})
}

// RequestLTE applies the LTE predicate on the "request" field.
func RequestLTE(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRequest), v))
	})
}

// RequestContains applies the Contains predicate on the "request" field.
func RequestContains(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRequest), v))
	})
}

// RequestHasPrefix applies the HasPrefix predicate on the "request" field.
func RequestHasPrefix(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRequest), v))
	})
}

// RequestHasSuffix applies the HasSuffix predicate on the "request" field.
func RequestHasSuffix(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRequest), v))
	})
}

// RequestEqualFold applies the EqualFold predicate on the "request" field.
func RequestEqualFold(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRequest), v))
	})
}

// RequestContainsFold applies the ContainsFold predicate on the "request" field.
func RequestContainsFold(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRequest), v))
	})
}

// FormEQ applies the EQ predicate on the "form" field.
func FormEQ(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldForm), v))
	})
}

// FormNEQ applies the NEQ predicate on the "form" field.
func FormNEQ(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldForm), v))
	})
}

// FormIn applies the In predicate on the "form" field.
func FormIn(vs ...string) predicate.AccessRequest {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldForm), v...))
	})
}

// FormNotIn applies the NotIn predicate on the "form" field.
func FormNotIn(vs ...string) predicate.AccessRequest {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldForm), v...))
	})
}

// FormGT applies the GT predicate on the "form" field.
func FormGT(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldForm), v))
	})
}

// FormGTE applies the GTE predicate on the "form" field.
func FormGTE(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldForm), v))
	})
}

// FormLT applies the LT predicate on the "form" field.
func FormLT(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldForm), v))
	})
}

// FormLTE applies the LTE predicate on the "form" field.
func FormLTE(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldForm), v))
	})
}

// FormContains applies the Contains predicate on the "form" field.
func FormContains(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldForm), v))
	})
}

// FormHasPrefix applies the HasPrefix predicate on the "form" field.
func FormHasPrefix(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldForm), v))
	})
}

// FormHasSuffix applies the HasSuffix predicate on the "form" field.
func FormHasSuffix(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldForm), v))
	})
}

// FormEqualFold applies the EqualFold predicate on the "form" field.
func FormEqualFold(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldForm), v))
	})
}

// FormContainsFold applies the ContainsFold predicate on the "form" field.
func FormContainsFold(v string) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldForm), v))
	})
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccessRequest) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccessRequest) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccessRequest) predicate.AccessRequest {
	return predicate.AccessRequest(func(s *sql.Selector) {
		p(s.Not())
	})
}
