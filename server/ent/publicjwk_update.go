// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/predicate"
	"github.com/koalatea/authserver/server/ent/publicjwk"
)

// PublicJWKUpdate is the builder for updating PublicJWK entities.
type PublicJWKUpdate struct {
	config
	hooks    []Hook
	mutation *PublicJWKMutation
}

// Where appends a list predicates to the PublicJWKUpdate builder.
func (pju *PublicJWKUpdate) Where(ps ...predicate.PublicJWK) *PublicJWKUpdate {
	pju.mutation.Where(ps...)
	return pju
}

// SetSid sets the "sid" field.
func (pju *PublicJWKUpdate) SetSid(s string) *PublicJWKUpdate {
	pju.mutation.SetSid(s)
	return pju
}

// SetKid sets the "kid" field.
func (pju *PublicJWKUpdate) SetKid(s string) *PublicJWKUpdate {
	pju.mutation.SetKid(s)
	return pju
}

// SetKey sets the "key" field.
func (pju *PublicJWKUpdate) SetKey(s string) *PublicJWKUpdate {
	pju.mutation.SetKey(s)
	return pju
}

// SetIssuer sets the "issuer" field.
func (pju *PublicJWKUpdate) SetIssuer(s string) *PublicJWKUpdate {
	pju.mutation.SetIssuer(s)
	return pju
}

// SetScopes sets the "scopes" field.
func (pju *PublicJWKUpdate) SetScopes(s []string) *PublicJWKUpdate {
	pju.mutation.SetScopes(s)
	return pju
}

// AppendScopes appends s to the "scopes" field.
func (pju *PublicJWKUpdate) AppendScopes(s []string) *PublicJWKUpdate {
	pju.mutation.AppendScopes(s)
	return pju
}

// Mutation returns the PublicJWKMutation object of the builder.
func (pju *PublicJWKUpdate) Mutation() *PublicJWKMutation {
	return pju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pju *PublicJWKUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pju.hooks) == 0 {
		affected, err = pju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PublicJWKMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pju.mutation = mutation
			affected, err = pju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pju.hooks) - 1; i >= 0; i-- {
			if pju.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pju *PublicJWKUpdate) SaveX(ctx context.Context) int {
	affected, err := pju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pju *PublicJWKUpdate) Exec(ctx context.Context) error {
	_, err := pju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pju *PublicJWKUpdate) ExecX(ctx context.Context) {
	if err := pju.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pju *PublicJWKUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   publicjwk.Table,
			Columns: publicjwk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: publicjwk.FieldID,
			},
		},
	}
	if ps := pju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pju.mutation.Sid(); ok {
		_spec.SetField(publicjwk.FieldSid, field.TypeString, value)
	}
	if value, ok := pju.mutation.Kid(); ok {
		_spec.SetField(publicjwk.FieldKid, field.TypeString, value)
	}
	if value, ok := pju.mutation.Key(); ok {
		_spec.SetField(publicjwk.FieldKey, field.TypeString, value)
	}
	if value, ok := pju.mutation.Issuer(); ok {
		_spec.SetField(publicjwk.FieldIssuer, field.TypeString, value)
	}
	if value, ok := pju.mutation.Scopes(); ok {
		_spec.SetField(publicjwk.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := pju.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, publicjwk.FieldScopes, value)
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicjwk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PublicJWKUpdateOne is the builder for updating a single PublicJWK entity.
type PublicJWKUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicJWKMutation
}

// SetSid sets the "sid" field.
func (pjuo *PublicJWKUpdateOne) SetSid(s string) *PublicJWKUpdateOne {
	pjuo.mutation.SetSid(s)
	return pjuo
}

// SetKid sets the "kid" field.
func (pjuo *PublicJWKUpdateOne) SetKid(s string) *PublicJWKUpdateOne {
	pjuo.mutation.SetKid(s)
	return pjuo
}

// SetKey sets the "key" field.
func (pjuo *PublicJWKUpdateOne) SetKey(s string) *PublicJWKUpdateOne {
	pjuo.mutation.SetKey(s)
	return pjuo
}

// SetIssuer sets the "issuer" field.
func (pjuo *PublicJWKUpdateOne) SetIssuer(s string) *PublicJWKUpdateOne {
	pjuo.mutation.SetIssuer(s)
	return pjuo
}

// SetScopes sets the "scopes" field.
func (pjuo *PublicJWKUpdateOne) SetScopes(s []string) *PublicJWKUpdateOne {
	pjuo.mutation.SetScopes(s)
	return pjuo
}

// AppendScopes appends s to the "scopes" field.
func (pjuo *PublicJWKUpdateOne) AppendScopes(s []string) *PublicJWKUpdateOne {
	pjuo.mutation.AppendScopes(s)
	return pjuo
}

// Mutation returns the PublicJWKMutation object of the builder.
func (pjuo *PublicJWKUpdateOne) Mutation() *PublicJWKMutation {
	return pjuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pjuo *PublicJWKUpdateOne) Select(field string, fields ...string) *PublicJWKUpdateOne {
	pjuo.fields = append([]string{field}, fields...)
	return pjuo
}

// Save executes the query and returns the updated PublicJWK entity.
func (pjuo *PublicJWKUpdateOne) Save(ctx context.Context) (*PublicJWK, error) {
	var (
		err  error
		node *PublicJWK
	)
	if len(pjuo.hooks) == 0 {
		node, err = pjuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PublicJWKMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pjuo.mutation = mutation
			node, err = pjuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pjuo.hooks) - 1; i >= 0; i-- {
			if pjuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pjuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pjuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PublicJWK)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PublicJWKMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pjuo *PublicJWKUpdateOne) SaveX(ctx context.Context) *PublicJWK {
	node, err := pjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pjuo *PublicJWKUpdateOne) Exec(ctx context.Context) error {
	_, err := pjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjuo *PublicJWKUpdateOne) ExecX(ctx context.Context) {
	if err := pjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pjuo *PublicJWKUpdateOne) sqlSave(ctx context.Context) (_node *PublicJWK, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   publicjwk.Table,
			Columns: publicjwk.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: publicjwk.FieldID,
			},
		},
	}
	id, ok := pjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicJWK.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicjwk.FieldID)
		for _, f := range fields {
			if !publicjwk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publicjwk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pjuo.mutation.Sid(); ok {
		_spec.SetField(publicjwk.FieldSid, field.TypeString, value)
	}
	if value, ok := pjuo.mutation.Kid(); ok {
		_spec.SetField(publicjwk.FieldKid, field.TypeString, value)
	}
	if value, ok := pjuo.mutation.Key(); ok {
		_spec.SetField(publicjwk.FieldKey, field.TypeString, value)
	}
	if value, ok := pjuo.mutation.Issuer(); ok {
		_spec.SetField(publicjwk.FieldIssuer, field.TypeString, value)
	}
	if value, ok := pjuo.mutation.Scopes(); ok {
		_spec.SetField(publicjwk.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := pjuo.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, publicjwk.FieldScopes, value)
		})
	}
	_node = &PublicJWK{config: pjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicjwk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
