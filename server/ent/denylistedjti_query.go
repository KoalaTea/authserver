// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/denylistedjti"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// DenyListedJTIQuery is the builder for querying DenyListedJTI entities.
type DenyListedJTIQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.DenyListedJTI
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*DenyListedJTI) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DenyListedJTIQuery builder.
func (dljq *DenyListedJTIQuery) Where(ps ...predicate.DenyListedJTI) *DenyListedJTIQuery {
	dljq.predicates = append(dljq.predicates, ps...)
	return dljq
}

// Limit adds a limit step to the query.
func (dljq *DenyListedJTIQuery) Limit(limit int) *DenyListedJTIQuery {
	dljq.limit = &limit
	return dljq
}

// Offset adds an offset step to the query.
func (dljq *DenyListedJTIQuery) Offset(offset int) *DenyListedJTIQuery {
	dljq.offset = &offset
	return dljq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dljq *DenyListedJTIQuery) Unique(unique bool) *DenyListedJTIQuery {
	dljq.unique = &unique
	return dljq
}

// Order adds an order step to the query.
func (dljq *DenyListedJTIQuery) Order(o ...OrderFunc) *DenyListedJTIQuery {
	dljq.order = append(dljq.order, o...)
	return dljq
}

// First returns the first DenyListedJTI entity from the query.
// Returns a *NotFoundError when no DenyListedJTI was found.
func (dljq *DenyListedJTIQuery) First(ctx context.Context) (*DenyListedJTI, error) {
	nodes, err := dljq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{denylistedjti.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dljq *DenyListedJTIQuery) FirstX(ctx context.Context) *DenyListedJTI {
	node, err := dljq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DenyListedJTI ID from the query.
// Returns a *NotFoundError when no DenyListedJTI ID was found.
func (dljq *DenyListedJTIQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dljq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{denylistedjti.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dljq *DenyListedJTIQuery) FirstIDX(ctx context.Context) int {
	id, err := dljq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DenyListedJTI entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DenyListedJTI entity is found.
// Returns a *NotFoundError when no DenyListedJTI entities are found.
func (dljq *DenyListedJTIQuery) Only(ctx context.Context) (*DenyListedJTI, error) {
	nodes, err := dljq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{denylistedjti.Label}
	default:
		return nil, &NotSingularError{denylistedjti.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dljq *DenyListedJTIQuery) OnlyX(ctx context.Context) *DenyListedJTI {
	node, err := dljq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DenyListedJTI ID in the query.
// Returns a *NotSingularError when more than one DenyListedJTI ID is found.
// Returns a *NotFoundError when no entities are found.
func (dljq *DenyListedJTIQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dljq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{denylistedjti.Label}
	default:
		err = &NotSingularError{denylistedjti.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dljq *DenyListedJTIQuery) OnlyIDX(ctx context.Context) int {
	id, err := dljq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DenyListedJTIs.
func (dljq *DenyListedJTIQuery) All(ctx context.Context) ([]*DenyListedJTI, error) {
	if err := dljq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return dljq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (dljq *DenyListedJTIQuery) AllX(ctx context.Context) []*DenyListedJTI {
	nodes, err := dljq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DenyListedJTI IDs.
func (dljq *DenyListedJTIQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := dljq.Select(denylistedjti.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dljq *DenyListedJTIQuery) IDsX(ctx context.Context) []int {
	ids, err := dljq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dljq *DenyListedJTIQuery) Count(ctx context.Context) (int, error) {
	if err := dljq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return dljq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (dljq *DenyListedJTIQuery) CountX(ctx context.Context) int {
	count, err := dljq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dljq *DenyListedJTIQuery) Exist(ctx context.Context) (bool, error) {
	if err := dljq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return dljq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (dljq *DenyListedJTIQuery) ExistX(ctx context.Context) bool {
	exist, err := dljq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DenyListedJTIQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dljq *DenyListedJTIQuery) Clone() *DenyListedJTIQuery {
	if dljq == nil {
		return nil
	}
	return &DenyListedJTIQuery{
		config:     dljq.config,
		limit:      dljq.limit,
		offset:     dljq.offset,
		order:      append([]OrderFunc{}, dljq.order...),
		predicates: append([]predicate.DenyListedJTI{}, dljq.predicates...),
		// clone intermediate query.
		sql:    dljq.sql.Clone(),
		path:   dljq.path,
		unique: dljq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Jti string `json:"jti,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DenyListedJTI.Query().
//		GroupBy(denylistedjti.FieldJti).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dljq *DenyListedJTIQuery) GroupBy(field string, fields ...string) *DenyListedJTIGroupBy {
	grbuild := &DenyListedJTIGroupBy{config: dljq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := dljq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return dljq.sqlQuery(ctx), nil
	}
	grbuild.label = denylistedjti.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Jti string `json:"jti,omitempty"`
//	}
//
//	client.DenyListedJTI.Query().
//		Select(denylistedjti.FieldJti).
//		Scan(ctx, &v)
func (dljq *DenyListedJTIQuery) Select(fields ...string) *DenyListedJTISelect {
	dljq.fields = append(dljq.fields, fields...)
	selbuild := &DenyListedJTISelect{DenyListedJTIQuery: dljq}
	selbuild.label = denylistedjti.Label
	selbuild.flds, selbuild.scan = &dljq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a DenyListedJTISelect configured with the given aggregations.
func (dljq *DenyListedJTIQuery) Aggregate(fns ...AggregateFunc) *DenyListedJTISelect {
	return dljq.Select().Aggregate(fns...)
}

func (dljq *DenyListedJTIQuery) prepareQuery(ctx context.Context) error {
	for _, f := range dljq.fields {
		if !denylistedjti.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dljq.path != nil {
		prev, err := dljq.path(ctx)
		if err != nil {
			return err
		}
		dljq.sql = prev
	}
	return nil
}

func (dljq *DenyListedJTIQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DenyListedJTI, error) {
	var (
		nodes = []*DenyListedJTI{}
		_spec = dljq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DenyListedJTI).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DenyListedJTI{config: dljq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(dljq.modifiers) > 0 {
		_spec.Modifiers = dljq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dljq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range dljq.loadTotal {
		if err := dljq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dljq *DenyListedJTIQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dljq.querySpec()
	if len(dljq.modifiers) > 0 {
		_spec.Modifiers = dljq.modifiers
	}
	_spec.Node.Columns = dljq.fields
	if len(dljq.fields) > 0 {
		_spec.Unique = dljq.unique != nil && *dljq.unique
	}
	return sqlgraph.CountNodes(ctx, dljq.driver, _spec)
}

func (dljq *DenyListedJTIQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := dljq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (dljq *DenyListedJTIQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   denylistedjti.Table,
			Columns: denylistedjti.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: denylistedjti.FieldID,
			},
		},
		From:   dljq.sql,
		Unique: true,
	}
	if unique := dljq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := dljq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, denylistedjti.FieldID)
		for i := range fields {
			if fields[i] != denylistedjti.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dljq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dljq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dljq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dljq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dljq *DenyListedJTIQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dljq.driver.Dialect())
	t1 := builder.Table(denylistedjti.Table)
	columns := dljq.fields
	if len(columns) == 0 {
		columns = denylistedjti.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dljq.sql != nil {
		selector = dljq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dljq.unique != nil && *dljq.unique {
		selector.Distinct()
	}
	for _, p := range dljq.predicates {
		p(selector)
	}
	for _, p := range dljq.order {
		p(selector)
	}
	if offset := dljq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dljq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DenyListedJTIGroupBy is the group-by builder for DenyListedJTI entities.
type DenyListedJTIGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dljgb *DenyListedJTIGroupBy) Aggregate(fns ...AggregateFunc) *DenyListedJTIGroupBy {
	dljgb.fns = append(dljgb.fns, fns...)
	return dljgb
}

// Scan applies the group-by query and scans the result into the given value.
func (dljgb *DenyListedJTIGroupBy) Scan(ctx context.Context, v any) error {
	query, err := dljgb.path(ctx)
	if err != nil {
		return err
	}
	dljgb.sql = query
	return dljgb.sqlScan(ctx, v)
}

func (dljgb *DenyListedJTIGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range dljgb.fields {
		if !denylistedjti.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := dljgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dljgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dljgb *DenyListedJTIGroupBy) sqlQuery() *sql.Selector {
	selector := dljgb.sql.Select()
	aggregation := make([]string, 0, len(dljgb.fns))
	for _, fn := range dljgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(dljgb.fields)+len(dljgb.fns))
		for _, f := range dljgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(dljgb.fields...)...)
}

// DenyListedJTISelect is the builder for selecting fields of DenyListedJTI entities.
type DenyListedJTISelect struct {
	*DenyListedJTIQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dljs *DenyListedJTISelect) Aggregate(fns ...AggregateFunc) *DenyListedJTISelect {
	dljs.fns = append(dljs.fns, fns...)
	return dljs
}

// Scan applies the selector query and scans the result into the given value.
func (dljs *DenyListedJTISelect) Scan(ctx context.Context, v any) error {
	if err := dljs.prepareQuery(ctx); err != nil {
		return err
	}
	dljs.sql = dljs.DenyListedJTIQuery.sqlQuery(ctx)
	return dljs.sqlScan(ctx, v)
}

func (dljs *DenyListedJTISelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(dljs.fns))
	for _, fn := range dljs.fns {
		aggregation = append(aggregation, fn(dljs.sql))
	}
	switch n := len(*dljs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		dljs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		dljs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := dljs.sql.Query()
	if err := dljs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
