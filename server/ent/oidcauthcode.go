// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/koalatea/authserver/server/ent/oauthsession"
	"github.com/koalatea/authserver/server/ent/oidcauthcode"
)

// OIDCAuthCode is the model entity for the OIDCAuthCode schema.
type OIDCAuthCode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AuthorizationCode holds the value of the "authorization_code" field.
	AuthorizationCode string `json:"authorization_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OIDCAuthCodeQuery when eager-loading is set.
	Edges                  OIDCAuthCodeEdges `json:"edges"`
	oidc_auth_code_session *int
	selectValues           sql.SelectValues
}

// OIDCAuthCodeEdges holds the relations/edges for other nodes in the graph.
type OIDCAuthCodeEdges struct {
	// information about the request
	Session *OAuthSession `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OIDCAuthCodeEdges) SessionOrErr() (*OAuthSession, error) {
	if e.Session != nil {
		return e.Session, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: oauthsession.Label}
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OIDCAuthCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oidcauthcode.FieldID:
			values[i] = new(sql.NullInt64)
		case oidcauthcode.FieldAuthorizationCode:
			values[i] = new(sql.NullString)
		case oidcauthcode.ForeignKeys[0]: // oidc_auth_code_session
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OIDCAuthCode fields.
func (oac *OIDCAuthCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oidcauthcode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oac.ID = int(value.Int64)
		case oidcauthcode.FieldAuthorizationCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field authorization_code", values[i])
			} else if value.Valid {
				oac.AuthorizationCode = value.String
			}
		case oidcauthcode.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field oidc_auth_code_session", value)
			} else if value.Valid {
				oac.oidc_auth_code_session = new(int)
				*oac.oidc_auth_code_session = int(value.Int64)
			}
		default:
			oac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OIDCAuthCode.
// This includes values selected through modifiers, order, etc.
func (oac *OIDCAuthCode) Value(name string) (ent.Value, error) {
	return oac.selectValues.Get(name)
}

// QuerySession queries the "session" edge of the OIDCAuthCode entity.
func (oac *OIDCAuthCode) QuerySession() *OAuthSessionQuery {
	return NewOIDCAuthCodeClient(oac.config).QuerySession(oac)
}

// Update returns a builder for updating this OIDCAuthCode.
// Note that you need to call OIDCAuthCode.Unwrap() before calling this method if this OIDCAuthCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (oac *OIDCAuthCode) Update() *OIDCAuthCodeUpdateOne {
	return NewOIDCAuthCodeClient(oac.config).UpdateOne(oac)
}

// Unwrap unwraps the OIDCAuthCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oac *OIDCAuthCode) Unwrap() *OIDCAuthCode {
	_tx, ok := oac.config.driver.(*txDriver)
	if !ok {
		panic("ent: OIDCAuthCode is not a transactional entity")
	}
	oac.config.driver = _tx.drv
	return oac
}

// String implements the fmt.Stringer.
func (oac *OIDCAuthCode) String() string {
	var builder strings.Builder
	builder.WriteString("OIDCAuthCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oac.ID))
	builder.WriteString("authorization_code=")
	builder.WriteString(oac.AuthorizationCode)
	builder.WriteByte(')')
	return builder.String()
}

// OIDCAuthCodes is a parsable slice of OIDCAuthCode.
type OIDCAuthCodes []*OIDCAuthCode
