// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/oauthsession"
	"github.com/koalatea/authserver/server/ent/oidcauthcode"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// OIDCAuthCodeUpdate is the builder for updating OIDCAuthCode entities.
type OIDCAuthCodeUpdate struct {
	config
	hooks    []Hook
	mutation *OIDCAuthCodeMutation
}

// Where appends a list predicates to the OIDCAuthCodeUpdate builder.
func (oacu *OIDCAuthCodeUpdate) Where(ps ...predicate.OIDCAuthCode) *OIDCAuthCodeUpdate {
	oacu.mutation.Where(ps...)
	return oacu
}

// SetAuthorizationCode sets the "authorization_code" field.
func (oacu *OIDCAuthCodeUpdate) SetAuthorizationCode(s string) *OIDCAuthCodeUpdate {
	oacu.mutation.SetAuthorizationCode(s)
	return oacu
}

// SetSessionID sets the "session" edge to the OAuthSession entity by ID.
func (oacu *OIDCAuthCodeUpdate) SetSessionID(id int) *OIDCAuthCodeUpdate {
	oacu.mutation.SetSessionID(id)
	return oacu
}

// SetNillableSessionID sets the "session" edge to the OAuthSession entity by ID if the given value is not nil.
func (oacu *OIDCAuthCodeUpdate) SetNillableSessionID(id *int) *OIDCAuthCodeUpdate {
	if id != nil {
		oacu = oacu.SetSessionID(*id)
	}
	return oacu
}

// SetSession sets the "session" edge to the OAuthSession entity.
func (oacu *OIDCAuthCodeUpdate) SetSession(o *OAuthSession) *OIDCAuthCodeUpdate {
	return oacu.SetSessionID(o.ID)
}

// Mutation returns the OIDCAuthCodeMutation object of the builder.
func (oacu *OIDCAuthCodeUpdate) Mutation() *OIDCAuthCodeMutation {
	return oacu.mutation
}

// ClearSession clears the "session" edge to the OAuthSession entity.
func (oacu *OIDCAuthCodeUpdate) ClearSession() *OIDCAuthCodeUpdate {
	oacu.mutation.ClearSession()
	return oacu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oacu *OIDCAuthCodeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(oacu.hooks) == 0 {
		affected, err = oacu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OIDCAuthCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oacu.mutation = mutation
			affected, err = oacu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oacu.hooks) - 1; i >= 0; i-- {
			if oacu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oacu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oacu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oacu *OIDCAuthCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := oacu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oacu *OIDCAuthCodeUpdate) Exec(ctx context.Context) error {
	_, err := oacu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacu *OIDCAuthCodeUpdate) ExecX(ctx context.Context) {
	if err := oacu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oacu *OIDCAuthCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oidcauthcode.Table,
			Columns: oidcauthcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oidcauthcode.FieldID,
			},
		},
	}
	if ps := oacu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oacu.mutation.AuthorizationCode(); ok {
		_spec.SetField(oidcauthcode.FieldAuthorizationCode, field.TypeString, value)
	}
	if oacu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oidcauthcode.SessionTable,
			Columns: []string{oidcauthcode.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oauthsession.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oacu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oidcauthcode.SessionTable,
			Columns: []string{oidcauthcode.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oauthsession.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oacu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oidcauthcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OIDCAuthCodeUpdateOne is the builder for updating a single OIDCAuthCode entity.
type OIDCAuthCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OIDCAuthCodeMutation
}

// SetAuthorizationCode sets the "authorization_code" field.
func (oacuo *OIDCAuthCodeUpdateOne) SetAuthorizationCode(s string) *OIDCAuthCodeUpdateOne {
	oacuo.mutation.SetAuthorizationCode(s)
	return oacuo
}

// SetSessionID sets the "session" edge to the OAuthSession entity by ID.
func (oacuo *OIDCAuthCodeUpdateOne) SetSessionID(id int) *OIDCAuthCodeUpdateOne {
	oacuo.mutation.SetSessionID(id)
	return oacuo
}

// SetNillableSessionID sets the "session" edge to the OAuthSession entity by ID if the given value is not nil.
func (oacuo *OIDCAuthCodeUpdateOne) SetNillableSessionID(id *int) *OIDCAuthCodeUpdateOne {
	if id != nil {
		oacuo = oacuo.SetSessionID(*id)
	}
	return oacuo
}

// SetSession sets the "session" edge to the OAuthSession entity.
func (oacuo *OIDCAuthCodeUpdateOne) SetSession(o *OAuthSession) *OIDCAuthCodeUpdateOne {
	return oacuo.SetSessionID(o.ID)
}

// Mutation returns the OIDCAuthCodeMutation object of the builder.
func (oacuo *OIDCAuthCodeUpdateOne) Mutation() *OIDCAuthCodeMutation {
	return oacuo.mutation
}

// ClearSession clears the "session" edge to the OAuthSession entity.
func (oacuo *OIDCAuthCodeUpdateOne) ClearSession() *OIDCAuthCodeUpdateOne {
	oacuo.mutation.ClearSession()
	return oacuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oacuo *OIDCAuthCodeUpdateOne) Select(field string, fields ...string) *OIDCAuthCodeUpdateOne {
	oacuo.fields = append([]string{field}, fields...)
	return oacuo
}

// Save executes the query and returns the updated OIDCAuthCode entity.
func (oacuo *OIDCAuthCodeUpdateOne) Save(ctx context.Context) (*OIDCAuthCode, error) {
	var (
		err  error
		node *OIDCAuthCode
	)
	if len(oacuo.hooks) == 0 {
		node, err = oacuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OIDCAuthCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oacuo.mutation = mutation
			node, err = oacuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oacuo.hooks) - 1; i >= 0; i-- {
			if oacuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oacuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oacuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OIDCAuthCode)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OIDCAuthCodeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oacuo *OIDCAuthCodeUpdateOne) SaveX(ctx context.Context) *OIDCAuthCode {
	node, err := oacuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oacuo *OIDCAuthCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := oacuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacuo *OIDCAuthCodeUpdateOne) ExecX(ctx context.Context) {
	if err := oacuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oacuo *OIDCAuthCodeUpdateOne) sqlSave(ctx context.Context) (_node *OIDCAuthCode, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oidcauthcode.Table,
			Columns: oidcauthcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oidcauthcode.FieldID,
			},
		},
	}
	id, ok := oacuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OIDCAuthCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oacuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oidcauthcode.FieldID)
		for _, f := range fields {
			if !oidcauthcode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oidcauthcode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oacuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oacuo.mutation.AuthorizationCode(); ok {
		_spec.SetField(oidcauthcode.FieldAuthorizationCode, field.TypeString, value)
	}
	if oacuo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oidcauthcode.SessionTable,
			Columns: []string{oidcauthcode.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oauthsession.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oacuo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oidcauthcode.SessionTable,
			Columns: []string{oidcauthcode.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oauthsession.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OIDCAuthCode{config: oacuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oacuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oidcauthcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
