// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/oidcauthcode"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// OIDCAuthCodeDelete is the builder for deleting a OIDCAuthCode entity.
type OIDCAuthCodeDelete struct {
	config
	hooks    []Hook
	mutation *OIDCAuthCodeMutation
}

// Where appends a list predicates to the OIDCAuthCodeDelete builder.
func (oacd *OIDCAuthCodeDelete) Where(ps ...predicate.OIDCAuthCode) *OIDCAuthCodeDelete {
	oacd.mutation.Where(ps...)
	return oacd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oacd *OIDCAuthCodeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, oacd.sqlExec, oacd.mutation, oacd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oacd *OIDCAuthCodeDelete) ExecX(ctx context.Context) int {
	n, err := oacd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oacd *OIDCAuthCodeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(oidcauthcode.Table, sqlgraph.NewFieldSpec(oidcauthcode.FieldID, field.TypeInt))
	if ps := oacd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oacd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oacd.mutation.done = true
	return affected, err
}

// OIDCAuthCodeDeleteOne is the builder for deleting a single OIDCAuthCode entity.
type OIDCAuthCodeDeleteOne struct {
	oacd *OIDCAuthCodeDelete
}

// Where appends a list predicates to the OIDCAuthCodeDelete builder.
func (oacdo *OIDCAuthCodeDeleteOne) Where(ps ...predicate.OIDCAuthCode) *OIDCAuthCodeDeleteOne {
	oacdo.oacd.mutation.Where(ps...)
	return oacdo
}

// Exec executes the deletion query.
func (oacdo *OIDCAuthCodeDeleteOne) Exec(ctx context.Context) error {
	n, err := oacdo.oacd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{oidcauthcode.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oacdo *OIDCAuthCodeDeleteOne) ExecX(ctx context.Context) {
	if err := oacdo.Exec(ctx); err != nil {
		panic(err)
	}
}
