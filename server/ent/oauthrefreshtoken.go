// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/koalatea/authserver/server/ent/oauthrefreshtoken"
	"github.com/koalatea/authserver/server/ent/oauthsession"
)

// OAuthRefreshToken is the model entity for the OAuthRefreshToken schema.
type OAuthRefreshToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Signature holds the value of the "signature" field.
	Signature string `json:"signature,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OAuthRefreshTokenQuery when eager-loading is set.
	Edges                       OAuthRefreshTokenEdges `json:"edges"`
	oauth_refresh_token_session *int
	selectValues                sql.SelectValues
}

// OAuthRefreshTokenEdges holds the relations/edges for other nodes in the graph.
type OAuthRefreshTokenEdges struct {
	// information about the request
	Session *OAuthSession `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OAuthRefreshTokenEdges) SessionOrErr() (*OAuthSession, error) {
	if e.Session != nil {
		return e.Session, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: oauthsession.Label}
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthRefreshToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthrefreshtoken.FieldID:
			values[i] = new(sql.NullInt64)
		case oauthrefreshtoken.FieldSignature:
			values[i] = new(sql.NullString)
		case oauthrefreshtoken.ForeignKeys[0]: // oauth_refresh_token_session
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthRefreshToken fields.
func (ort *OAuthRefreshToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthrefreshtoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ort.ID = int(value.Int64)
		case oauthrefreshtoken.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signature", values[i])
			} else if value.Valid {
				ort.Signature = value.String
			}
		case oauthrefreshtoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field oauth_refresh_token_session", value)
			} else if value.Valid {
				ort.oauth_refresh_token_session = new(int)
				*ort.oauth_refresh_token_session = int(value.Int64)
			}
		default:
			ort.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuthRefreshToken.
// This includes values selected through modifiers, order, etc.
func (ort *OAuthRefreshToken) Value(name string) (ent.Value, error) {
	return ort.selectValues.Get(name)
}

// QuerySession queries the "session" edge of the OAuthRefreshToken entity.
func (ort *OAuthRefreshToken) QuerySession() *OAuthSessionQuery {
	return NewOAuthRefreshTokenClient(ort.config).QuerySession(ort)
}

// Update returns a builder for updating this OAuthRefreshToken.
// Note that you need to call OAuthRefreshToken.Unwrap() before calling this method if this OAuthRefreshToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (ort *OAuthRefreshToken) Update() *OAuthRefreshTokenUpdateOne {
	return NewOAuthRefreshTokenClient(ort.config).UpdateOne(ort)
}

// Unwrap unwraps the OAuthRefreshToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ort *OAuthRefreshToken) Unwrap() *OAuthRefreshToken {
	_tx, ok := ort.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthRefreshToken is not a transactional entity")
	}
	ort.config.driver = _tx.drv
	return ort
}

// String implements the fmt.Stringer.
func (ort *OAuthRefreshToken) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthRefreshToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ort.ID))
	builder.WriteString("signature=")
	builder.WriteString(ort.Signature)
	builder.WriteByte(')')
	return builder.String()
}

// OAuthRefreshTokens is a parsable slice of OAuthRefreshToken.
type OAuthRefreshTokens []*OAuthRefreshToken
