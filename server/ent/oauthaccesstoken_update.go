// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/oauthaccesstoken"
	"github.com/koalatea/authserver/server/ent/oauthsession"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// OAuthAccessTokenUpdate is the builder for updating OAuthAccessToken entities.
type OAuthAccessTokenUpdate struct {
	config
	hooks    []Hook
	mutation *OAuthAccessTokenMutation
}

// Where appends a list predicates to the OAuthAccessTokenUpdate builder.
func (oatu *OAuthAccessTokenUpdate) Where(ps ...predicate.OAuthAccessToken) *OAuthAccessTokenUpdate {
	oatu.mutation.Where(ps...)
	return oatu
}

// SetSignature sets the "signature" field.
func (oatu *OAuthAccessTokenUpdate) SetSignature(s string) *OAuthAccessTokenUpdate {
	oatu.mutation.SetSignature(s)
	return oatu
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (oatu *OAuthAccessTokenUpdate) SetNillableSignature(s *string) *OAuthAccessTokenUpdate {
	if s != nil {
		oatu.SetSignature(*s)
	}
	return oatu
}

// SetSessionID sets the "session" edge to the OAuthSession entity by ID.
func (oatu *OAuthAccessTokenUpdate) SetSessionID(id int) *OAuthAccessTokenUpdate {
	oatu.mutation.SetSessionID(id)
	return oatu
}

// SetNillableSessionID sets the "session" edge to the OAuthSession entity by ID if the given value is not nil.
func (oatu *OAuthAccessTokenUpdate) SetNillableSessionID(id *int) *OAuthAccessTokenUpdate {
	if id != nil {
		oatu = oatu.SetSessionID(*id)
	}
	return oatu
}

// SetSession sets the "session" edge to the OAuthSession entity.
func (oatu *OAuthAccessTokenUpdate) SetSession(o *OAuthSession) *OAuthAccessTokenUpdate {
	return oatu.SetSessionID(o.ID)
}

// Mutation returns the OAuthAccessTokenMutation object of the builder.
func (oatu *OAuthAccessTokenUpdate) Mutation() *OAuthAccessTokenMutation {
	return oatu.mutation
}

// ClearSession clears the "session" edge to the OAuthSession entity.
func (oatu *OAuthAccessTokenUpdate) ClearSession() *OAuthAccessTokenUpdate {
	oatu.mutation.ClearSession()
	return oatu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oatu *OAuthAccessTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oatu.sqlSave, oatu.mutation, oatu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oatu *OAuthAccessTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := oatu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oatu *OAuthAccessTokenUpdate) Exec(ctx context.Context) error {
	_, err := oatu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oatu *OAuthAccessTokenUpdate) ExecX(ctx context.Context) {
	if err := oatu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oatu *OAuthAccessTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthaccesstoken.Table, oauthaccesstoken.Columns, sqlgraph.NewFieldSpec(oauthaccesstoken.FieldID, field.TypeInt))
	if ps := oatu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oatu.mutation.Signature(); ok {
		_spec.SetField(oauthaccesstoken.FieldSignature, field.TypeString, value)
	}
	if oatu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthaccesstoken.SessionTable,
			Columns: []string{oauthaccesstoken.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oatu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthaccesstoken.SessionTable,
			Columns: []string{oauthaccesstoken.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oatu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthaccesstoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oatu.mutation.done = true
	return n, nil
}

// OAuthAccessTokenUpdateOne is the builder for updating a single OAuthAccessToken entity.
type OAuthAccessTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OAuthAccessTokenMutation
}

// SetSignature sets the "signature" field.
func (oatuo *OAuthAccessTokenUpdateOne) SetSignature(s string) *OAuthAccessTokenUpdateOne {
	oatuo.mutation.SetSignature(s)
	return oatuo
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (oatuo *OAuthAccessTokenUpdateOne) SetNillableSignature(s *string) *OAuthAccessTokenUpdateOne {
	if s != nil {
		oatuo.SetSignature(*s)
	}
	return oatuo
}

// SetSessionID sets the "session" edge to the OAuthSession entity by ID.
func (oatuo *OAuthAccessTokenUpdateOne) SetSessionID(id int) *OAuthAccessTokenUpdateOne {
	oatuo.mutation.SetSessionID(id)
	return oatuo
}

// SetNillableSessionID sets the "session" edge to the OAuthSession entity by ID if the given value is not nil.
func (oatuo *OAuthAccessTokenUpdateOne) SetNillableSessionID(id *int) *OAuthAccessTokenUpdateOne {
	if id != nil {
		oatuo = oatuo.SetSessionID(*id)
	}
	return oatuo
}

// SetSession sets the "session" edge to the OAuthSession entity.
func (oatuo *OAuthAccessTokenUpdateOne) SetSession(o *OAuthSession) *OAuthAccessTokenUpdateOne {
	return oatuo.SetSessionID(o.ID)
}

// Mutation returns the OAuthAccessTokenMutation object of the builder.
func (oatuo *OAuthAccessTokenUpdateOne) Mutation() *OAuthAccessTokenMutation {
	return oatuo.mutation
}

// ClearSession clears the "session" edge to the OAuthSession entity.
func (oatuo *OAuthAccessTokenUpdateOne) ClearSession() *OAuthAccessTokenUpdateOne {
	oatuo.mutation.ClearSession()
	return oatuo
}

// Where appends a list predicates to the OAuthAccessTokenUpdate builder.
func (oatuo *OAuthAccessTokenUpdateOne) Where(ps ...predicate.OAuthAccessToken) *OAuthAccessTokenUpdateOne {
	oatuo.mutation.Where(ps...)
	return oatuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oatuo *OAuthAccessTokenUpdateOne) Select(field string, fields ...string) *OAuthAccessTokenUpdateOne {
	oatuo.fields = append([]string{field}, fields...)
	return oatuo
}

// Save executes the query and returns the updated OAuthAccessToken entity.
func (oatuo *OAuthAccessTokenUpdateOne) Save(ctx context.Context) (*OAuthAccessToken, error) {
	return withHooks(ctx, oatuo.sqlSave, oatuo.mutation, oatuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oatuo *OAuthAccessTokenUpdateOne) SaveX(ctx context.Context) *OAuthAccessToken {
	node, err := oatuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oatuo *OAuthAccessTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := oatuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oatuo *OAuthAccessTokenUpdateOne) ExecX(ctx context.Context) {
	if err := oatuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oatuo *OAuthAccessTokenUpdateOne) sqlSave(ctx context.Context) (_node *OAuthAccessToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthaccesstoken.Table, oauthaccesstoken.Columns, sqlgraph.NewFieldSpec(oauthaccesstoken.FieldID, field.TypeInt))
	id, ok := oatuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthAccessToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oatuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthaccesstoken.FieldID)
		for _, f := range fields {
			if !oauthaccesstoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthaccesstoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oatuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oatuo.mutation.Signature(); ok {
		_spec.SetField(oauthaccesstoken.FieldSignature, field.TypeString, value)
	}
	if oatuo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthaccesstoken.SessionTable,
			Columns: []string{oauthaccesstoken.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oatuo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthaccesstoken.SessionTable,
			Columns: []string{oauthaccesstoken.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OAuthAccessToken{config: oatuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oatuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthaccesstoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oatuo.mutation.done = true
	return _node, nil
}
