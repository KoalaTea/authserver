// Code generated by ent, DO NOT EDIT.

package oidcauthcode

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the oidcauthcode type in the database.
	Label = "oidc_auth_code"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAuthorizationCode holds the string denoting the authorization_code field in the database.
	FieldAuthorizationCode = "authorization_code"
	// EdgeSession holds the string denoting the session edge name in mutations.
	EdgeSession = "session"
	// Table holds the table name of the oidcauthcode in the database.
	Table = "oidc_auth_codes"
	// SessionTable is the table that holds the session relation/edge.
	SessionTable = "oidc_auth_codes"
	// SessionInverseTable is the table name for the OAuthSession entity.
	// It exists in this package in order to avoid circular dependency with the "oauthsession" package.
	SessionInverseTable = "oauth_sessions"
	// SessionColumn is the table column denoting the session relation/edge.
	SessionColumn = "oidc_auth_code_session"
)

// Columns holds all SQL columns for oidcauthcode fields.
var Columns = []string{
	FieldID,
	FieldAuthorizationCode,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "oidc_auth_codes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"oidc_auth_code_session",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the OIDCAuthCode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAuthorizationCode orders the results by the authorization_code field.
func ByAuthorizationCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorizationCode, opts...).ToFunc()
}

// BySessionField orders the results by session field.
func BySessionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionStep(), sql.OrderByField(field, opts...))
	}
}
func newSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SessionTable, SessionColumn),
	)
}
