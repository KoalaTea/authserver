// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/oauthsession"
)

// OAuthSessionCreate is the builder for creating a OAuthSession entity.
type OAuthSessionCreate struct {
	config
	mutation *OAuthSessionMutation
	hooks    []Hook
}

// SetIssuer sets the "issuer" field.
func (osc *OAuthSessionCreate) SetIssuer(s string) *OAuthSessionCreate {
	osc.mutation.SetIssuer(s)
	return osc
}

// SetSubject sets the "subject" field.
func (osc *OAuthSessionCreate) SetSubject(s string) *OAuthSessionCreate {
	osc.mutation.SetSubject(s)
	return osc
}

// SetAudiences sets the "audiences" field.
func (osc *OAuthSessionCreate) SetAudiences(s []string) *OAuthSessionCreate {
	osc.mutation.SetAudiences(s)
	return osc
}

// SetExpiresAt sets the "expires_at" field.
func (osc *OAuthSessionCreate) SetExpiresAt(t time.Time) *OAuthSessionCreate {
	osc.mutation.SetExpiresAt(t)
	return osc
}

// SetIssuedAt sets the "issued_at" field.
func (osc *OAuthSessionCreate) SetIssuedAt(t time.Time) *OAuthSessionCreate {
	osc.mutation.SetIssuedAt(t)
	return osc
}

// SetRequestedAt sets the "requested_at" field.
func (osc *OAuthSessionCreate) SetRequestedAt(t time.Time) *OAuthSessionCreate {
	osc.mutation.SetRequestedAt(t)
	return osc
}

// SetAuthTime sets the "auth_time" field.
func (osc *OAuthSessionCreate) SetAuthTime(t time.Time) *OAuthSessionCreate {
	osc.mutation.SetAuthTime(t)
	return osc
}

// SetRequestedScopes sets the "requested_scopes" field.
func (osc *OAuthSessionCreate) SetRequestedScopes(s []string) *OAuthSessionCreate {
	osc.mutation.SetRequestedScopes(s)
	return osc
}

// SetGrantedScopes sets the "granted_scopes" field.
func (osc *OAuthSessionCreate) SetGrantedScopes(s []string) *OAuthSessionCreate {
	osc.mutation.SetGrantedScopes(s)
	return osc
}

// SetRequestedAudiences sets the "requested_audiences" field.
func (osc *OAuthSessionCreate) SetRequestedAudiences(s []string) *OAuthSessionCreate {
	osc.mutation.SetRequestedAudiences(s)
	return osc
}

// SetGrantedAudiences sets the "granted_audiences" field.
func (osc *OAuthSessionCreate) SetGrantedAudiences(s []string) *OAuthSessionCreate {
	osc.mutation.SetGrantedAudiences(s)
	return osc
}

// SetRequest sets the "request" field.
func (osc *OAuthSessionCreate) SetRequest(s string) *OAuthSessionCreate {
	osc.mutation.SetRequest(s)
	return osc
}

// SetForm sets the "form" field.
func (osc *OAuthSessionCreate) SetForm(s string) *OAuthSessionCreate {
	osc.mutation.SetForm(s)
	return osc
}

// Mutation returns the OAuthSessionMutation object of the builder.
func (osc *OAuthSessionCreate) Mutation() *OAuthSessionMutation {
	return osc.mutation
}

// Save creates the OAuthSession in the database.
func (osc *OAuthSessionCreate) Save(ctx context.Context) (*OAuthSession, error) {
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OAuthSessionCreate) SaveX(ctx context.Context) *OAuthSession {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OAuthSessionCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OAuthSessionCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OAuthSessionCreate) check() error {
	if _, ok := osc.mutation.Issuer(); !ok {
		return &ValidationError{Name: "issuer", err: errors.New(`ent: missing required field "OAuthSession.issuer"`)}
	}
	if _, ok := osc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "OAuthSession.subject"`)}
	}
	if _, ok := osc.mutation.Audiences(); !ok {
		return &ValidationError{Name: "audiences", err: errors.New(`ent: missing required field "OAuthSession.audiences"`)}
	}
	if _, ok := osc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "OAuthSession.expires_at"`)}
	}
	if _, ok := osc.mutation.IssuedAt(); !ok {
		return &ValidationError{Name: "issued_at", err: errors.New(`ent: missing required field "OAuthSession.issued_at"`)}
	}
	if _, ok := osc.mutation.RequestedAt(); !ok {
		return &ValidationError{Name: "requested_at", err: errors.New(`ent: missing required field "OAuthSession.requested_at"`)}
	}
	if _, ok := osc.mutation.AuthTime(); !ok {
		return &ValidationError{Name: "auth_time", err: errors.New(`ent: missing required field "OAuthSession.auth_time"`)}
	}
	if _, ok := osc.mutation.RequestedScopes(); !ok {
		return &ValidationError{Name: "requested_scopes", err: errors.New(`ent: missing required field "OAuthSession.requested_scopes"`)}
	}
	if _, ok := osc.mutation.GrantedScopes(); !ok {
		return &ValidationError{Name: "granted_scopes", err: errors.New(`ent: missing required field "OAuthSession.granted_scopes"`)}
	}
	if _, ok := osc.mutation.RequestedAudiences(); !ok {
		return &ValidationError{Name: "requested_audiences", err: errors.New(`ent: missing required field "OAuthSession.requested_audiences"`)}
	}
	if _, ok := osc.mutation.GrantedAudiences(); !ok {
		return &ValidationError{Name: "granted_audiences", err: errors.New(`ent: missing required field "OAuthSession.granted_audiences"`)}
	}
	if _, ok := osc.mutation.Request(); !ok {
		return &ValidationError{Name: "request", err: errors.New(`ent: missing required field "OAuthSession.request"`)}
	}
	if _, ok := osc.mutation.Form(); !ok {
		return &ValidationError{Name: "form", err: errors.New(`ent: missing required field "OAuthSession.form"`)}
	}
	return nil
}

func (osc *OAuthSessionCreate) sqlSave(ctx context.Context) (*OAuthSession, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OAuthSessionCreate) createSpec() (*OAuthSession, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthSession{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(oauthsession.Table, sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt))
	)
	if value, ok := osc.mutation.Issuer(); ok {
		_spec.SetField(oauthsession.FieldIssuer, field.TypeString, value)
		_node.Issuer = value
	}
	if value, ok := osc.mutation.Subject(); ok {
		_spec.SetField(oauthsession.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := osc.mutation.Audiences(); ok {
		_spec.SetField(oauthsession.FieldAudiences, field.TypeJSON, value)
		_node.Audiences = value
	}
	if value, ok := osc.mutation.ExpiresAt(); ok {
		_spec.SetField(oauthsession.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := osc.mutation.IssuedAt(); ok {
		_spec.SetField(oauthsession.FieldIssuedAt, field.TypeTime, value)
		_node.IssuedAt = value
	}
	if value, ok := osc.mutation.RequestedAt(); ok {
		_spec.SetField(oauthsession.FieldRequestedAt, field.TypeTime, value)
		_node.RequestedAt = value
	}
	if value, ok := osc.mutation.AuthTime(); ok {
		_spec.SetField(oauthsession.FieldAuthTime, field.TypeTime, value)
		_node.AuthTime = value
	}
	if value, ok := osc.mutation.RequestedScopes(); ok {
		_spec.SetField(oauthsession.FieldRequestedScopes, field.TypeJSON, value)
		_node.RequestedScopes = value
	}
	if value, ok := osc.mutation.GrantedScopes(); ok {
		_spec.SetField(oauthsession.FieldGrantedScopes, field.TypeJSON, value)
		_node.GrantedScopes = value
	}
	if value, ok := osc.mutation.RequestedAudiences(); ok {
		_spec.SetField(oauthsession.FieldRequestedAudiences, field.TypeJSON, value)
		_node.RequestedAudiences = value
	}
	if value, ok := osc.mutation.GrantedAudiences(); ok {
		_spec.SetField(oauthsession.FieldGrantedAudiences, field.TypeJSON, value)
		_node.GrantedAudiences = value
	}
	if value, ok := osc.mutation.Request(); ok {
		_spec.SetField(oauthsession.FieldRequest, field.TypeString, value)
		_node.Request = value
	}
	if value, ok := osc.mutation.Form(); ok {
		_spec.SetField(oauthsession.FieldForm, field.TypeString, value)
		_node.Form = value
	}
	return _node, _spec
}

// OAuthSessionCreateBulk is the builder for creating many OAuthSession entities in bulk.
type OAuthSessionCreateBulk struct {
	config
	err      error
	builders []*OAuthSessionCreate
}

// Save creates the OAuthSession entities in the database.
func (oscb *OAuthSessionCreateBulk) Save(ctx context.Context) ([]*OAuthSession, error) {
	if oscb.err != nil {
		return nil, oscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OAuthSession, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OAuthSessionCreateBulk) SaveX(ctx context.Context) []*OAuthSession {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OAuthSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OAuthSessionCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}
