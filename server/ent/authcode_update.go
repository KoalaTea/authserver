// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/authcode"
	"github.com/koalatea/authserver/server/ent/oauthsession"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// AuthCodeUpdate is the builder for updating AuthCode entities.
type AuthCodeUpdate struct {
	config
	hooks    []Hook
	mutation *AuthCodeMutation
}

// Where appends a list predicates to the AuthCodeUpdate builder.
func (acu *AuthCodeUpdate) Where(ps ...predicate.AuthCode) *AuthCodeUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetCode sets the "code" field.
func (acu *AuthCodeUpdate) SetCode(s string) *AuthCodeUpdate {
	acu.mutation.SetCode(s)
	return acu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (acu *AuthCodeUpdate) SetNillableCode(s *string) *AuthCodeUpdate {
	if s != nil {
		acu.SetCode(*s)
	}
	return acu
}

// SetActive sets the "active" field.
func (acu *AuthCodeUpdate) SetActive(b bool) *AuthCodeUpdate {
	acu.mutation.SetActive(b)
	return acu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (acu *AuthCodeUpdate) SetNillableActive(b *bool) *AuthCodeUpdate {
	if b != nil {
		acu.SetActive(*b)
	}
	return acu
}

// SetSessionID sets the "session" edge to the OAuthSession entity by ID.
func (acu *AuthCodeUpdate) SetSessionID(id int) *AuthCodeUpdate {
	acu.mutation.SetSessionID(id)
	return acu
}

// SetNillableSessionID sets the "session" edge to the OAuthSession entity by ID if the given value is not nil.
func (acu *AuthCodeUpdate) SetNillableSessionID(id *int) *AuthCodeUpdate {
	if id != nil {
		acu = acu.SetSessionID(*id)
	}
	return acu
}

// SetSession sets the "session" edge to the OAuthSession entity.
func (acu *AuthCodeUpdate) SetSession(o *OAuthSession) *AuthCodeUpdate {
	return acu.SetSessionID(o.ID)
}

// Mutation returns the AuthCodeMutation object of the builder.
func (acu *AuthCodeUpdate) Mutation() *AuthCodeMutation {
	return acu.mutation
}

// ClearSession clears the "session" edge to the OAuthSession entity.
func (acu *AuthCodeUpdate) ClearSession() *AuthCodeUpdate {
	acu.mutation.ClearSession()
	return acu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AuthCodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AuthCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AuthCodeUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AuthCodeUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (acu *AuthCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authcode.Table, authcode.Columns, sqlgraph.NewFieldSpec(authcode.FieldID, field.TypeInt))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.Code(); ok {
		_spec.SetField(authcode.FieldCode, field.TypeString, value)
	}
	if value, ok := acu.mutation.Active(); ok {
		_spec.SetField(authcode.FieldActive, field.TypeBool, value)
	}
	if acu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   authcode.SessionTable,
			Columns: []string{authcode.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   authcode.SessionTable,
			Columns: []string{authcode.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AuthCodeUpdateOne is the builder for updating a single AuthCode entity.
type AuthCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthCodeMutation
}

// SetCode sets the "code" field.
func (acuo *AuthCodeUpdateOne) SetCode(s string) *AuthCodeUpdateOne {
	acuo.mutation.SetCode(s)
	return acuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (acuo *AuthCodeUpdateOne) SetNillableCode(s *string) *AuthCodeUpdateOne {
	if s != nil {
		acuo.SetCode(*s)
	}
	return acuo
}

// SetActive sets the "active" field.
func (acuo *AuthCodeUpdateOne) SetActive(b bool) *AuthCodeUpdateOne {
	acuo.mutation.SetActive(b)
	return acuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (acuo *AuthCodeUpdateOne) SetNillableActive(b *bool) *AuthCodeUpdateOne {
	if b != nil {
		acuo.SetActive(*b)
	}
	return acuo
}

// SetSessionID sets the "session" edge to the OAuthSession entity by ID.
func (acuo *AuthCodeUpdateOne) SetSessionID(id int) *AuthCodeUpdateOne {
	acuo.mutation.SetSessionID(id)
	return acuo
}

// SetNillableSessionID sets the "session" edge to the OAuthSession entity by ID if the given value is not nil.
func (acuo *AuthCodeUpdateOne) SetNillableSessionID(id *int) *AuthCodeUpdateOne {
	if id != nil {
		acuo = acuo.SetSessionID(*id)
	}
	return acuo
}

// SetSession sets the "session" edge to the OAuthSession entity.
func (acuo *AuthCodeUpdateOne) SetSession(o *OAuthSession) *AuthCodeUpdateOne {
	return acuo.SetSessionID(o.ID)
}

// Mutation returns the AuthCodeMutation object of the builder.
func (acuo *AuthCodeUpdateOne) Mutation() *AuthCodeMutation {
	return acuo.mutation
}

// ClearSession clears the "session" edge to the OAuthSession entity.
func (acuo *AuthCodeUpdateOne) ClearSession() *AuthCodeUpdateOne {
	acuo.mutation.ClearSession()
	return acuo
}

// Where appends a list predicates to the AuthCodeUpdate builder.
func (acuo *AuthCodeUpdateOne) Where(ps ...predicate.AuthCode) *AuthCodeUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AuthCodeUpdateOne) Select(field string, fields ...string) *AuthCodeUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AuthCode entity.
func (acuo *AuthCodeUpdateOne) Save(ctx context.Context) (*AuthCode, error) {
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AuthCodeUpdateOne) SaveX(ctx context.Context) *AuthCode {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AuthCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AuthCodeUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (acuo *AuthCodeUpdateOne) sqlSave(ctx context.Context) (_node *AuthCode, err error) {
	_spec := sqlgraph.NewUpdateSpec(authcode.Table, authcode.Columns, sqlgraph.NewFieldSpec(authcode.FieldID, field.TypeInt))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authcode.FieldID)
		for _, f := range fields {
			if !authcode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authcode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.Code(); ok {
		_spec.SetField(authcode.FieldCode, field.TypeString, value)
	}
	if value, ok := acuo.mutation.Active(); ok {
		_spec.SetField(authcode.FieldActive, field.TypeBool, value)
	}
	if acuo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   authcode.SessionTable,
			Columns: []string{authcode.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   authcode.SessionTable,
			Columns: []string{authcode.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthCode{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
