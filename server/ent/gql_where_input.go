// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/koalatea/authserver/server/ent/accessrequest"
	"github.com/koalatea/authserver/server/ent/cert"
	"github.com/koalatea/authserver/server/ent/oidcauthcode"
	"github.com/koalatea/authserver/server/ent/oidcclient"
	"github.com/koalatea/authserver/server/ent/oidcsession"
	"github.com/koalatea/authserver/server/ent/predicate"
	"github.com/koalatea/authserver/server/ent/user"
)

// AccessRequestWhereInput represents a where input for filtering AccessRequest queries.
type AccessRequestWhereInput struct {
	Predicates []predicate.AccessRequest  `json:"-"`
	Not        *AccessRequestWhereInput   `json:"not,omitempty"`
	Or         []*AccessRequestWhereInput `json:"or,omitempty"`
	And        []*AccessRequestWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "request" field predicates.
	Request             *string  `json:"request,omitempty"`
	RequestNEQ          *string  `json:"requestNEQ,omitempty"`
	RequestIn           []string `json:"requestIn,omitempty"`
	RequestNotIn        []string `json:"requestNotIn,omitempty"`
	RequestGT           *string  `json:"requestGT,omitempty"`
	RequestGTE          *string  `json:"requestGTE,omitempty"`
	RequestLT           *string  `json:"requestLT,omitempty"`
	RequestLTE          *string  `json:"requestLTE,omitempty"`
	RequestContains     *string  `json:"requestContains,omitempty"`
	RequestHasPrefix    *string  `json:"requestHasPrefix,omitempty"`
	RequestHasSuffix    *string  `json:"requestHasSuffix,omitempty"`
	RequestEqualFold    *string  `json:"requestEqualFold,omitempty"`
	RequestContainsFold *string  `json:"requestContainsFold,omitempty"`

	// "form" field predicates.
	Form             *string  `json:"form,omitempty"`
	FormNEQ          *string  `json:"formNEQ,omitempty"`
	FormIn           []string `json:"formIn,omitempty"`
	FormNotIn        []string `json:"formNotIn,omitempty"`
	FormGT           *string  `json:"formGT,omitempty"`
	FormGTE          *string  `json:"formGTE,omitempty"`
	FormLT           *string  `json:"formLT,omitempty"`
	FormLTE          *string  `json:"formLTE,omitempty"`
	FormContains     *string  `json:"formContains,omitempty"`
	FormHasPrefix    *string  `json:"formHasPrefix,omitempty"`
	FormHasSuffix    *string  `json:"formHasSuffix,omitempty"`
	FormEqualFold    *string  `json:"formEqualFold,omitempty"`
	FormContainsFold *string  `json:"formContainsFold,omitempty"`

	// "active" field predicates.
	Active    *bool `json:"active,omitempty"`
	ActiveNEQ *bool `json:"activeNEQ,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *AccessRequestWhereInput) AddPredicates(predicates ...predicate.AccessRequest) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the AccessRequestWhereInput filter on the AccessRequestQuery builder.
func (i *AccessRequestWhereInput) Filter(q *AccessRequestQuery) (*AccessRequestQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyAccessRequestWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyAccessRequestWhereInput is returned in case the AccessRequestWhereInput is empty.
var ErrEmptyAccessRequestWhereInput = errors.New("ent: empty predicate AccessRequestWhereInput")

// P returns a predicate for filtering accessrequests.
// An error is returned if the input is empty or invalid.
func (i *AccessRequestWhereInput) P() (predicate.AccessRequest, error) {
	var predicates []predicate.AccessRequest
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, accessrequest.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.AccessRequest, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, accessrequest.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.AccessRequest, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, accessrequest.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, accessrequest.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, accessrequest.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, accessrequest.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, accessrequest.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, accessrequest.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, accessrequest.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, accessrequest.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, accessrequest.IDLTE(*i.IDLTE))
	}
	if i.Request != nil {
		predicates = append(predicates, accessrequest.RequestEQ(*i.Request))
	}
	if i.RequestNEQ != nil {
		predicates = append(predicates, accessrequest.RequestNEQ(*i.RequestNEQ))
	}
	if len(i.RequestIn) > 0 {
		predicates = append(predicates, accessrequest.RequestIn(i.RequestIn...))
	}
	if len(i.RequestNotIn) > 0 {
		predicates = append(predicates, accessrequest.RequestNotIn(i.RequestNotIn...))
	}
	if i.RequestGT != nil {
		predicates = append(predicates, accessrequest.RequestGT(*i.RequestGT))
	}
	if i.RequestGTE != nil {
		predicates = append(predicates, accessrequest.RequestGTE(*i.RequestGTE))
	}
	if i.RequestLT != nil {
		predicates = append(predicates, accessrequest.RequestLT(*i.RequestLT))
	}
	if i.RequestLTE != nil {
		predicates = append(predicates, accessrequest.RequestLTE(*i.RequestLTE))
	}
	if i.RequestContains != nil {
		predicates = append(predicates, accessrequest.RequestContains(*i.RequestContains))
	}
	if i.RequestHasPrefix != nil {
		predicates = append(predicates, accessrequest.RequestHasPrefix(*i.RequestHasPrefix))
	}
	if i.RequestHasSuffix != nil {
		predicates = append(predicates, accessrequest.RequestHasSuffix(*i.RequestHasSuffix))
	}
	if i.RequestEqualFold != nil {
		predicates = append(predicates, accessrequest.RequestEqualFold(*i.RequestEqualFold))
	}
	if i.RequestContainsFold != nil {
		predicates = append(predicates, accessrequest.RequestContainsFold(*i.RequestContainsFold))
	}
	if i.Form != nil {
		predicates = append(predicates, accessrequest.FormEQ(*i.Form))
	}
	if i.FormNEQ != nil {
		predicates = append(predicates, accessrequest.FormNEQ(*i.FormNEQ))
	}
	if len(i.FormIn) > 0 {
		predicates = append(predicates, accessrequest.FormIn(i.FormIn...))
	}
	if len(i.FormNotIn) > 0 {
		predicates = append(predicates, accessrequest.FormNotIn(i.FormNotIn...))
	}
	if i.FormGT != nil {
		predicates = append(predicates, accessrequest.FormGT(*i.FormGT))
	}
	if i.FormGTE != nil {
		predicates = append(predicates, accessrequest.FormGTE(*i.FormGTE))
	}
	if i.FormLT != nil {
		predicates = append(predicates, accessrequest.FormLT(*i.FormLT))
	}
	if i.FormLTE != nil {
		predicates = append(predicates, accessrequest.FormLTE(*i.FormLTE))
	}
	if i.FormContains != nil {
		predicates = append(predicates, accessrequest.FormContains(*i.FormContains))
	}
	if i.FormHasPrefix != nil {
		predicates = append(predicates, accessrequest.FormHasPrefix(*i.FormHasPrefix))
	}
	if i.FormHasSuffix != nil {
		predicates = append(predicates, accessrequest.FormHasSuffix(*i.FormHasSuffix))
	}
	if i.FormEqualFold != nil {
		predicates = append(predicates, accessrequest.FormEqualFold(*i.FormEqualFold))
	}
	if i.FormContainsFold != nil {
		predicates = append(predicates, accessrequest.FormContainsFold(*i.FormContainsFold))
	}
	if i.Active != nil {
		predicates = append(predicates, accessrequest.ActiveEQ(*i.Active))
	}
	if i.ActiveNEQ != nil {
		predicates = append(predicates, accessrequest.ActiveNEQ(*i.ActiveNEQ))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyAccessRequestWhereInput
	case 1:
		return predicates[0], nil
	default:
		return accessrequest.And(predicates...), nil
	}
}

// CertWhereInput represents a where input for filtering Cert queries.
type CertWhereInput struct {
	Predicates []predicate.Cert  `json:"-"`
	Not        *CertWhereInput   `json:"not,omitempty"`
	Or         []*CertWhereInput `json:"or,omitempty"`
	And        []*CertWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CertWhereInput) AddPredicates(predicates ...predicate.Cert) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CertWhereInput filter on the CertQuery builder.
func (i *CertWhereInput) Filter(q *CertQuery) (*CertQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCertWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCertWhereInput is returned in case the CertWhereInput is empty.
var ErrEmptyCertWhereInput = errors.New("ent: empty predicate CertWhereInput")

// P returns a predicate for filtering certs.
// An error is returned if the input is empty or invalid.
func (i *CertWhereInput) P() (predicate.Cert, error) {
	var predicates []predicate.Cert
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, cert.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Cert, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, cert.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Cert, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, cert.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, cert.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, cert.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, cert.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, cert.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, cert.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, cert.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, cert.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, cert.IDLTE(*i.IDLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCertWhereInput
	case 1:
		return predicates[0], nil
	default:
		return cert.And(predicates...), nil
	}
}

// OIDCAuthCodeWhereInput represents a where input for filtering OIDCAuthCode queries.
type OIDCAuthCodeWhereInput struct {
	Predicates []predicate.OIDCAuthCode  `json:"-"`
	Not        *OIDCAuthCodeWhereInput   `json:"not,omitempty"`
	Or         []*OIDCAuthCodeWhereInput `json:"or,omitempty"`
	And        []*OIDCAuthCodeWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "authorization_code" field predicates.
	AuthorizationCode             *string  `json:"authorizationCode,omitempty"`
	AuthorizationCodeNEQ          *string  `json:"authorizationCodeNEQ,omitempty"`
	AuthorizationCodeIn           []string `json:"authorizationCodeIn,omitempty"`
	AuthorizationCodeNotIn        []string `json:"authorizationCodeNotIn,omitempty"`
	AuthorizationCodeGT           *string  `json:"authorizationCodeGT,omitempty"`
	AuthorizationCodeGTE          *string  `json:"authorizationCodeGTE,omitempty"`
	AuthorizationCodeLT           *string  `json:"authorizationCodeLT,omitempty"`
	AuthorizationCodeLTE          *string  `json:"authorizationCodeLTE,omitempty"`
	AuthorizationCodeContains     *string  `json:"authorizationCodeContains,omitempty"`
	AuthorizationCodeHasPrefix    *string  `json:"authorizationCodeHasPrefix,omitempty"`
	AuthorizationCodeHasSuffix    *string  `json:"authorizationCodeHasSuffix,omitempty"`
	AuthorizationCodeEqualFold    *string  `json:"authorizationCodeEqualFold,omitempty"`
	AuthorizationCodeContainsFold *string  `json:"authorizationCodeContainsFold,omitempty"`

	// "access_request" edge predicates.
	HasAccessRequest     *bool                      `json:"hasAccessRequest,omitempty"`
	HasAccessRequestWith []*AccessRequestWhereInput `json:"hasAccessRequestWith,omitempty"`

	// "session" edge predicates.
	HasSession     *bool                    `json:"hasSession,omitempty"`
	HasSessionWith []*OIDCSessionWhereInput `json:"hasSessionWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OIDCAuthCodeWhereInput) AddPredicates(predicates ...predicate.OIDCAuthCode) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OIDCAuthCodeWhereInput filter on the OIDCAuthCodeQuery builder.
func (i *OIDCAuthCodeWhereInput) Filter(q *OIDCAuthCodeQuery) (*OIDCAuthCodeQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOIDCAuthCodeWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOIDCAuthCodeWhereInput is returned in case the OIDCAuthCodeWhereInput is empty.
var ErrEmptyOIDCAuthCodeWhereInput = errors.New("ent: empty predicate OIDCAuthCodeWhereInput")

// P returns a predicate for filtering oidcauthcodes.
// An error is returned if the input is empty or invalid.
func (i *OIDCAuthCodeWhereInput) P() (predicate.OIDCAuthCode, error) {
	var predicates []predicate.OIDCAuthCode
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, oidcauthcode.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OIDCAuthCode, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, oidcauthcode.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OIDCAuthCode, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, oidcauthcode.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, oidcauthcode.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, oidcauthcode.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, oidcauthcode.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, oidcauthcode.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, oidcauthcode.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, oidcauthcode.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, oidcauthcode.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, oidcauthcode.IDLTE(*i.IDLTE))
	}
	if i.AuthorizationCode != nil {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeEQ(*i.AuthorizationCode))
	}
	if i.AuthorizationCodeNEQ != nil {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeNEQ(*i.AuthorizationCodeNEQ))
	}
	if len(i.AuthorizationCodeIn) > 0 {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeIn(i.AuthorizationCodeIn...))
	}
	if len(i.AuthorizationCodeNotIn) > 0 {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeNotIn(i.AuthorizationCodeNotIn...))
	}
	if i.AuthorizationCodeGT != nil {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeGT(*i.AuthorizationCodeGT))
	}
	if i.AuthorizationCodeGTE != nil {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeGTE(*i.AuthorizationCodeGTE))
	}
	if i.AuthorizationCodeLT != nil {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeLT(*i.AuthorizationCodeLT))
	}
	if i.AuthorizationCodeLTE != nil {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeLTE(*i.AuthorizationCodeLTE))
	}
	if i.AuthorizationCodeContains != nil {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeContains(*i.AuthorizationCodeContains))
	}
	if i.AuthorizationCodeHasPrefix != nil {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeHasPrefix(*i.AuthorizationCodeHasPrefix))
	}
	if i.AuthorizationCodeHasSuffix != nil {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeHasSuffix(*i.AuthorizationCodeHasSuffix))
	}
	if i.AuthorizationCodeEqualFold != nil {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeEqualFold(*i.AuthorizationCodeEqualFold))
	}
	if i.AuthorizationCodeContainsFold != nil {
		predicates = append(predicates, oidcauthcode.AuthorizationCodeContainsFold(*i.AuthorizationCodeContainsFold))
	}

	if i.HasAccessRequest != nil {
		p := oidcauthcode.HasAccessRequest()
		if !*i.HasAccessRequest {
			p = oidcauthcode.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAccessRequestWith) > 0 {
		with := make([]predicate.AccessRequest, 0, len(i.HasAccessRequestWith))
		for _, w := range i.HasAccessRequestWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAccessRequestWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, oidcauthcode.HasAccessRequestWith(with...))
	}
	if i.HasSession != nil {
		p := oidcauthcode.HasSession()
		if !*i.HasSession {
			p = oidcauthcode.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasSessionWith) > 0 {
		with := make([]predicate.OIDCSession, 0, len(i.HasSessionWith))
		for _, w := range i.HasSessionWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasSessionWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, oidcauthcode.HasSessionWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOIDCAuthCodeWhereInput
	case 1:
		return predicates[0], nil
	default:
		return oidcauthcode.And(predicates...), nil
	}
}

// OIDCClientWhereInput represents a where input for filtering OIDCClient queries.
type OIDCClientWhereInput struct {
	Predicates []predicate.OIDCClient  `json:"-"`
	Not        *OIDCClientWhereInput   `json:"not,omitempty"`
	Or         []*OIDCClientWhereInput `json:"or,omitempty"`
	And        []*OIDCClientWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "client_id" field predicates.
	ClientID             *string  `json:"clientID,omitempty"`
	ClientIDNEQ          *string  `json:"clientIDNEQ,omitempty"`
	ClientIDIn           []string `json:"clientIDIn,omitempty"`
	ClientIDNotIn        []string `json:"clientIDNotIn,omitempty"`
	ClientIDGT           *string  `json:"clientIDGT,omitempty"`
	ClientIDGTE          *string  `json:"clientIDGTE,omitempty"`
	ClientIDLT           *string  `json:"clientIDLT,omitempty"`
	ClientIDLTE          *string  `json:"clientIDLTE,omitempty"`
	ClientIDContains     *string  `json:"clientIDContains,omitempty"`
	ClientIDHasPrefix    *string  `json:"clientIDHasPrefix,omitempty"`
	ClientIDHasSuffix    *string  `json:"clientIDHasSuffix,omitempty"`
	ClientIDEqualFold    *string  `json:"clientIDEqualFold,omitempty"`
	ClientIDContainsFold *string  `json:"clientIDContainsFold,omitempty"`

	// "secret" field predicates.
	Secret             *string  `json:"secret,omitempty"`
	SecretNEQ          *string  `json:"secretNEQ,omitempty"`
	SecretIn           []string `json:"secretIn,omitempty"`
	SecretNotIn        []string `json:"secretNotIn,omitempty"`
	SecretGT           *string  `json:"secretGT,omitempty"`
	SecretGTE          *string  `json:"secretGTE,omitempty"`
	SecretLT           *string  `json:"secretLT,omitempty"`
	SecretLTE          *string  `json:"secretLTE,omitempty"`
	SecretContains     *string  `json:"secretContains,omitempty"`
	SecretHasPrefix    *string  `json:"secretHasPrefix,omitempty"`
	SecretHasSuffix    *string  `json:"secretHasSuffix,omitempty"`
	SecretEqualFold    *string  `json:"secretEqualFold,omitempty"`
	SecretContainsFold *string  `json:"secretContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OIDCClientWhereInput) AddPredicates(predicates ...predicate.OIDCClient) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OIDCClientWhereInput filter on the OIDCClientQuery builder.
func (i *OIDCClientWhereInput) Filter(q *OIDCClientQuery) (*OIDCClientQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOIDCClientWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOIDCClientWhereInput is returned in case the OIDCClientWhereInput is empty.
var ErrEmptyOIDCClientWhereInput = errors.New("ent: empty predicate OIDCClientWhereInput")

// P returns a predicate for filtering oidcclients.
// An error is returned if the input is empty or invalid.
func (i *OIDCClientWhereInput) P() (predicate.OIDCClient, error) {
	var predicates []predicate.OIDCClient
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, oidcclient.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OIDCClient, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, oidcclient.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OIDCClient, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, oidcclient.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, oidcclient.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, oidcclient.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, oidcclient.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, oidcclient.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, oidcclient.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, oidcclient.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, oidcclient.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, oidcclient.IDLTE(*i.IDLTE))
	}
	if i.ClientID != nil {
		predicates = append(predicates, oidcclient.ClientIDEQ(*i.ClientID))
	}
	if i.ClientIDNEQ != nil {
		predicates = append(predicates, oidcclient.ClientIDNEQ(*i.ClientIDNEQ))
	}
	if len(i.ClientIDIn) > 0 {
		predicates = append(predicates, oidcclient.ClientIDIn(i.ClientIDIn...))
	}
	if len(i.ClientIDNotIn) > 0 {
		predicates = append(predicates, oidcclient.ClientIDNotIn(i.ClientIDNotIn...))
	}
	if i.ClientIDGT != nil {
		predicates = append(predicates, oidcclient.ClientIDGT(*i.ClientIDGT))
	}
	if i.ClientIDGTE != nil {
		predicates = append(predicates, oidcclient.ClientIDGTE(*i.ClientIDGTE))
	}
	if i.ClientIDLT != nil {
		predicates = append(predicates, oidcclient.ClientIDLT(*i.ClientIDLT))
	}
	if i.ClientIDLTE != nil {
		predicates = append(predicates, oidcclient.ClientIDLTE(*i.ClientIDLTE))
	}
	if i.ClientIDContains != nil {
		predicates = append(predicates, oidcclient.ClientIDContains(*i.ClientIDContains))
	}
	if i.ClientIDHasPrefix != nil {
		predicates = append(predicates, oidcclient.ClientIDHasPrefix(*i.ClientIDHasPrefix))
	}
	if i.ClientIDHasSuffix != nil {
		predicates = append(predicates, oidcclient.ClientIDHasSuffix(*i.ClientIDHasSuffix))
	}
	if i.ClientIDEqualFold != nil {
		predicates = append(predicates, oidcclient.ClientIDEqualFold(*i.ClientIDEqualFold))
	}
	if i.ClientIDContainsFold != nil {
		predicates = append(predicates, oidcclient.ClientIDContainsFold(*i.ClientIDContainsFold))
	}
	if i.Secret != nil {
		predicates = append(predicates, oidcclient.SecretEQ(*i.Secret))
	}
	if i.SecretNEQ != nil {
		predicates = append(predicates, oidcclient.SecretNEQ(*i.SecretNEQ))
	}
	if len(i.SecretIn) > 0 {
		predicates = append(predicates, oidcclient.SecretIn(i.SecretIn...))
	}
	if len(i.SecretNotIn) > 0 {
		predicates = append(predicates, oidcclient.SecretNotIn(i.SecretNotIn...))
	}
	if i.SecretGT != nil {
		predicates = append(predicates, oidcclient.SecretGT(*i.SecretGT))
	}
	if i.SecretGTE != nil {
		predicates = append(predicates, oidcclient.SecretGTE(*i.SecretGTE))
	}
	if i.SecretLT != nil {
		predicates = append(predicates, oidcclient.SecretLT(*i.SecretLT))
	}
	if i.SecretLTE != nil {
		predicates = append(predicates, oidcclient.SecretLTE(*i.SecretLTE))
	}
	if i.SecretContains != nil {
		predicates = append(predicates, oidcclient.SecretContains(*i.SecretContains))
	}
	if i.SecretHasPrefix != nil {
		predicates = append(predicates, oidcclient.SecretHasPrefix(*i.SecretHasPrefix))
	}
	if i.SecretHasSuffix != nil {
		predicates = append(predicates, oidcclient.SecretHasSuffix(*i.SecretHasSuffix))
	}
	if i.SecretEqualFold != nil {
		predicates = append(predicates, oidcclient.SecretEqualFold(*i.SecretEqualFold))
	}
	if i.SecretContainsFold != nil {
		predicates = append(predicates, oidcclient.SecretContainsFold(*i.SecretContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOIDCClientWhereInput
	case 1:
		return predicates[0], nil
	default:
		return oidcclient.And(predicates...), nil
	}
}

// OIDCSessionWhereInput represents a where input for filtering OIDCSession queries.
type OIDCSessionWhereInput struct {
	Predicates []predicate.OIDCSession  `json:"-"`
	Not        *OIDCSessionWhereInput   `json:"not,omitempty"`
	Or         []*OIDCSessionWhereInput `json:"or,omitempty"`
	And        []*OIDCSessionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "issuer" field predicates.
	Issuer             *string  `json:"issuer,omitempty"`
	IssuerNEQ          *string  `json:"issuerNEQ,omitempty"`
	IssuerIn           []string `json:"issuerIn,omitempty"`
	IssuerNotIn        []string `json:"issuerNotIn,omitempty"`
	IssuerGT           *string  `json:"issuerGT,omitempty"`
	IssuerGTE          *string  `json:"issuerGTE,omitempty"`
	IssuerLT           *string  `json:"issuerLT,omitempty"`
	IssuerLTE          *string  `json:"issuerLTE,omitempty"`
	IssuerContains     *string  `json:"issuerContains,omitempty"`
	IssuerHasPrefix    *string  `json:"issuerHasPrefix,omitempty"`
	IssuerHasSuffix    *string  `json:"issuerHasSuffix,omitempty"`
	IssuerEqualFold    *string  `json:"issuerEqualFold,omitempty"`
	IssuerContainsFold *string  `json:"issuerContainsFold,omitempty"`

	// "subject" field predicates.
	Subject             *string  `json:"subject,omitempty"`
	SubjectNEQ          *string  `json:"subjectNEQ,omitempty"`
	SubjectIn           []string `json:"subjectIn,omitempty"`
	SubjectNotIn        []string `json:"subjectNotIn,omitempty"`
	SubjectGT           *string  `json:"subjectGT,omitempty"`
	SubjectGTE          *string  `json:"subjectGTE,omitempty"`
	SubjectLT           *string  `json:"subjectLT,omitempty"`
	SubjectLTE          *string  `json:"subjectLTE,omitempty"`
	SubjectContains     *string  `json:"subjectContains,omitempty"`
	SubjectHasPrefix    *string  `json:"subjectHasPrefix,omitempty"`
	SubjectHasSuffix    *string  `json:"subjectHasSuffix,omitempty"`
	SubjectEqualFold    *string  `json:"subjectEqualFold,omitempty"`
	SubjectContainsFold *string  `json:"subjectContainsFold,omitempty"`

	// "expires_at" field predicates.
	ExpiresAt      *time.Time  `json:"expiresAt,omitempty"`
	ExpiresAtNEQ   *time.Time  `json:"expiresAtNEQ,omitempty"`
	ExpiresAtIn    []time.Time `json:"expiresAtIn,omitempty"`
	ExpiresAtNotIn []time.Time `json:"expiresAtNotIn,omitempty"`
	ExpiresAtGT    *time.Time  `json:"expiresAtGT,omitempty"`
	ExpiresAtGTE   *time.Time  `json:"expiresAtGTE,omitempty"`
	ExpiresAtLT    *time.Time  `json:"expiresAtLT,omitempty"`
	ExpiresAtLTE   *time.Time  `json:"expiresAtLTE,omitempty"`

	// "issued_at" field predicates.
	IssuedAt      *time.Time  `json:"issuedAt,omitempty"`
	IssuedAtNEQ   *time.Time  `json:"issuedAtNEQ,omitempty"`
	IssuedAtIn    []time.Time `json:"issuedAtIn,omitempty"`
	IssuedAtNotIn []time.Time `json:"issuedAtNotIn,omitempty"`
	IssuedAtGT    *time.Time  `json:"issuedAtGT,omitempty"`
	IssuedAtGTE   *time.Time  `json:"issuedAtGTE,omitempty"`
	IssuedAtLT    *time.Time  `json:"issuedAtLT,omitempty"`
	IssuedAtLTE   *time.Time  `json:"issuedAtLTE,omitempty"`

	// "requested_at" field predicates.
	RequestedAt      *time.Time  `json:"requestedAt,omitempty"`
	RequestedAtNEQ   *time.Time  `json:"requestedAtNEQ,omitempty"`
	RequestedAtIn    []time.Time `json:"requestedAtIn,omitempty"`
	RequestedAtNotIn []time.Time `json:"requestedAtNotIn,omitempty"`
	RequestedAtGT    *time.Time  `json:"requestedAtGT,omitempty"`
	RequestedAtGTE   *time.Time  `json:"requestedAtGTE,omitempty"`
	RequestedAtLT    *time.Time  `json:"requestedAtLT,omitempty"`
	RequestedAtLTE   *time.Time  `json:"requestedAtLTE,omitempty"`

	// "auth_time" field predicates.
	AuthTime      *time.Time  `json:"authTime,omitempty"`
	AuthTimeNEQ   *time.Time  `json:"authTimeNEQ,omitempty"`
	AuthTimeIn    []time.Time `json:"authTimeIn,omitempty"`
	AuthTimeNotIn []time.Time `json:"authTimeNotIn,omitempty"`
	AuthTimeGT    *time.Time  `json:"authTimeGT,omitempty"`
	AuthTimeGTE   *time.Time  `json:"authTimeGTE,omitempty"`
	AuthTimeLT    *time.Time  `json:"authTimeLT,omitempty"`
	AuthTimeLTE   *time.Time  `json:"authTimeLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OIDCSessionWhereInput) AddPredicates(predicates ...predicate.OIDCSession) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OIDCSessionWhereInput filter on the OIDCSessionQuery builder.
func (i *OIDCSessionWhereInput) Filter(q *OIDCSessionQuery) (*OIDCSessionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOIDCSessionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOIDCSessionWhereInput is returned in case the OIDCSessionWhereInput is empty.
var ErrEmptyOIDCSessionWhereInput = errors.New("ent: empty predicate OIDCSessionWhereInput")

// P returns a predicate for filtering oidcsessions.
// An error is returned if the input is empty or invalid.
func (i *OIDCSessionWhereInput) P() (predicate.OIDCSession, error) {
	var predicates []predicate.OIDCSession
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, oidcsession.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OIDCSession, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, oidcsession.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OIDCSession, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, oidcsession.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, oidcsession.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, oidcsession.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, oidcsession.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, oidcsession.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, oidcsession.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, oidcsession.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, oidcsession.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, oidcsession.IDLTE(*i.IDLTE))
	}
	if i.Issuer != nil {
		predicates = append(predicates, oidcsession.IssuerEQ(*i.Issuer))
	}
	if i.IssuerNEQ != nil {
		predicates = append(predicates, oidcsession.IssuerNEQ(*i.IssuerNEQ))
	}
	if len(i.IssuerIn) > 0 {
		predicates = append(predicates, oidcsession.IssuerIn(i.IssuerIn...))
	}
	if len(i.IssuerNotIn) > 0 {
		predicates = append(predicates, oidcsession.IssuerNotIn(i.IssuerNotIn...))
	}
	if i.IssuerGT != nil {
		predicates = append(predicates, oidcsession.IssuerGT(*i.IssuerGT))
	}
	if i.IssuerGTE != nil {
		predicates = append(predicates, oidcsession.IssuerGTE(*i.IssuerGTE))
	}
	if i.IssuerLT != nil {
		predicates = append(predicates, oidcsession.IssuerLT(*i.IssuerLT))
	}
	if i.IssuerLTE != nil {
		predicates = append(predicates, oidcsession.IssuerLTE(*i.IssuerLTE))
	}
	if i.IssuerContains != nil {
		predicates = append(predicates, oidcsession.IssuerContains(*i.IssuerContains))
	}
	if i.IssuerHasPrefix != nil {
		predicates = append(predicates, oidcsession.IssuerHasPrefix(*i.IssuerHasPrefix))
	}
	if i.IssuerHasSuffix != nil {
		predicates = append(predicates, oidcsession.IssuerHasSuffix(*i.IssuerHasSuffix))
	}
	if i.IssuerEqualFold != nil {
		predicates = append(predicates, oidcsession.IssuerEqualFold(*i.IssuerEqualFold))
	}
	if i.IssuerContainsFold != nil {
		predicates = append(predicates, oidcsession.IssuerContainsFold(*i.IssuerContainsFold))
	}
	if i.Subject != nil {
		predicates = append(predicates, oidcsession.SubjectEQ(*i.Subject))
	}
	if i.SubjectNEQ != nil {
		predicates = append(predicates, oidcsession.SubjectNEQ(*i.SubjectNEQ))
	}
	if len(i.SubjectIn) > 0 {
		predicates = append(predicates, oidcsession.SubjectIn(i.SubjectIn...))
	}
	if len(i.SubjectNotIn) > 0 {
		predicates = append(predicates, oidcsession.SubjectNotIn(i.SubjectNotIn...))
	}
	if i.SubjectGT != nil {
		predicates = append(predicates, oidcsession.SubjectGT(*i.SubjectGT))
	}
	if i.SubjectGTE != nil {
		predicates = append(predicates, oidcsession.SubjectGTE(*i.SubjectGTE))
	}
	if i.SubjectLT != nil {
		predicates = append(predicates, oidcsession.SubjectLT(*i.SubjectLT))
	}
	if i.SubjectLTE != nil {
		predicates = append(predicates, oidcsession.SubjectLTE(*i.SubjectLTE))
	}
	if i.SubjectContains != nil {
		predicates = append(predicates, oidcsession.SubjectContains(*i.SubjectContains))
	}
	if i.SubjectHasPrefix != nil {
		predicates = append(predicates, oidcsession.SubjectHasPrefix(*i.SubjectHasPrefix))
	}
	if i.SubjectHasSuffix != nil {
		predicates = append(predicates, oidcsession.SubjectHasSuffix(*i.SubjectHasSuffix))
	}
	if i.SubjectEqualFold != nil {
		predicates = append(predicates, oidcsession.SubjectEqualFold(*i.SubjectEqualFold))
	}
	if i.SubjectContainsFold != nil {
		predicates = append(predicates, oidcsession.SubjectContainsFold(*i.SubjectContainsFold))
	}
	if i.ExpiresAt != nil {
		predicates = append(predicates, oidcsession.ExpiresAtEQ(*i.ExpiresAt))
	}
	if i.ExpiresAtNEQ != nil {
		predicates = append(predicates, oidcsession.ExpiresAtNEQ(*i.ExpiresAtNEQ))
	}
	if len(i.ExpiresAtIn) > 0 {
		predicates = append(predicates, oidcsession.ExpiresAtIn(i.ExpiresAtIn...))
	}
	if len(i.ExpiresAtNotIn) > 0 {
		predicates = append(predicates, oidcsession.ExpiresAtNotIn(i.ExpiresAtNotIn...))
	}
	if i.ExpiresAtGT != nil {
		predicates = append(predicates, oidcsession.ExpiresAtGT(*i.ExpiresAtGT))
	}
	if i.ExpiresAtGTE != nil {
		predicates = append(predicates, oidcsession.ExpiresAtGTE(*i.ExpiresAtGTE))
	}
	if i.ExpiresAtLT != nil {
		predicates = append(predicates, oidcsession.ExpiresAtLT(*i.ExpiresAtLT))
	}
	if i.ExpiresAtLTE != nil {
		predicates = append(predicates, oidcsession.ExpiresAtLTE(*i.ExpiresAtLTE))
	}
	if i.IssuedAt != nil {
		predicates = append(predicates, oidcsession.IssuedAtEQ(*i.IssuedAt))
	}
	if i.IssuedAtNEQ != nil {
		predicates = append(predicates, oidcsession.IssuedAtNEQ(*i.IssuedAtNEQ))
	}
	if len(i.IssuedAtIn) > 0 {
		predicates = append(predicates, oidcsession.IssuedAtIn(i.IssuedAtIn...))
	}
	if len(i.IssuedAtNotIn) > 0 {
		predicates = append(predicates, oidcsession.IssuedAtNotIn(i.IssuedAtNotIn...))
	}
	if i.IssuedAtGT != nil {
		predicates = append(predicates, oidcsession.IssuedAtGT(*i.IssuedAtGT))
	}
	if i.IssuedAtGTE != nil {
		predicates = append(predicates, oidcsession.IssuedAtGTE(*i.IssuedAtGTE))
	}
	if i.IssuedAtLT != nil {
		predicates = append(predicates, oidcsession.IssuedAtLT(*i.IssuedAtLT))
	}
	if i.IssuedAtLTE != nil {
		predicates = append(predicates, oidcsession.IssuedAtLTE(*i.IssuedAtLTE))
	}
	if i.RequestedAt != nil {
		predicates = append(predicates, oidcsession.RequestedAtEQ(*i.RequestedAt))
	}
	if i.RequestedAtNEQ != nil {
		predicates = append(predicates, oidcsession.RequestedAtNEQ(*i.RequestedAtNEQ))
	}
	if len(i.RequestedAtIn) > 0 {
		predicates = append(predicates, oidcsession.RequestedAtIn(i.RequestedAtIn...))
	}
	if len(i.RequestedAtNotIn) > 0 {
		predicates = append(predicates, oidcsession.RequestedAtNotIn(i.RequestedAtNotIn...))
	}
	if i.RequestedAtGT != nil {
		predicates = append(predicates, oidcsession.RequestedAtGT(*i.RequestedAtGT))
	}
	if i.RequestedAtGTE != nil {
		predicates = append(predicates, oidcsession.RequestedAtGTE(*i.RequestedAtGTE))
	}
	if i.RequestedAtLT != nil {
		predicates = append(predicates, oidcsession.RequestedAtLT(*i.RequestedAtLT))
	}
	if i.RequestedAtLTE != nil {
		predicates = append(predicates, oidcsession.RequestedAtLTE(*i.RequestedAtLTE))
	}
	if i.AuthTime != nil {
		predicates = append(predicates, oidcsession.AuthTimeEQ(*i.AuthTime))
	}
	if i.AuthTimeNEQ != nil {
		predicates = append(predicates, oidcsession.AuthTimeNEQ(*i.AuthTimeNEQ))
	}
	if len(i.AuthTimeIn) > 0 {
		predicates = append(predicates, oidcsession.AuthTimeIn(i.AuthTimeIn...))
	}
	if len(i.AuthTimeNotIn) > 0 {
		predicates = append(predicates, oidcsession.AuthTimeNotIn(i.AuthTimeNotIn...))
	}
	if i.AuthTimeGT != nil {
		predicates = append(predicates, oidcsession.AuthTimeGT(*i.AuthTimeGT))
	}
	if i.AuthTimeGTE != nil {
		predicates = append(predicates, oidcsession.AuthTimeGTE(*i.AuthTimeGTE))
	}
	if i.AuthTimeLT != nil {
		predicates = append(predicates, oidcsession.AuthTimeLT(*i.AuthTimeLT))
	}
	if i.AuthTimeLTE != nil {
		predicates = append(predicates, oidcsession.AuthTimeLTE(*i.AuthTimeLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOIDCSessionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return oidcsession.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "Name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "OAuthID" field predicates.
	OAuthID             *string  `json:"oauthid,omitempty"`
	OAuthIDNEQ          *string  `json:"oauthidNEQ,omitempty"`
	OAuthIDIn           []string `json:"oauthidIn,omitempty"`
	OAuthIDNotIn        []string `json:"oauthidNotIn,omitempty"`
	OAuthIDGT           *string  `json:"oauthidGT,omitempty"`
	OAuthIDGTE          *string  `json:"oauthidGTE,omitempty"`
	OAuthIDLT           *string  `json:"oauthidLT,omitempty"`
	OAuthIDLTE          *string  `json:"oauthidLTE,omitempty"`
	OAuthIDContains     *string  `json:"oauthidContains,omitempty"`
	OAuthIDHasPrefix    *string  `json:"oauthidHasPrefix,omitempty"`
	OAuthIDHasSuffix    *string  `json:"oauthidHasSuffix,omitempty"`
	OAuthIDEqualFold    *string  `json:"oauthidEqualFold,omitempty"`
	OAuthIDContainsFold *string  `json:"oauthidContainsFold,omitempty"`

	// "IsActivated" field predicates.
	IsActivated    *bool `json:"isactivated,omitempty"`
	IsActivatedNEQ *bool `json:"isactivatedNEQ,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.OAuthID != nil {
		predicates = append(predicates, user.OAuthIDEQ(*i.OAuthID))
	}
	if i.OAuthIDNEQ != nil {
		predicates = append(predicates, user.OAuthIDNEQ(*i.OAuthIDNEQ))
	}
	if len(i.OAuthIDIn) > 0 {
		predicates = append(predicates, user.OAuthIDIn(i.OAuthIDIn...))
	}
	if len(i.OAuthIDNotIn) > 0 {
		predicates = append(predicates, user.OAuthIDNotIn(i.OAuthIDNotIn...))
	}
	if i.OAuthIDGT != nil {
		predicates = append(predicates, user.OAuthIDGT(*i.OAuthIDGT))
	}
	if i.OAuthIDGTE != nil {
		predicates = append(predicates, user.OAuthIDGTE(*i.OAuthIDGTE))
	}
	if i.OAuthIDLT != nil {
		predicates = append(predicates, user.OAuthIDLT(*i.OAuthIDLT))
	}
	if i.OAuthIDLTE != nil {
		predicates = append(predicates, user.OAuthIDLTE(*i.OAuthIDLTE))
	}
	if i.OAuthIDContains != nil {
		predicates = append(predicates, user.OAuthIDContains(*i.OAuthIDContains))
	}
	if i.OAuthIDHasPrefix != nil {
		predicates = append(predicates, user.OAuthIDHasPrefix(*i.OAuthIDHasPrefix))
	}
	if i.OAuthIDHasSuffix != nil {
		predicates = append(predicates, user.OAuthIDHasSuffix(*i.OAuthIDHasSuffix))
	}
	if i.OAuthIDEqualFold != nil {
		predicates = append(predicates, user.OAuthIDEqualFold(*i.OAuthIDEqualFold))
	}
	if i.OAuthIDContainsFold != nil {
		predicates = append(predicates, user.OAuthIDContainsFold(*i.OAuthIDContainsFold))
	}
	if i.IsActivated != nil {
		predicates = append(predicates, user.IsActivatedEQ(*i.IsActivated))
	}
	if i.IsActivatedNEQ != nil {
		predicates = append(predicates, user.IsActivatedNEQ(*i.IsActivatedNEQ))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
