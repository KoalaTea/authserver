// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/koalatea/authserver/server/ent/accessrequest"
	"github.com/koalatea/authserver/server/ent/cert"
	"github.com/koalatea/authserver/server/ent/oidcauthcode"
	"github.com/koalatea/authserver/server/ent/oidcclient"
	"github.com/koalatea/authserver/server/ent/oidcsession"
	"github.com/koalatea/authserver/server/ent/user"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AccessRequestEdge is the edge representation of AccessRequest.
type AccessRequestEdge struct {
	Node   *AccessRequest `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// AccessRequestConnection is the connection containing edges to AccessRequest.
type AccessRequestConnection struct {
	Edges      []*AccessRequestEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *AccessRequestConnection) build(nodes []*AccessRequest, pager *accessrequestPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AccessRequest
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AccessRequest {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AccessRequest {
			return nodes[i]
		}
	}
	c.Edges = make([]*AccessRequestEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AccessRequestEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AccessRequestPaginateOption enables pagination customization.
type AccessRequestPaginateOption func(*accessrequestPager) error

// WithAccessRequestOrder configures pagination ordering.
func WithAccessRequestOrder(order *AccessRequestOrder) AccessRequestPaginateOption {
	if order == nil {
		order = DefaultAccessRequestOrder
	}
	o := *order
	return func(pager *accessrequestPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAccessRequestOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAccessRequestFilter configures pagination filter.
func WithAccessRequestFilter(filter func(*AccessRequestQuery) (*AccessRequestQuery, error)) AccessRequestPaginateOption {
	return func(pager *accessrequestPager) error {
		if filter == nil {
			return errors.New("AccessRequestQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type accessrequestPager struct {
	order  *AccessRequestOrder
	filter func(*AccessRequestQuery) (*AccessRequestQuery, error)
}

func newAccessRequestPager(opts []AccessRequestPaginateOption) (*accessrequestPager, error) {
	pager := &accessrequestPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAccessRequestOrder
	}
	return pager, nil
}

func (p *accessrequestPager) applyFilter(query *AccessRequestQuery) (*AccessRequestQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *accessrequestPager) toCursor(ar *AccessRequest) Cursor {
	return p.order.Field.toCursor(ar)
}

func (p *accessrequestPager) applyCursors(query *AccessRequestQuery, after, before *Cursor) *AccessRequestQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAccessRequestOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *accessrequestPager) applyOrder(query *AccessRequestQuery, reverse bool) *AccessRequestQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAccessRequestOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAccessRequestOrder.Field.field))
	}
	return query
}

func (p *accessrequestPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAccessRequestOrder.Field {
			b.Comma().Ident(DefaultAccessRequestOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AccessRequest.
func (ar *AccessRequestQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AccessRequestPaginateOption,
) (*AccessRequestConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAccessRequestPager(opts)
	if err != nil {
		return nil, err
	}
	if ar, err = pager.applyFilter(ar); err != nil {
		return nil, err
	}
	conn := &AccessRequestConnection{Edges: []*AccessRequestEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ar.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ar = pager.applyCursors(ar, after, before)
	ar = pager.applyOrder(ar, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ar.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ar.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ar.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AccessRequestOrderField defines the ordering field of AccessRequest.
type AccessRequestOrderField struct {
	field    string
	toCursor func(*AccessRequest) Cursor
}

// AccessRequestOrder defines the ordering of AccessRequest.
type AccessRequestOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *AccessRequestOrderField `json:"field"`
}

// DefaultAccessRequestOrder is the default ordering of AccessRequest.
var DefaultAccessRequestOrder = &AccessRequestOrder{
	Direction: OrderDirectionAsc,
	Field: &AccessRequestOrderField{
		field: accessrequest.FieldID,
		toCursor: func(ar *AccessRequest) Cursor {
			return Cursor{ID: ar.ID}
		},
	},
}

// ToEdge converts AccessRequest into AccessRequestEdge.
func (ar *AccessRequest) ToEdge(order *AccessRequestOrder) *AccessRequestEdge {
	if order == nil {
		order = DefaultAccessRequestOrder
	}
	return &AccessRequestEdge{
		Node:   ar,
		Cursor: order.Field.toCursor(ar),
	}
}

// CertEdge is the edge representation of Cert.
type CertEdge struct {
	Node   *Cert  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// CertConnection is the connection containing edges to Cert.
type CertConnection struct {
	Edges      []*CertEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *CertConnection) build(nodes []*Cert, pager *certPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Cert
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Cert {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Cert {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertPaginateOption enables pagination customization.
type CertPaginateOption func(*certPager) error

// WithCertOrder configures pagination ordering.
func WithCertOrder(order *CertOrder) CertPaginateOption {
	if order == nil {
		order = DefaultCertOrder
	}
	o := *order
	return func(pager *certPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertFilter configures pagination filter.
func WithCertFilter(filter func(*CertQuery) (*CertQuery, error)) CertPaginateOption {
	return func(pager *certPager) error {
		if filter == nil {
			return errors.New("CertQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certPager struct {
	order  *CertOrder
	filter func(*CertQuery) (*CertQuery, error)
}

func newCertPager(opts []CertPaginateOption) (*certPager, error) {
	pager := &certPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertOrder
	}
	return pager, nil
}

func (p *certPager) applyFilter(query *CertQuery) (*CertQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certPager) toCursor(c *Cert) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *certPager) applyCursors(query *CertQuery, after, before *Cursor) *CertQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultCertOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *certPager) applyOrder(query *CertQuery, reverse bool) *CertQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultCertOrder.Field {
		query = query.Order(direction.orderFunc(DefaultCertOrder.Field.field))
	}
	return query
}

func (p *certPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertOrder.Field {
			b.Comma().Ident(DefaultCertOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Cert.
func (c *CertQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertPaginateOption,
) (*CertConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertPager(opts)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CertConnection{Edges: []*CertEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CertOrderField defines the ordering field of Cert.
type CertOrderField struct {
	field    string
	toCursor func(*Cert) Cursor
}

// CertOrder defines the ordering of Cert.
type CertOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *CertOrderField `json:"field"`
}

// DefaultCertOrder is the default ordering of Cert.
var DefaultCertOrder = &CertOrder{
	Direction: OrderDirectionAsc,
	Field: &CertOrderField{
		field: cert.FieldID,
		toCursor: func(c *Cert) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Cert into CertEdge.
func (c *Cert) ToEdge(order *CertOrder) *CertEdge {
	if order == nil {
		order = DefaultCertOrder
	}
	return &CertEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// OIDCAuthCodeEdge is the edge representation of OIDCAuthCode.
type OIDCAuthCodeEdge struct {
	Node   *OIDCAuthCode `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// OIDCAuthCodeConnection is the connection containing edges to OIDCAuthCode.
type OIDCAuthCodeConnection struct {
	Edges      []*OIDCAuthCodeEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *OIDCAuthCodeConnection) build(nodes []*OIDCAuthCode, pager *oidcauthcodePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OIDCAuthCode
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OIDCAuthCode {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OIDCAuthCode {
			return nodes[i]
		}
	}
	c.Edges = make([]*OIDCAuthCodeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OIDCAuthCodeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OIDCAuthCodePaginateOption enables pagination customization.
type OIDCAuthCodePaginateOption func(*oidcauthcodePager) error

// WithOIDCAuthCodeOrder configures pagination ordering.
func WithOIDCAuthCodeOrder(order *OIDCAuthCodeOrder) OIDCAuthCodePaginateOption {
	if order == nil {
		order = DefaultOIDCAuthCodeOrder
	}
	o := *order
	return func(pager *oidcauthcodePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOIDCAuthCodeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOIDCAuthCodeFilter configures pagination filter.
func WithOIDCAuthCodeFilter(filter func(*OIDCAuthCodeQuery) (*OIDCAuthCodeQuery, error)) OIDCAuthCodePaginateOption {
	return func(pager *oidcauthcodePager) error {
		if filter == nil {
			return errors.New("OIDCAuthCodeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type oidcauthcodePager struct {
	order  *OIDCAuthCodeOrder
	filter func(*OIDCAuthCodeQuery) (*OIDCAuthCodeQuery, error)
}

func newOIDCAuthCodePager(opts []OIDCAuthCodePaginateOption) (*oidcauthcodePager, error) {
	pager := &oidcauthcodePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOIDCAuthCodeOrder
	}
	return pager, nil
}

func (p *oidcauthcodePager) applyFilter(query *OIDCAuthCodeQuery) (*OIDCAuthCodeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *oidcauthcodePager) toCursor(oac *OIDCAuthCode) Cursor {
	return p.order.Field.toCursor(oac)
}

func (p *oidcauthcodePager) applyCursors(query *OIDCAuthCodeQuery, after, before *Cursor) *OIDCAuthCodeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOIDCAuthCodeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *oidcauthcodePager) applyOrder(query *OIDCAuthCodeQuery, reverse bool) *OIDCAuthCodeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOIDCAuthCodeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOIDCAuthCodeOrder.Field.field))
	}
	return query
}

func (p *oidcauthcodePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOIDCAuthCodeOrder.Field {
			b.Comma().Ident(DefaultOIDCAuthCodeOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OIDCAuthCode.
func (oac *OIDCAuthCodeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OIDCAuthCodePaginateOption,
) (*OIDCAuthCodeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOIDCAuthCodePager(opts)
	if err != nil {
		return nil, err
	}
	if oac, err = pager.applyFilter(oac); err != nil {
		return nil, err
	}
	conn := &OIDCAuthCodeConnection{Edges: []*OIDCAuthCodeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = oac.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	oac = pager.applyCursors(oac, after, before)
	oac = pager.applyOrder(oac, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		oac.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := oac.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := oac.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OIDCAuthCodeOrderField defines the ordering field of OIDCAuthCode.
type OIDCAuthCodeOrderField struct {
	field    string
	toCursor func(*OIDCAuthCode) Cursor
}

// OIDCAuthCodeOrder defines the ordering of OIDCAuthCode.
type OIDCAuthCodeOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *OIDCAuthCodeOrderField `json:"field"`
}

// DefaultOIDCAuthCodeOrder is the default ordering of OIDCAuthCode.
var DefaultOIDCAuthCodeOrder = &OIDCAuthCodeOrder{
	Direction: OrderDirectionAsc,
	Field: &OIDCAuthCodeOrderField{
		field: oidcauthcode.FieldID,
		toCursor: func(oac *OIDCAuthCode) Cursor {
			return Cursor{ID: oac.ID}
		},
	},
}

// ToEdge converts OIDCAuthCode into OIDCAuthCodeEdge.
func (oac *OIDCAuthCode) ToEdge(order *OIDCAuthCodeOrder) *OIDCAuthCodeEdge {
	if order == nil {
		order = DefaultOIDCAuthCodeOrder
	}
	return &OIDCAuthCodeEdge{
		Node:   oac,
		Cursor: order.Field.toCursor(oac),
	}
}

// OIDCClientEdge is the edge representation of OIDCClient.
type OIDCClientEdge struct {
	Node   *OIDCClient `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// OIDCClientConnection is the connection containing edges to OIDCClient.
type OIDCClientConnection struct {
	Edges      []*OIDCClientEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *OIDCClientConnection) build(nodes []*OIDCClient, pager *oidcclientPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OIDCClient
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OIDCClient {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OIDCClient {
			return nodes[i]
		}
	}
	c.Edges = make([]*OIDCClientEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OIDCClientEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OIDCClientPaginateOption enables pagination customization.
type OIDCClientPaginateOption func(*oidcclientPager) error

// WithOIDCClientOrder configures pagination ordering.
func WithOIDCClientOrder(order *OIDCClientOrder) OIDCClientPaginateOption {
	if order == nil {
		order = DefaultOIDCClientOrder
	}
	o := *order
	return func(pager *oidcclientPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOIDCClientOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOIDCClientFilter configures pagination filter.
func WithOIDCClientFilter(filter func(*OIDCClientQuery) (*OIDCClientQuery, error)) OIDCClientPaginateOption {
	return func(pager *oidcclientPager) error {
		if filter == nil {
			return errors.New("OIDCClientQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type oidcclientPager struct {
	order  *OIDCClientOrder
	filter func(*OIDCClientQuery) (*OIDCClientQuery, error)
}

func newOIDCClientPager(opts []OIDCClientPaginateOption) (*oidcclientPager, error) {
	pager := &oidcclientPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOIDCClientOrder
	}
	return pager, nil
}

func (p *oidcclientPager) applyFilter(query *OIDCClientQuery) (*OIDCClientQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *oidcclientPager) toCursor(oc *OIDCClient) Cursor {
	return p.order.Field.toCursor(oc)
}

func (p *oidcclientPager) applyCursors(query *OIDCClientQuery, after, before *Cursor) *OIDCClientQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOIDCClientOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *oidcclientPager) applyOrder(query *OIDCClientQuery, reverse bool) *OIDCClientQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOIDCClientOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOIDCClientOrder.Field.field))
	}
	return query
}

func (p *oidcclientPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOIDCClientOrder.Field {
			b.Comma().Ident(DefaultOIDCClientOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OIDCClient.
func (oc *OIDCClientQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OIDCClientPaginateOption,
) (*OIDCClientConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOIDCClientPager(opts)
	if err != nil {
		return nil, err
	}
	if oc, err = pager.applyFilter(oc); err != nil {
		return nil, err
	}
	conn := &OIDCClientConnection{Edges: []*OIDCClientEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = oc.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	oc = pager.applyCursors(oc, after, before)
	oc = pager.applyOrder(oc, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		oc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := oc.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := oc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OIDCClientOrderField defines the ordering field of OIDCClient.
type OIDCClientOrderField struct {
	field    string
	toCursor func(*OIDCClient) Cursor
}

// OIDCClientOrder defines the ordering of OIDCClient.
type OIDCClientOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *OIDCClientOrderField `json:"field"`
}

// DefaultOIDCClientOrder is the default ordering of OIDCClient.
var DefaultOIDCClientOrder = &OIDCClientOrder{
	Direction: OrderDirectionAsc,
	Field: &OIDCClientOrderField{
		field: oidcclient.FieldID,
		toCursor: func(oc *OIDCClient) Cursor {
			return Cursor{ID: oc.ID}
		},
	},
}

// ToEdge converts OIDCClient into OIDCClientEdge.
func (oc *OIDCClient) ToEdge(order *OIDCClientOrder) *OIDCClientEdge {
	if order == nil {
		order = DefaultOIDCClientOrder
	}
	return &OIDCClientEdge{
		Node:   oc,
		Cursor: order.Field.toCursor(oc),
	}
}

// OIDCSessionEdge is the edge representation of OIDCSession.
type OIDCSessionEdge struct {
	Node   *OIDCSession `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// OIDCSessionConnection is the connection containing edges to OIDCSession.
type OIDCSessionConnection struct {
	Edges      []*OIDCSessionEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *OIDCSessionConnection) build(nodes []*OIDCSession, pager *oidcsessionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OIDCSession
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OIDCSession {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OIDCSession {
			return nodes[i]
		}
	}
	c.Edges = make([]*OIDCSessionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OIDCSessionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OIDCSessionPaginateOption enables pagination customization.
type OIDCSessionPaginateOption func(*oidcsessionPager) error

// WithOIDCSessionOrder configures pagination ordering.
func WithOIDCSessionOrder(order *OIDCSessionOrder) OIDCSessionPaginateOption {
	if order == nil {
		order = DefaultOIDCSessionOrder
	}
	o := *order
	return func(pager *oidcsessionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOIDCSessionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOIDCSessionFilter configures pagination filter.
func WithOIDCSessionFilter(filter func(*OIDCSessionQuery) (*OIDCSessionQuery, error)) OIDCSessionPaginateOption {
	return func(pager *oidcsessionPager) error {
		if filter == nil {
			return errors.New("OIDCSessionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type oidcsessionPager struct {
	order  *OIDCSessionOrder
	filter func(*OIDCSessionQuery) (*OIDCSessionQuery, error)
}

func newOIDCSessionPager(opts []OIDCSessionPaginateOption) (*oidcsessionPager, error) {
	pager := &oidcsessionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOIDCSessionOrder
	}
	return pager, nil
}

func (p *oidcsessionPager) applyFilter(query *OIDCSessionQuery) (*OIDCSessionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *oidcsessionPager) toCursor(os *OIDCSession) Cursor {
	return p.order.Field.toCursor(os)
}

func (p *oidcsessionPager) applyCursors(query *OIDCSessionQuery, after, before *Cursor) *OIDCSessionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOIDCSessionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *oidcsessionPager) applyOrder(query *OIDCSessionQuery, reverse bool) *OIDCSessionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOIDCSessionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOIDCSessionOrder.Field.field))
	}
	return query
}

func (p *oidcsessionPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOIDCSessionOrder.Field {
			b.Comma().Ident(DefaultOIDCSessionOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OIDCSession.
func (os *OIDCSessionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OIDCSessionPaginateOption,
) (*OIDCSessionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOIDCSessionPager(opts)
	if err != nil {
		return nil, err
	}
	if os, err = pager.applyFilter(os); err != nil {
		return nil, err
	}
	conn := &OIDCSessionConnection{Edges: []*OIDCSessionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = os.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	os = pager.applyCursors(os, after, before)
	os = pager.applyOrder(os, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		os.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := os.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := os.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OIDCSessionOrderField defines the ordering field of OIDCSession.
type OIDCSessionOrderField struct {
	field    string
	toCursor func(*OIDCSession) Cursor
}

// OIDCSessionOrder defines the ordering of OIDCSession.
type OIDCSessionOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *OIDCSessionOrderField `json:"field"`
}

// DefaultOIDCSessionOrder is the default ordering of OIDCSession.
var DefaultOIDCSessionOrder = &OIDCSessionOrder{
	Direction: OrderDirectionAsc,
	Field: &OIDCSessionOrderField{
		field: oidcsession.FieldID,
		toCursor: func(os *OIDCSession) Cursor {
			return Cursor{ID: os.ID}
		},
	},
}

// ToEdge converts OIDCSession into OIDCSessionEdge.
func (os *OIDCSession) ToEdge(order *OIDCSessionOrder) *OIDCSessionEdge {
	if order == nil {
		order = DefaultOIDCSessionOrder
	}
	return &OIDCSessionEdge{
		Node:   os,
		Cursor: order.Field.toCursor(os),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

func (p *userPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
