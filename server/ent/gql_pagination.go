// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/koalatea/authserver/server/ent/authcode"
	"github.com/koalatea/authserver/server/ent/cert"
	"github.com/koalatea/authserver/server/ent/denylistedjti"
	"github.com/koalatea/authserver/server/ent/oauthaccesstoken"
	"github.com/koalatea/authserver/server/ent/oauthclient"
	"github.com/koalatea/authserver/server/ent/oauthparrequest"
	"github.com/koalatea/authserver/server/ent/oauthrefreshtoken"
	"github.com/koalatea/authserver/server/ent/oauthsession"
	"github.com/koalatea/authserver/server/ent/oidcauthcode"
	"github.com/koalatea/authserver/server/ent/pkce"
	"github.com/koalatea/authserver/server/ent/user"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AuthCodeEdge is the edge representation of AuthCode.
type AuthCodeEdge struct {
	Node   *AuthCode `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// AuthCodeConnection is the connection containing edges to AuthCode.
type AuthCodeConnection struct {
	Edges      []*AuthCodeEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *AuthCodeConnection) build(nodes []*AuthCode, pager *authcodePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AuthCode
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AuthCode {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AuthCode {
			return nodes[i]
		}
	}
	c.Edges = make([]*AuthCodeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AuthCodeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AuthCodePaginateOption enables pagination customization.
type AuthCodePaginateOption func(*authcodePager) error

// WithAuthCodeOrder configures pagination ordering.
func WithAuthCodeOrder(order *AuthCodeOrder) AuthCodePaginateOption {
	if order == nil {
		order = DefaultAuthCodeOrder
	}
	o := *order
	return func(pager *authcodePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAuthCodeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAuthCodeFilter configures pagination filter.
func WithAuthCodeFilter(filter func(*AuthCodeQuery) (*AuthCodeQuery, error)) AuthCodePaginateOption {
	return func(pager *authcodePager) error {
		if filter == nil {
			return errors.New("AuthCodeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type authcodePager struct {
	order  *AuthCodeOrder
	filter func(*AuthCodeQuery) (*AuthCodeQuery, error)
}

func newAuthCodePager(opts []AuthCodePaginateOption) (*authcodePager, error) {
	pager := &authcodePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAuthCodeOrder
	}
	return pager, nil
}

func (p *authcodePager) applyFilter(query *AuthCodeQuery) (*AuthCodeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *authcodePager) toCursor(ac *AuthCode) Cursor {
	return p.order.Field.toCursor(ac)
}

func (p *authcodePager) applyCursors(query *AuthCodeQuery, after, before *Cursor) *AuthCodeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAuthCodeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *authcodePager) applyOrder(query *AuthCodeQuery, reverse bool) *AuthCodeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAuthCodeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAuthCodeOrder.Field.field))
	}
	return query
}

func (p *authcodePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAuthCodeOrder.Field {
			b.Comma().Ident(DefaultAuthCodeOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AuthCode.
func (ac *AuthCodeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AuthCodePaginateOption,
) (*AuthCodeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAuthCodePager(opts)
	if err != nil {
		return nil, err
	}
	if ac, err = pager.applyFilter(ac); err != nil {
		return nil, err
	}
	conn := &AuthCodeConnection{Edges: []*AuthCodeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ac.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ac = pager.applyCursors(ac, after, before)
	ac = pager.applyOrder(ac, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ac.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ac.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ac.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AuthCodeOrderField defines the ordering field of AuthCode.
type AuthCodeOrderField struct {
	field    string
	toCursor func(*AuthCode) Cursor
}

// AuthCodeOrder defines the ordering of AuthCode.
type AuthCodeOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *AuthCodeOrderField `json:"field"`
}

// DefaultAuthCodeOrder is the default ordering of AuthCode.
var DefaultAuthCodeOrder = &AuthCodeOrder{
	Direction: OrderDirectionAsc,
	Field: &AuthCodeOrderField{
		field: authcode.FieldID,
		toCursor: func(ac *AuthCode) Cursor {
			return Cursor{ID: ac.ID}
		},
	},
}

// ToEdge converts AuthCode into AuthCodeEdge.
func (ac *AuthCode) ToEdge(order *AuthCodeOrder) *AuthCodeEdge {
	if order == nil {
		order = DefaultAuthCodeOrder
	}
	return &AuthCodeEdge{
		Node:   ac,
		Cursor: order.Field.toCursor(ac),
	}
}

// CertEdge is the edge representation of Cert.
type CertEdge struct {
	Node   *Cert  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// CertConnection is the connection containing edges to Cert.
type CertConnection struct {
	Edges      []*CertEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *CertConnection) build(nodes []*Cert, pager *certPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Cert
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Cert {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Cert {
			return nodes[i]
		}
	}
	c.Edges = make([]*CertEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CertEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CertPaginateOption enables pagination customization.
type CertPaginateOption func(*certPager) error

// WithCertOrder configures pagination ordering.
func WithCertOrder(order *CertOrder) CertPaginateOption {
	if order == nil {
		order = DefaultCertOrder
	}
	o := *order
	return func(pager *certPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCertOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCertFilter configures pagination filter.
func WithCertFilter(filter func(*CertQuery) (*CertQuery, error)) CertPaginateOption {
	return func(pager *certPager) error {
		if filter == nil {
			return errors.New("CertQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type certPager struct {
	order  *CertOrder
	filter func(*CertQuery) (*CertQuery, error)
}

func newCertPager(opts []CertPaginateOption) (*certPager, error) {
	pager := &certPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCertOrder
	}
	return pager, nil
}

func (p *certPager) applyFilter(query *CertQuery) (*CertQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *certPager) toCursor(c *Cert) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *certPager) applyCursors(query *CertQuery, after, before *Cursor) *CertQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultCertOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *certPager) applyOrder(query *CertQuery, reverse bool) *CertQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultCertOrder.Field {
		query = query.Order(direction.orderFunc(DefaultCertOrder.Field.field))
	}
	return query
}

func (p *certPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCertOrder.Field {
			b.Comma().Ident(DefaultCertOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Cert.
func (c *CertQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CertPaginateOption,
) (*CertConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCertPager(opts)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CertConnection{Edges: []*CertEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CertOrderField defines the ordering field of Cert.
type CertOrderField struct {
	field    string
	toCursor func(*Cert) Cursor
}

// CertOrder defines the ordering of Cert.
type CertOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *CertOrderField `json:"field"`
}

// DefaultCertOrder is the default ordering of Cert.
var DefaultCertOrder = &CertOrder{
	Direction: OrderDirectionAsc,
	Field: &CertOrderField{
		field: cert.FieldID,
		toCursor: func(c *Cert) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Cert into CertEdge.
func (c *Cert) ToEdge(order *CertOrder) *CertEdge {
	if order == nil {
		order = DefaultCertOrder
	}
	return &CertEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// DenyListedJTIEdge is the edge representation of DenyListedJTI.
type DenyListedJTIEdge struct {
	Node   *DenyListedJTI `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// DenyListedJTIConnection is the connection containing edges to DenyListedJTI.
type DenyListedJTIConnection struct {
	Edges      []*DenyListedJTIEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *DenyListedJTIConnection) build(nodes []*DenyListedJTI, pager *denylistedjtiPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *DenyListedJTI
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DenyListedJTI {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DenyListedJTI {
			return nodes[i]
		}
	}
	c.Edges = make([]*DenyListedJTIEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DenyListedJTIEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DenyListedJTIPaginateOption enables pagination customization.
type DenyListedJTIPaginateOption func(*denylistedjtiPager) error

// WithDenyListedJTIOrder configures pagination ordering.
func WithDenyListedJTIOrder(order *DenyListedJTIOrder) DenyListedJTIPaginateOption {
	if order == nil {
		order = DefaultDenyListedJTIOrder
	}
	o := *order
	return func(pager *denylistedjtiPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDenyListedJTIOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDenyListedJTIFilter configures pagination filter.
func WithDenyListedJTIFilter(filter func(*DenyListedJTIQuery) (*DenyListedJTIQuery, error)) DenyListedJTIPaginateOption {
	return func(pager *denylistedjtiPager) error {
		if filter == nil {
			return errors.New("DenyListedJTIQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type denylistedjtiPager struct {
	order  *DenyListedJTIOrder
	filter func(*DenyListedJTIQuery) (*DenyListedJTIQuery, error)
}

func newDenyListedJTIPager(opts []DenyListedJTIPaginateOption) (*denylistedjtiPager, error) {
	pager := &denylistedjtiPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDenyListedJTIOrder
	}
	return pager, nil
}

func (p *denylistedjtiPager) applyFilter(query *DenyListedJTIQuery) (*DenyListedJTIQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *denylistedjtiPager) toCursor(dlj *DenyListedJTI) Cursor {
	return p.order.Field.toCursor(dlj)
}

func (p *denylistedjtiPager) applyCursors(query *DenyListedJTIQuery, after, before *Cursor) *DenyListedJTIQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultDenyListedJTIOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *denylistedjtiPager) applyOrder(query *DenyListedJTIQuery, reverse bool) *DenyListedJTIQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultDenyListedJTIOrder.Field {
		query = query.Order(direction.orderFunc(DefaultDenyListedJTIOrder.Field.field))
	}
	return query
}

func (p *denylistedjtiPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultDenyListedJTIOrder.Field {
			b.Comma().Ident(DefaultDenyListedJTIOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to DenyListedJTI.
func (dlj *DenyListedJTIQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DenyListedJTIPaginateOption,
) (*DenyListedJTIConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDenyListedJTIPager(opts)
	if err != nil {
		return nil, err
	}
	if dlj, err = pager.applyFilter(dlj); err != nil {
		return nil, err
	}
	conn := &DenyListedJTIConnection{Edges: []*DenyListedJTIEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = dlj.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	dlj = pager.applyCursors(dlj, after, before)
	dlj = pager.applyOrder(dlj, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		dlj.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := dlj.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := dlj.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// DenyListedJTIOrderField defines the ordering field of DenyListedJTI.
type DenyListedJTIOrderField struct {
	field    string
	toCursor func(*DenyListedJTI) Cursor
}

// DenyListedJTIOrder defines the ordering of DenyListedJTI.
type DenyListedJTIOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *DenyListedJTIOrderField `json:"field"`
}

// DefaultDenyListedJTIOrder is the default ordering of DenyListedJTI.
var DefaultDenyListedJTIOrder = &DenyListedJTIOrder{
	Direction: OrderDirectionAsc,
	Field: &DenyListedJTIOrderField{
		field: denylistedjti.FieldID,
		toCursor: func(dlj *DenyListedJTI) Cursor {
			return Cursor{ID: dlj.ID}
		},
	},
}

// ToEdge converts DenyListedJTI into DenyListedJTIEdge.
func (dlj *DenyListedJTI) ToEdge(order *DenyListedJTIOrder) *DenyListedJTIEdge {
	if order == nil {
		order = DefaultDenyListedJTIOrder
	}
	return &DenyListedJTIEdge{
		Node:   dlj,
		Cursor: order.Field.toCursor(dlj),
	}
}

// OAuthAccessTokenEdge is the edge representation of OAuthAccessToken.
type OAuthAccessTokenEdge struct {
	Node   *OAuthAccessToken `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// OAuthAccessTokenConnection is the connection containing edges to OAuthAccessToken.
type OAuthAccessTokenConnection struct {
	Edges      []*OAuthAccessTokenEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *OAuthAccessTokenConnection) build(nodes []*OAuthAccessToken, pager *oauthaccesstokenPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OAuthAccessToken
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OAuthAccessToken {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OAuthAccessToken {
			return nodes[i]
		}
	}
	c.Edges = make([]*OAuthAccessTokenEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OAuthAccessTokenEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OAuthAccessTokenPaginateOption enables pagination customization.
type OAuthAccessTokenPaginateOption func(*oauthaccesstokenPager) error

// WithOAuthAccessTokenOrder configures pagination ordering.
func WithOAuthAccessTokenOrder(order *OAuthAccessTokenOrder) OAuthAccessTokenPaginateOption {
	if order == nil {
		order = DefaultOAuthAccessTokenOrder
	}
	o := *order
	return func(pager *oauthaccesstokenPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOAuthAccessTokenOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOAuthAccessTokenFilter configures pagination filter.
func WithOAuthAccessTokenFilter(filter func(*OAuthAccessTokenQuery) (*OAuthAccessTokenQuery, error)) OAuthAccessTokenPaginateOption {
	return func(pager *oauthaccesstokenPager) error {
		if filter == nil {
			return errors.New("OAuthAccessTokenQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type oauthaccesstokenPager struct {
	order  *OAuthAccessTokenOrder
	filter func(*OAuthAccessTokenQuery) (*OAuthAccessTokenQuery, error)
}

func newOAuthAccessTokenPager(opts []OAuthAccessTokenPaginateOption) (*oauthaccesstokenPager, error) {
	pager := &oauthaccesstokenPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOAuthAccessTokenOrder
	}
	return pager, nil
}

func (p *oauthaccesstokenPager) applyFilter(query *OAuthAccessTokenQuery) (*OAuthAccessTokenQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *oauthaccesstokenPager) toCursor(oat *OAuthAccessToken) Cursor {
	return p.order.Field.toCursor(oat)
}

func (p *oauthaccesstokenPager) applyCursors(query *OAuthAccessTokenQuery, after, before *Cursor) *OAuthAccessTokenQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOAuthAccessTokenOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *oauthaccesstokenPager) applyOrder(query *OAuthAccessTokenQuery, reverse bool) *OAuthAccessTokenQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOAuthAccessTokenOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOAuthAccessTokenOrder.Field.field))
	}
	return query
}

func (p *oauthaccesstokenPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOAuthAccessTokenOrder.Field {
			b.Comma().Ident(DefaultOAuthAccessTokenOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OAuthAccessToken.
func (oat *OAuthAccessTokenQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OAuthAccessTokenPaginateOption,
) (*OAuthAccessTokenConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOAuthAccessTokenPager(opts)
	if err != nil {
		return nil, err
	}
	if oat, err = pager.applyFilter(oat); err != nil {
		return nil, err
	}
	conn := &OAuthAccessTokenConnection{Edges: []*OAuthAccessTokenEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = oat.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	oat = pager.applyCursors(oat, after, before)
	oat = pager.applyOrder(oat, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		oat.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := oat.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := oat.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OAuthAccessTokenOrderField defines the ordering field of OAuthAccessToken.
type OAuthAccessTokenOrderField struct {
	field    string
	toCursor func(*OAuthAccessToken) Cursor
}

// OAuthAccessTokenOrder defines the ordering of OAuthAccessToken.
type OAuthAccessTokenOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *OAuthAccessTokenOrderField `json:"field"`
}

// DefaultOAuthAccessTokenOrder is the default ordering of OAuthAccessToken.
var DefaultOAuthAccessTokenOrder = &OAuthAccessTokenOrder{
	Direction: OrderDirectionAsc,
	Field: &OAuthAccessTokenOrderField{
		field: oauthaccesstoken.FieldID,
		toCursor: func(oat *OAuthAccessToken) Cursor {
			return Cursor{ID: oat.ID}
		},
	},
}

// ToEdge converts OAuthAccessToken into OAuthAccessTokenEdge.
func (oat *OAuthAccessToken) ToEdge(order *OAuthAccessTokenOrder) *OAuthAccessTokenEdge {
	if order == nil {
		order = DefaultOAuthAccessTokenOrder
	}
	return &OAuthAccessTokenEdge{
		Node:   oat,
		Cursor: order.Field.toCursor(oat),
	}
}

// OAuthClientEdge is the edge representation of OAuthClient.
type OAuthClientEdge struct {
	Node   *OAuthClient `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// OAuthClientConnection is the connection containing edges to OAuthClient.
type OAuthClientConnection struct {
	Edges      []*OAuthClientEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *OAuthClientConnection) build(nodes []*OAuthClient, pager *oauthclientPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OAuthClient
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OAuthClient {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OAuthClient {
			return nodes[i]
		}
	}
	c.Edges = make([]*OAuthClientEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OAuthClientEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OAuthClientPaginateOption enables pagination customization.
type OAuthClientPaginateOption func(*oauthclientPager) error

// WithOAuthClientOrder configures pagination ordering.
func WithOAuthClientOrder(order *OAuthClientOrder) OAuthClientPaginateOption {
	if order == nil {
		order = DefaultOAuthClientOrder
	}
	o := *order
	return func(pager *oauthclientPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOAuthClientOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOAuthClientFilter configures pagination filter.
func WithOAuthClientFilter(filter func(*OAuthClientQuery) (*OAuthClientQuery, error)) OAuthClientPaginateOption {
	return func(pager *oauthclientPager) error {
		if filter == nil {
			return errors.New("OAuthClientQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type oauthclientPager struct {
	order  *OAuthClientOrder
	filter func(*OAuthClientQuery) (*OAuthClientQuery, error)
}

func newOAuthClientPager(opts []OAuthClientPaginateOption) (*oauthclientPager, error) {
	pager := &oauthclientPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOAuthClientOrder
	}
	return pager, nil
}

func (p *oauthclientPager) applyFilter(query *OAuthClientQuery) (*OAuthClientQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *oauthclientPager) toCursor(oc *OAuthClient) Cursor {
	return p.order.Field.toCursor(oc)
}

func (p *oauthclientPager) applyCursors(query *OAuthClientQuery, after, before *Cursor) *OAuthClientQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOAuthClientOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *oauthclientPager) applyOrder(query *OAuthClientQuery, reverse bool) *OAuthClientQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOAuthClientOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOAuthClientOrder.Field.field))
	}
	return query
}

func (p *oauthclientPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOAuthClientOrder.Field {
			b.Comma().Ident(DefaultOAuthClientOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OAuthClient.
func (oc *OAuthClientQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OAuthClientPaginateOption,
) (*OAuthClientConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOAuthClientPager(opts)
	if err != nil {
		return nil, err
	}
	if oc, err = pager.applyFilter(oc); err != nil {
		return nil, err
	}
	conn := &OAuthClientConnection{Edges: []*OAuthClientEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = oc.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	oc = pager.applyCursors(oc, after, before)
	oc = pager.applyOrder(oc, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		oc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := oc.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := oc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OAuthClientOrderField defines the ordering field of OAuthClient.
type OAuthClientOrderField struct {
	field    string
	toCursor func(*OAuthClient) Cursor
}

// OAuthClientOrder defines the ordering of OAuthClient.
type OAuthClientOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *OAuthClientOrderField `json:"field"`
}

// DefaultOAuthClientOrder is the default ordering of OAuthClient.
var DefaultOAuthClientOrder = &OAuthClientOrder{
	Direction: OrderDirectionAsc,
	Field: &OAuthClientOrderField{
		field: oauthclient.FieldID,
		toCursor: func(oc *OAuthClient) Cursor {
			return Cursor{ID: oc.ID}
		},
	},
}

// ToEdge converts OAuthClient into OAuthClientEdge.
func (oc *OAuthClient) ToEdge(order *OAuthClientOrder) *OAuthClientEdge {
	if order == nil {
		order = DefaultOAuthClientOrder
	}
	return &OAuthClientEdge{
		Node:   oc,
		Cursor: order.Field.toCursor(oc),
	}
}

// OAuthPARRequestEdge is the edge representation of OAuthPARRequest.
type OAuthPARRequestEdge struct {
	Node   *OAuthPARRequest `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// OAuthPARRequestConnection is the connection containing edges to OAuthPARRequest.
type OAuthPARRequestConnection struct {
	Edges      []*OAuthPARRequestEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *OAuthPARRequestConnection) build(nodes []*OAuthPARRequest, pager *oauthparrequestPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OAuthPARRequest
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OAuthPARRequest {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OAuthPARRequest {
			return nodes[i]
		}
	}
	c.Edges = make([]*OAuthPARRequestEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OAuthPARRequestEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OAuthPARRequestPaginateOption enables pagination customization.
type OAuthPARRequestPaginateOption func(*oauthparrequestPager) error

// WithOAuthPARRequestOrder configures pagination ordering.
func WithOAuthPARRequestOrder(order *OAuthPARRequestOrder) OAuthPARRequestPaginateOption {
	if order == nil {
		order = DefaultOAuthPARRequestOrder
	}
	o := *order
	return func(pager *oauthparrequestPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOAuthPARRequestOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOAuthPARRequestFilter configures pagination filter.
func WithOAuthPARRequestFilter(filter func(*OAuthPARRequestQuery) (*OAuthPARRequestQuery, error)) OAuthPARRequestPaginateOption {
	return func(pager *oauthparrequestPager) error {
		if filter == nil {
			return errors.New("OAuthPARRequestQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type oauthparrequestPager struct {
	order  *OAuthPARRequestOrder
	filter func(*OAuthPARRequestQuery) (*OAuthPARRequestQuery, error)
}

func newOAuthPARRequestPager(opts []OAuthPARRequestPaginateOption) (*oauthparrequestPager, error) {
	pager := &oauthparrequestPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOAuthPARRequestOrder
	}
	return pager, nil
}

func (p *oauthparrequestPager) applyFilter(query *OAuthPARRequestQuery) (*OAuthPARRequestQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *oauthparrequestPager) toCursor(opr *OAuthPARRequest) Cursor {
	return p.order.Field.toCursor(opr)
}

func (p *oauthparrequestPager) applyCursors(query *OAuthPARRequestQuery, after, before *Cursor) *OAuthPARRequestQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOAuthPARRequestOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *oauthparrequestPager) applyOrder(query *OAuthPARRequestQuery, reverse bool) *OAuthPARRequestQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOAuthPARRequestOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOAuthPARRequestOrder.Field.field))
	}
	return query
}

func (p *oauthparrequestPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOAuthPARRequestOrder.Field {
			b.Comma().Ident(DefaultOAuthPARRequestOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OAuthPARRequest.
func (opr *OAuthPARRequestQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OAuthPARRequestPaginateOption,
) (*OAuthPARRequestConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOAuthPARRequestPager(opts)
	if err != nil {
		return nil, err
	}
	if opr, err = pager.applyFilter(opr); err != nil {
		return nil, err
	}
	conn := &OAuthPARRequestConnection{Edges: []*OAuthPARRequestEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = opr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	opr = pager.applyCursors(opr, after, before)
	opr = pager.applyOrder(opr, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		opr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := opr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := opr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OAuthPARRequestOrderField defines the ordering field of OAuthPARRequest.
type OAuthPARRequestOrderField struct {
	field    string
	toCursor func(*OAuthPARRequest) Cursor
}

// OAuthPARRequestOrder defines the ordering of OAuthPARRequest.
type OAuthPARRequestOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *OAuthPARRequestOrderField `json:"field"`
}

// DefaultOAuthPARRequestOrder is the default ordering of OAuthPARRequest.
var DefaultOAuthPARRequestOrder = &OAuthPARRequestOrder{
	Direction: OrderDirectionAsc,
	Field: &OAuthPARRequestOrderField{
		field: oauthparrequest.FieldID,
		toCursor: func(opr *OAuthPARRequest) Cursor {
			return Cursor{ID: opr.ID}
		},
	},
}

// ToEdge converts OAuthPARRequest into OAuthPARRequestEdge.
func (opr *OAuthPARRequest) ToEdge(order *OAuthPARRequestOrder) *OAuthPARRequestEdge {
	if order == nil {
		order = DefaultOAuthPARRequestOrder
	}
	return &OAuthPARRequestEdge{
		Node:   opr,
		Cursor: order.Field.toCursor(opr),
	}
}

// OAuthRefreshTokenEdge is the edge representation of OAuthRefreshToken.
type OAuthRefreshTokenEdge struct {
	Node   *OAuthRefreshToken `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// OAuthRefreshTokenConnection is the connection containing edges to OAuthRefreshToken.
type OAuthRefreshTokenConnection struct {
	Edges      []*OAuthRefreshTokenEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *OAuthRefreshTokenConnection) build(nodes []*OAuthRefreshToken, pager *oauthrefreshtokenPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OAuthRefreshToken
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OAuthRefreshToken {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OAuthRefreshToken {
			return nodes[i]
		}
	}
	c.Edges = make([]*OAuthRefreshTokenEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OAuthRefreshTokenEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OAuthRefreshTokenPaginateOption enables pagination customization.
type OAuthRefreshTokenPaginateOption func(*oauthrefreshtokenPager) error

// WithOAuthRefreshTokenOrder configures pagination ordering.
func WithOAuthRefreshTokenOrder(order *OAuthRefreshTokenOrder) OAuthRefreshTokenPaginateOption {
	if order == nil {
		order = DefaultOAuthRefreshTokenOrder
	}
	o := *order
	return func(pager *oauthrefreshtokenPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOAuthRefreshTokenOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOAuthRefreshTokenFilter configures pagination filter.
func WithOAuthRefreshTokenFilter(filter func(*OAuthRefreshTokenQuery) (*OAuthRefreshTokenQuery, error)) OAuthRefreshTokenPaginateOption {
	return func(pager *oauthrefreshtokenPager) error {
		if filter == nil {
			return errors.New("OAuthRefreshTokenQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type oauthrefreshtokenPager struct {
	order  *OAuthRefreshTokenOrder
	filter func(*OAuthRefreshTokenQuery) (*OAuthRefreshTokenQuery, error)
}

func newOAuthRefreshTokenPager(opts []OAuthRefreshTokenPaginateOption) (*oauthrefreshtokenPager, error) {
	pager := &oauthrefreshtokenPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOAuthRefreshTokenOrder
	}
	return pager, nil
}

func (p *oauthrefreshtokenPager) applyFilter(query *OAuthRefreshTokenQuery) (*OAuthRefreshTokenQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *oauthrefreshtokenPager) toCursor(ort *OAuthRefreshToken) Cursor {
	return p.order.Field.toCursor(ort)
}

func (p *oauthrefreshtokenPager) applyCursors(query *OAuthRefreshTokenQuery, after, before *Cursor) *OAuthRefreshTokenQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOAuthRefreshTokenOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *oauthrefreshtokenPager) applyOrder(query *OAuthRefreshTokenQuery, reverse bool) *OAuthRefreshTokenQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOAuthRefreshTokenOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOAuthRefreshTokenOrder.Field.field))
	}
	return query
}

func (p *oauthrefreshtokenPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOAuthRefreshTokenOrder.Field {
			b.Comma().Ident(DefaultOAuthRefreshTokenOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OAuthRefreshToken.
func (ort *OAuthRefreshTokenQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OAuthRefreshTokenPaginateOption,
) (*OAuthRefreshTokenConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOAuthRefreshTokenPager(opts)
	if err != nil {
		return nil, err
	}
	if ort, err = pager.applyFilter(ort); err != nil {
		return nil, err
	}
	conn := &OAuthRefreshTokenConnection{Edges: []*OAuthRefreshTokenEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ort.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ort = pager.applyCursors(ort, after, before)
	ort = pager.applyOrder(ort, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ort.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ort.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ort.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OAuthRefreshTokenOrderField defines the ordering field of OAuthRefreshToken.
type OAuthRefreshTokenOrderField struct {
	field    string
	toCursor func(*OAuthRefreshToken) Cursor
}

// OAuthRefreshTokenOrder defines the ordering of OAuthRefreshToken.
type OAuthRefreshTokenOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *OAuthRefreshTokenOrderField `json:"field"`
}

// DefaultOAuthRefreshTokenOrder is the default ordering of OAuthRefreshToken.
var DefaultOAuthRefreshTokenOrder = &OAuthRefreshTokenOrder{
	Direction: OrderDirectionAsc,
	Field: &OAuthRefreshTokenOrderField{
		field: oauthrefreshtoken.FieldID,
		toCursor: func(ort *OAuthRefreshToken) Cursor {
			return Cursor{ID: ort.ID}
		},
	},
}

// ToEdge converts OAuthRefreshToken into OAuthRefreshTokenEdge.
func (ort *OAuthRefreshToken) ToEdge(order *OAuthRefreshTokenOrder) *OAuthRefreshTokenEdge {
	if order == nil {
		order = DefaultOAuthRefreshTokenOrder
	}
	return &OAuthRefreshTokenEdge{
		Node:   ort,
		Cursor: order.Field.toCursor(ort),
	}
}

// OAuthSessionEdge is the edge representation of OAuthSession.
type OAuthSessionEdge struct {
	Node   *OAuthSession `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// OAuthSessionConnection is the connection containing edges to OAuthSession.
type OAuthSessionConnection struct {
	Edges      []*OAuthSessionEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *OAuthSessionConnection) build(nodes []*OAuthSession, pager *oauthsessionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OAuthSession
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OAuthSession {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OAuthSession {
			return nodes[i]
		}
	}
	c.Edges = make([]*OAuthSessionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OAuthSessionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OAuthSessionPaginateOption enables pagination customization.
type OAuthSessionPaginateOption func(*oauthsessionPager) error

// WithOAuthSessionOrder configures pagination ordering.
func WithOAuthSessionOrder(order *OAuthSessionOrder) OAuthSessionPaginateOption {
	if order == nil {
		order = DefaultOAuthSessionOrder
	}
	o := *order
	return func(pager *oauthsessionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOAuthSessionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOAuthSessionFilter configures pagination filter.
func WithOAuthSessionFilter(filter func(*OAuthSessionQuery) (*OAuthSessionQuery, error)) OAuthSessionPaginateOption {
	return func(pager *oauthsessionPager) error {
		if filter == nil {
			return errors.New("OAuthSessionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type oauthsessionPager struct {
	order  *OAuthSessionOrder
	filter func(*OAuthSessionQuery) (*OAuthSessionQuery, error)
}

func newOAuthSessionPager(opts []OAuthSessionPaginateOption) (*oauthsessionPager, error) {
	pager := &oauthsessionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOAuthSessionOrder
	}
	return pager, nil
}

func (p *oauthsessionPager) applyFilter(query *OAuthSessionQuery) (*OAuthSessionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *oauthsessionPager) toCursor(os *OAuthSession) Cursor {
	return p.order.Field.toCursor(os)
}

func (p *oauthsessionPager) applyCursors(query *OAuthSessionQuery, after, before *Cursor) *OAuthSessionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOAuthSessionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *oauthsessionPager) applyOrder(query *OAuthSessionQuery, reverse bool) *OAuthSessionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOAuthSessionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOAuthSessionOrder.Field.field))
	}
	return query
}

func (p *oauthsessionPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOAuthSessionOrder.Field {
			b.Comma().Ident(DefaultOAuthSessionOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OAuthSession.
func (os *OAuthSessionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OAuthSessionPaginateOption,
) (*OAuthSessionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOAuthSessionPager(opts)
	if err != nil {
		return nil, err
	}
	if os, err = pager.applyFilter(os); err != nil {
		return nil, err
	}
	conn := &OAuthSessionConnection{Edges: []*OAuthSessionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = os.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	os = pager.applyCursors(os, after, before)
	os = pager.applyOrder(os, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		os.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := os.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := os.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OAuthSessionOrderField defines the ordering field of OAuthSession.
type OAuthSessionOrderField struct {
	field    string
	toCursor func(*OAuthSession) Cursor
}

// OAuthSessionOrder defines the ordering of OAuthSession.
type OAuthSessionOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *OAuthSessionOrderField `json:"field"`
}

// DefaultOAuthSessionOrder is the default ordering of OAuthSession.
var DefaultOAuthSessionOrder = &OAuthSessionOrder{
	Direction: OrderDirectionAsc,
	Field: &OAuthSessionOrderField{
		field: oauthsession.FieldID,
		toCursor: func(os *OAuthSession) Cursor {
			return Cursor{ID: os.ID}
		},
	},
}

// ToEdge converts OAuthSession into OAuthSessionEdge.
func (os *OAuthSession) ToEdge(order *OAuthSessionOrder) *OAuthSessionEdge {
	if order == nil {
		order = DefaultOAuthSessionOrder
	}
	return &OAuthSessionEdge{
		Node:   os,
		Cursor: order.Field.toCursor(os),
	}
}

// OIDCAuthCodeEdge is the edge representation of OIDCAuthCode.
type OIDCAuthCodeEdge struct {
	Node   *OIDCAuthCode `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// OIDCAuthCodeConnection is the connection containing edges to OIDCAuthCode.
type OIDCAuthCodeConnection struct {
	Edges      []*OIDCAuthCodeEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *OIDCAuthCodeConnection) build(nodes []*OIDCAuthCode, pager *oidcauthcodePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OIDCAuthCode
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OIDCAuthCode {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OIDCAuthCode {
			return nodes[i]
		}
	}
	c.Edges = make([]*OIDCAuthCodeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OIDCAuthCodeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OIDCAuthCodePaginateOption enables pagination customization.
type OIDCAuthCodePaginateOption func(*oidcauthcodePager) error

// WithOIDCAuthCodeOrder configures pagination ordering.
func WithOIDCAuthCodeOrder(order *OIDCAuthCodeOrder) OIDCAuthCodePaginateOption {
	if order == nil {
		order = DefaultOIDCAuthCodeOrder
	}
	o := *order
	return func(pager *oidcauthcodePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOIDCAuthCodeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOIDCAuthCodeFilter configures pagination filter.
func WithOIDCAuthCodeFilter(filter func(*OIDCAuthCodeQuery) (*OIDCAuthCodeQuery, error)) OIDCAuthCodePaginateOption {
	return func(pager *oidcauthcodePager) error {
		if filter == nil {
			return errors.New("OIDCAuthCodeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type oidcauthcodePager struct {
	order  *OIDCAuthCodeOrder
	filter func(*OIDCAuthCodeQuery) (*OIDCAuthCodeQuery, error)
}

func newOIDCAuthCodePager(opts []OIDCAuthCodePaginateOption) (*oidcauthcodePager, error) {
	pager := &oidcauthcodePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOIDCAuthCodeOrder
	}
	return pager, nil
}

func (p *oidcauthcodePager) applyFilter(query *OIDCAuthCodeQuery) (*OIDCAuthCodeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *oidcauthcodePager) toCursor(oac *OIDCAuthCode) Cursor {
	return p.order.Field.toCursor(oac)
}

func (p *oidcauthcodePager) applyCursors(query *OIDCAuthCodeQuery, after, before *Cursor) *OIDCAuthCodeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultOIDCAuthCodeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *oidcauthcodePager) applyOrder(query *OIDCAuthCodeQuery, reverse bool) *OIDCAuthCodeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultOIDCAuthCodeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultOIDCAuthCodeOrder.Field.field))
	}
	return query
}

func (p *oidcauthcodePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOIDCAuthCodeOrder.Field {
			b.Comma().Ident(DefaultOIDCAuthCodeOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OIDCAuthCode.
func (oac *OIDCAuthCodeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OIDCAuthCodePaginateOption,
) (*OIDCAuthCodeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOIDCAuthCodePager(opts)
	if err != nil {
		return nil, err
	}
	if oac, err = pager.applyFilter(oac); err != nil {
		return nil, err
	}
	conn := &OIDCAuthCodeConnection{Edges: []*OIDCAuthCodeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = oac.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	oac = pager.applyCursors(oac, after, before)
	oac = pager.applyOrder(oac, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		oac.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := oac.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := oac.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OIDCAuthCodeOrderField defines the ordering field of OIDCAuthCode.
type OIDCAuthCodeOrderField struct {
	field    string
	toCursor func(*OIDCAuthCode) Cursor
}

// OIDCAuthCodeOrder defines the ordering of OIDCAuthCode.
type OIDCAuthCodeOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *OIDCAuthCodeOrderField `json:"field"`
}

// DefaultOIDCAuthCodeOrder is the default ordering of OIDCAuthCode.
var DefaultOIDCAuthCodeOrder = &OIDCAuthCodeOrder{
	Direction: OrderDirectionAsc,
	Field: &OIDCAuthCodeOrderField{
		field: oidcauthcode.FieldID,
		toCursor: func(oac *OIDCAuthCode) Cursor {
			return Cursor{ID: oac.ID}
		},
	},
}

// ToEdge converts OIDCAuthCode into OIDCAuthCodeEdge.
func (oac *OIDCAuthCode) ToEdge(order *OIDCAuthCodeOrder) *OIDCAuthCodeEdge {
	if order == nil {
		order = DefaultOIDCAuthCodeOrder
	}
	return &OIDCAuthCodeEdge{
		Node:   oac,
		Cursor: order.Field.toCursor(oac),
	}
}

// PKCEEdge is the edge representation of PKCE.
type PKCEEdge struct {
	Node   *PKCE  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// PKCEConnection is the connection containing edges to PKCE.
type PKCEConnection struct {
	Edges      []*PKCEEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *PKCEConnection) build(nodes []*PKCE, pager *pkcePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PKCE
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PKCE {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PKCE {
			return nodes[i]
		}
	}
	c.Edges = make([]*PKCEEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PKCEEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PKCEPaginateOption enables pagination customization.
type PKCEPaginateOption func(*pkcePager) error

// WithPKCEOrder configures pagination ordering.
func WithPKCEOrder(order *PKCEOrder) PKCEPaginateOption {
	if order == nil {
		order = DefaultPKCEOrder
	}
	o := *order
	return func(pager *pkcePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPKCEOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPKCEFilter configures pagination filter.
func WithPKCEFilter(filter func(*PKCEQuery) (*PKCEQuery, error)) PKCEPaginateOption {
	return func(pager *pkcePager) error {
		if filter == nil {
			return errors.New("PKCEQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type pkcePager struct {
	order  *PKCEOrder
	filter func(*PKCEQuery) (*PKCEQuery, error)
}

func newPKCEPager(opts []PKCEPaginateOption) (*pkcePager, error) {
	pager := &pkcePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPKCEOrder
	}
	return pager, nil
}

func (p *pkcePager) applyFilter(query *PKCEQuery) (*PKCEQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *pkcePager) toCursor(pk *PKCE) Cursor {
	return p.order.Field.toCursor(pk)
}

func (p *pkcePager) applyCursors(query *PKCEQuery, after, before *Cursor) *PKCEQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultPKCEOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *pkcePager) applyOrder(query *PKCEQuery, reverse bool) *PKCEQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultPKCEOrder.Field {
		query = query.Order(direction.orderFunc(DefaultPKCEOrder.Field.field))
	}
	return query
}

func (p *pkcePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPKCEOrder.Field {
			b.Comma().Ident(DefaultPKCEOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PKCE.
func (pk *PKCEQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PKCEPaginateOption,
) (*PKCEConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPKCEPager(opts)
	if err != nil {
		return nil, err
	}
	if pk, err = pager.applyFilter(pk); err != nil {
		return nil, err
	}
	conn := &PKCEConnection{Edges: []*PKCEEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pk.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	pk = pager.applyCursors(pk, after, before)
	pk = pager.applyOrder(pk, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		pk.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pk.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := pk.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PKCEOrderField defines the ordering field of PKCE.
type PKCEOrderField struct {
	field    string
	toCursor func(*PKCE) Cursor
}

// PKCEOrder defines the ordering of PKCE.
type PKCEOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *PKCEOrderField `json:"field"`
}

// DefaultPKCEOrder is the default ordering of PKCE.
var DefaultPKCEOrder = &PKCEOrder{
	Direction: OrderDirectionAsc,
	Field: &PKCEOrderField{
		field: pkce.FieldID,
		toCursor: func(pk *PKCE) Cursor {
			return Cursor{ID: pk.ID}
		},
	},
}

// ToEdge converts PKCE into PKCEEdge.
func (pk *PKCE) ToEdge(order *PKCEOrder) *PKCEEdge {
	if order == nil {
		order = DefaultPKCEOrder
	}
	return &PKCEEdge{
		Node:   pk,
		Cursor: order.Field.toCursor(pk),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

func (p *userPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
