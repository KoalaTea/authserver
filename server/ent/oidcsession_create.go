// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/oidcsession"
)

// OIDCSessionCreate is the builder for creating a OIDCSession entity.
type OIDCSessionCreate struct {
	config
	mutation *OIDCSessionMutation
	hooks    []Hook
}

// SetIssuer sets the "issuer" field.
func (osc *OIDCSessionCreate) SetIssuer(s string) *OIDCSessionCreate {
	osc.mutation.SetIssuer(s)
	return osc
}

// SetSubject sets the "subject" field.
func (osc *OIDCSessionCreate) SetSubject(s string) *OIDCSessionCreate {
	osc.mutation.SetSubject(s)
	return osc
}

// SetAudiences sets the "audiences" field.
func (osc *OIDCSessionCreate) SetAudiences(s []string) *OIDCSessionCreate {
	osc.mutation.SetAudiences(s)
	return osc
}

// SetExpiresAt sets the "expires_at" field.
func (osc *OIDCSessionCreate) SetExpiresAt(t time.Time) *OIDCSessionCreate {
	osc.mutation.SetExpiresAt(t)
	return osc
}

// SetIssuedAt sets the "issued_at" field.
func (osc *OIDCSessionCreate) SetIssuedAt(t time.Time) *OIDCSessionCreate {
	osc.mutation.SetIssuedAt(t)
	return osc
}

// SetRequestedAt sets the "requested_at" field.
func (osc *OIDCSessionCreate) SetRequestedAt(t time.Time) *OIDCSessionCreate {
	osc.mutation.SetRequestedAt(t)
	return osc
}

// SetAuthTime sets the "auth_time" field.
func (osc *OIDCSessionCreate) SetAuthTime(t time.Time) *OIDCSessionCreate {
	osc.mutation.SetAuthTime(t)
	return osc
}

// Mutation returns the OIDCSessionMutation object of the builder.
func (osc *OIDCSessionCreate) Mutation() *OIDCSessionMutation {
	return osc.mutation
}

// Save creates the OIDCSession in the database.
func (osc *OIDCSessionCreate) Save(ctx context.Context) (*OIDCSession, error) {
	var (
		err  error
		node *OIDCSession
	)
	if len(osc.hooks) == 0 {
		if err = osc.check(); err != nil {
			return nil, err
		}
		node, err = osc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OIDCSessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = osc.check(); err != nil {
				return nil, err
			}
			osc.mutation = mutation
			if node, err = osc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(osc.hooks) - 1; i >= 0; i-- {
			if osc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = osc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, osc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OIDCSession)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OIDCSessionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OIDCSessionCreate) SaveX(ctx context.Context) *OIDCSession {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OIDCSessionCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OIDCSessionCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OIDCSessionCreate) check() error {
	if _, ok := osc.mutation.Issuer(); !ok {
		return &ValidationError{Name: "issuer", err: errors.New(`ent: missing required field "OIDCSession.issuer"`)}
	}
	if _, ok := osc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "OIDCSession.subject"`)}
	}
	if _, ok := osc.mutation.Audiences(); !ok {
		return &ValidationError{Name: "audiences", err: errors.New(`ent: missing required field "OIDCSession.audiences"`)}
	}
	if _, ok := osc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "OIDCSession.expires_at"`)}
	}
	if _, ok := osc.mutation.IssuedAt(); !ok {
		return &ValidationError{Name: "issued_at", err: errors.New(`ent: missing required field "OIDCSession.issued_at"`)}
	}
	if _, ok := osc.mutation.RequestedAt(); !ok {
		return &ValidationError{Name: "requested_at", err: errors.New(`ent: missing required field "OIDCSession.requested_at"`)}
	}
	if _, ok := osc.mutation.AuthTime(); !ok {
		return &ValidationError{Name: "auth_time", err: errors.New(`ent: missing required field "OIDCSession.auth_time"`)}
	}
	return nil
}

func (osc *OIDCSessionCreate) sqlSave(ctx context.Context) (*OIDCSession, error) {
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (osc *OIDCSessionCreate) createSpec() (*OIDCSession, *sqlgraph.CreateSpec) {
	var (
		_node = &OIDCSession{config: osc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: oidcsession.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oidcsession.FieldID,
			},
		}
	)
	if value, ok := osc.mutation.Issuer(); ok {
		_spec.SetField(oidcsession.FieldIssuer, field.TypeString, value)
		_node.Issuer = value
	}
	if value, ok := osc.mutation.Subject(); ok {
		_spec.SetField(oidcsession.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := osc.mutation.Audiences(); ok {
		_spec.SetField(oidcsession.FieldAudiences, field.TypeJSON, value)
		_node.Audiences = value
	}
	if value, ok := osc.mutation.ExpiresAt(); ok {
		_spec.SetField(oidcsession.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := osc.mutation.IssuedAt(); ok {
		_spec.SetField(oidcsession.FieldIssuedAt, field.TypeTime, value)
		_node.IssuedAt = value
	}
	if value, ok := osc.mutation.RequestedAt(); ok {
		_spec.SetField(oidcsession.FieldRequestedAt, field.TypeTime, value)
		_node.RequestedAt = value
	}
	if value, ok := osc.mutation.AuthTime(); ok {
		_spec.SetField(oidcsession.FieldAuthTime, field.TypeTime, value)
		_node.AuthTime = value
	}
	return _node, _spec
}

// OIDCSessionCreateBulk is the builder for creating many OIDCSession entities in bulk.
type OIDCSessionCreateBulk struct {
	config
	builders []*OIDCSessionCreate
}

// Save creates the OIDCSession entities in the database.
func (oscb *OIDCSessionCreateBulk) Save(ctx context.Context) ([]*OIDCSession, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OIDCSession, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OIDCSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OIDCSessionCreateBulk) SaveX(ctx context.Context) []*OIDCSession {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OIDCSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OIDCSessionCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}
