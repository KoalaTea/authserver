// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/koalatea/authserver/server/ent/denylistedjti"
)

// DenyListedJTI is the model entity for the DenyListedJTI schema.
type DenyListedJTI struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Jti holds the value of the "jti" field.
	Jti string `json:"jti,omitempty"`
	// Expiration holds the value of the "expiration" field.
	Expiration time.Time `json:"expiration,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DenyListedJTI) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case denylistedjti.FieldID:
			values[i] = new(sql.NullInt64)
		case denylistedjti.FieldJti:
			values[i] = new(sql.NullString)
		case denylistedjti.FieldExpiration:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DenyListedJTI", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DenyListedJTI fields.
func (dlj *DenyListedJTI) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case denylistedjti.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dlj.ID = int(value.Int64)
		case denylistedjti.FieldJti:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jti", values[i])
			} else if value.Valid {
				dlj.Jti = value.String
			}
		case denylistedjti.FieldExpiration:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiration", values[i])
			} else if value.Valid {
				dlj.Expiration = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DenyListedJTI.
// Note that you need to call DenyListedJTI.Unwrap() before calling this method if this DenyListedJTI
// was returned from a transaction, and the transaction was committed or rolled back.
func (dlj *DenyListedJTI) Update() *DenyListedJTIUpdateOne {
	return (&DenyListedJTIClient{config: dlj.config}).UpdateOne(dlj)
}

// Unwrap unwraps the DenyListedJTI entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dlj *DenyListedJTI) Unwrap() *DenyListedJTI {
	_tx, ok := dlj.config.driver.(*txDriver)
	if !ok {
		panic("ent: DenyListedJTI is not a transactional entity")
	}
	dlj.config.driver = _tx.drv
	return dlj
}

// String implements the fmt.Stringer.
func (dlj *DenyListedJTI) String() string {
	var builder strings.Builder
	builder.WriteString("DenyListedJTI(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dlj.ID))
	builder.WriteString("jti=")
	builder.WriteString(dlj.Jti)
	builder.WriteString(", ")
	builder.WriteString("expiration=")
	builder.WriteString(dlj.Expiration.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DenyListedJTIs is a parsable slice of DenyListedJTI.
type DenyListedJTIs []*DenyListedJTI

func (dlj DenyListedJTIs) config(cfg config) {
	for _i := range dlj {
		dlj[_i].config = cfg
	}
}
