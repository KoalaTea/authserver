// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/koalatea/authserver/server/ent/oidcsession"
)

// OIDCSession is the model entity for the OIDCSession schema.
type OIDCSession struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Issuer holds the value of the "issuer" field.
	Issuer string `json:"issuer,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Audiences holds the value of the "audiences" field.
	Audiences []string `json:"audiences,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// IssuedAt holds the value of the "issued_at" field.
	IssuedAt time.Time `json:"issued_at,omitempty"`
	// RequestedAt holds the value of the "requested_at" field.
	RequestedAt time.Time `json:"requested_at,omitempty"`
	// AuthTime holds the value of the "auth_time" field.
	AuthTime time.Time `json:"auth_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OIDCSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oidcsession.FieldAudiences:
			values[i] = new([]byte)
		case oidcsession.FieldID:
			values[i] = new(sql.NullInt64)
		case oidcsession.FieldIssuer, oidcsession.FieldSubject:
			values[i] = new(sql.NullString)
		case oidcsession.FieldExpiresAt, oidcsession.FieldIssuedAt, oidcsession.FieldRequestedAt, oidcsession.FieldAuthTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OIDCSession", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OIDCSession fields.
func (os *OIDCSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oidcsession.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			os.ID = int(value.Int64)
		case oidcsession.FieldIssuer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issuer", values[i])
			} else if value.Valid {
				os.Issuer = value.String
			}
		case oidcsession.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				os.Subject = value.String
			}
		case oidcsession.FieldAudiences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field audiences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &os.Audiences); err != nil {
					return fmt.Errorf("unmarshal field audiences: %w", err)
				}
			}
		case oidcsession.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				os.ExpiresAt = value.Time
			}
		case oidcsession.FieldIssuedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field issued_at", values[i])
			} else if value.Valid {
				os.IssuedAt = value.Time
			}
		case oidcsession.FieldRequestedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field requested_at", values[i])
			} else if value.Valid {
				os.RequestedAt = value.Time
			}
		case oidcsession.FieldAuthTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field auth_time", values[i])
			} else if value.Valid {
				os.AuthTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OIDCSession.
// Note that you need to call OIDCSession.Unwrap() before calling this method if this OIDCSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OIDCSession) Update() *OIDCSessionUpdateOne {
	return (&OIDCSessionClient{config: os.config}).UpdateOne(os)
}

// Unwrap unwraps the OIDCSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OIDCSession) Unwrap() *OIDCSession {
	_tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("ent: OIDCSession is not a transactional entity")
	}
	os.config.driver = _tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OIDCSession) String() string {
	var builder strings.Builder
	builder.WriteString("OIDCSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", os.ID))
	builder.WriteString("issuer=")
	builder.WriteString(os.Issuer)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(os.Subject)
	builder.WriteString(", ")
	builder.WriteString("audiences=")
	builder.WriteString(fmt.Sprintf("%v", os.Audiences))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(os.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("issued_at=")
	builder.WriteString(os.IssuedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("requested_at=")
	builder.WriteString(os.RequestedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("auth_time=")
	builder.WriteString(os.AuthTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OIDCSessions is a parsable slice of OIDCSession.
type OIDCSessions []*OIDCSession

func (os OIDCSessions) config(cfg config) {
	for _i := range os {
		os[_i].config = cfg
	}
}
