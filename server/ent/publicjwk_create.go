// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/publicjwk"
)

// PublicJWKCreate is the builder for creating a PublicJWK entity.
type PublicJWKCreate struct {
	config
	mutation *PublicJWKMutation
	hooks    []Hook
}

// SetSid sets the "sid" field.
func (pjc *PublicJWKCreate) SetSid(s string) *PublicJWKCreate {
	pjc.mutation.SetSid(s)
	return pjc
}

// SetKid sets the "kid" field.
func (pjc *PublicJWKCreate) SetKid(s string) *PublicJWKCreate {
	pjc.mutation.SetKid(s)
	return pjc
}

// SetKey sets the "key" field.
func (pjc *PublicJWKCreate) SetKey(s string) *PublicJWKCreate {
	pjc.mutation.SetKey(s)
	return pjc
}

// SetIssuer sets the "issuer" field.
func (pjc *PublicJWKCreate) SetIssuer(s string) *PublicJWKCreate {
	pjc.mutation.SetIssuer(s)
	return pjc
}

// SetScopes sets the "scopes" field.
func (pjc *PublicJWKCreate) SetScopes(s []string) *PublicJWKCreate {
	pjc.mutation.SetScopes(s)
	return pjc
}

// Mutation returns the PublicJWKMutation object of the builder.
func (pjc *PublicJWKCreate) Mutation() *PublicJWKMutation {
	return pjc.mutation
}

// Save creates the PublicJWK in the database.
func (pjc *PublicJWKCreate) Save(ctx context.Context) (*PublicJWK, error) {
	return withHooks(ctx, pjc.sqlSave, pjc.mutation, pjc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pjc *PublicJWKCreate) SaveX(ctx context.Context) *PublicJWK {
	v, err := pjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pjc *PublicJWKCreate) Exec(ctx context.Context) error {
	_, err := pjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjc *PublicJWKCreate) ExecX(ctx context.Context) {
	if err := pjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pjc *PublicJWKCreate) check() error {
	if _, ok := pjc.mutation.Sid(); !ok {
		return &ValidationError{Name: "sid", err: errors.New(`ent: missing required field "PublicJWK.sid"`)}
	}
	if _, ok := pjc.mutation.Kid(); !ok {
		return &ValidationError{Name: "kid", err: errors.New(`ent: missing required field "PublicJWK.kid"`)}
	}
	if _, ok := pjc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "PublicJWK.key"`)}
	}
	if _, ok := pjc.mutation.Issuer(); !ok {
		return &ValidationError{Name: "issuer", err: errors.New(`ent: missing required field "PublicJWK.issuer"`)}
	}
	if _, ok := pjc.mutation.Scopes(); !ok {
		return &ValidationError{Name: "scopes", err: errors.New(`ent: missing required field "PublicJWK.scopes"`)}
	}
	return nil
}

func (pjc *PublicJWKCreate) sqlSave(ctx context.Context) (*PublicJWK, error) {
	if err := pjc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pjc.mutation.id = &_node.ID
	pjc.mutation.done = true
	return _node, nil
}

func (pjc *PublicJWKCreate) createSpec() (*PublicJWK, *sqlgraph.CreateSpec) {
	var (
		_node = &PublicJWK{config: pjc.config}
		_spec = sqlgraph.NewCreateSpec(publicjwk.Table, sqlgraph.NewFieldSpec(publicjwk.FieldID, field.TypeInt))
	)
	if value, ok := pjc.mutation.Sid(); ok {
		_spec.SetField(publicjwk.FieldSid, field.TypeString, value)
		_node.Sid = value
	}
	if value, ok := pjc.mutation.Kid(); ok {
		_spec.SetField(publicjwk.FieldKid, field.TypeString, value)
		_node.Kid = value
	}
	if value, ok := pjc.mutation.Key(); ok {
		_spec.SetField(publicjwk.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := pjc.mutation.Issuer(); ok {
		_spec.SetField(publicjwk.FieldIssuer, field.TypeString, value)
		_node.Issuer = value
	}
	if value, ok := pjc.mutation.Scopes(); ok {
		_spec.SetField(publicjwk.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	return _node, _spec
}

// PublicJWKCreateBulk is the builder for creating many PublicJWK entities in bulk.
type PublicJWKCreateBulk struct {
	config
	err      error
	builders []*PublicJWKCreate
}

// Save creates the PublicJWK entities in the database.
func (pjcb *PublicJWKCreateBulk) Save(ctx context.Context) ([]*PublicJWK, error) {
	if pjcb.err != nil {
		return nil, pjcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pjcb.builders))
	nodes := make([]*PublicJWK, len(pjcb.builders))
	mutators := make([]Mutator, len(pjcb.builders))
	for i := range pjcb.builders {
		func(i int, root context.Context) {
			builder := pjcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PublicJWKMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pjcb *PublicJWKCreateBulk) SaveX(ctx context.Context) []*PublicJWK {
	v, err := pjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pjcb *PublicJWKCreateBulk) Exec(ctx context.Context) error {
	_, err := pjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjcb *PublicJWKCreateBulk) ExecX(ctx context.Context) {
	if err := pjcb.Exec(ctx); err != nil {
		panic(err)
	}
}
