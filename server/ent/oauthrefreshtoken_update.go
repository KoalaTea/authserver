// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/oauthrefreshtoken"
	"github.com/koalatea/authserver/server/ent/oauthsession"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// OAuthRefreshTokenUpdate is the builder for updating OAuthRefreshToken entities.
type OAuthRefreshTokenUpdate struct {
	config
	hooks    []Hook
	mutation *OAuthRefreshTokenMutation
}

// Where appends a list predicates to the OAuthRefreshTokenUpdate builder.
func (ortu *OAuthRefreshTokenUpdate) Where(ps ...predicate.OAuthRefreshToken) *OAuthRefreshTokenUpdate {
	ortu.mutation.Where(ps...)
	return ortu
}

// SetSignature sets the "signature" field.
func (ortu *OAuthRefreshTokenUpdate) SetSignature(s string) *OAuthRefreshTokenUpdate {
	ortu.mutation.SetSignature(s)
	return ortu
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (ortu *OAuthRefreshTokenUpdate) SetNillableSignature(s *string) *OAuthRefreshTokenUpdate {
	if s != nil {
		ortu.SetSignature(*s)
	}
	return ortu
}

// SetSessionID sets the "session" edge to the OAuthSession entity by ID.
func (ortu *OAuthRefreshTokenUpdate) SetSessionID(id int) *OAuthRefreshTokenUpdate {
	ortu.mutation.SetSessionID(id)
	return ortu
}

// SetNillableSessionID sets the "session" edge to the OAuthSession entity by ID if the given value is not nil.
func (ortu *OAuthRefreshTokenUpdate) SetNillableSessionID(id *int) *OAuthRefreshTokenUpdate {
	if id != nil {
		ortu = ortu.SetSessionID(*id)
	}
	return ortu
}

// SetSession sets the "session" edge to the OAuthSession entity.
func (ortu *OAuthRefreshTokenUpdate) SetSession(o *OAuthSession) *OAuthRefreshTokenUpdate {
	return ortu.SetSessionID(o.ID)
}

// Mutation returns the OAuthRefreshTokenMutation object of the builder.
func (ortu *OAuthRefreshTokenUpdate) Mutation() *OAuthRefreshTokenMutation {
	return ortu.mutation
}

// ClearSession clears the "session" edge to the OAuthSession entity.
func (ortu *OAuthRefreshTokenUpdate) ClearSession() *OAuthRefreshTokenUpdate {
	ortu.mutation.ClearSession()
	return ortu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ortu *OAuthRefreshTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ortu.sqlSave, ortu.mutation, ortu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ortu *OAuthRefreshTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := ortu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ortu *OAuthRefreshTokenUpdate) Exec(ctx context.Context) error {
	_, err := ortu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ortu *OAuthRefreshTokenUpdate) ExecX(ctx context.Context) {
	if err := ortu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ortu *OAuthRefreshTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthrefreshtoken.Table, oauthrefreshtoken.Columns, sqlgraph.NewFieldSpec(oauthrefreshtoken.FieldID, field.TypeInt))
	if ps := ortu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ortu.mutation.Signature(); ok {
		_spec.SetField(oauthrefreshtoken.FieldSignature, field.TypeString, value)
	}
	if ortu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthrefreshtoken.SessionTable,
			Columns: []string{oauthrefreshtoken.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ortu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthrefreshtoken.SessionTable,
			Columns: []string{oauthrefreshtoken.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ortu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthrefreshtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ortu.mutation.done = true
	return n, nil
}

// OAuthRefreshTokenUpdateOne is the builder for updating a single OAuthRefreshToken entity.
type OAuthRefreshTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OAuthRefreshTokenMutation
}

// SetSignature sets the "signature" field.
func (ortuo *OAuthRefreshTokenUpdateOne) SetSignature(s string) *OAuthRefreshTokenUpdateOne {
	ortuo.mutation.SetSignature(s)
	return ortuo
}

// SetNillableSignature sets the "signature" field if the given value is not nil.
func (ortuo *OAuthRefreshTokenUpdateOne) SetNillableSignature(s *string) *OAuthRefreshTokenUpdateOne {
	if s != nil {
		ortuo.SetSignature(*s)
	}
	return ortuo
}

// SetSessionID sets the "session" edge to the OAuthSession entity by ID.
func (ortuo *OAuthRefreshTokenUpdateOne) SetSessionID(id int) *OAuthRefreshTokenUpdateOne {
	ortuo.mutation.SetSessionID(id)
	return ortuo
}

// SetNillableSessionID sets the "session" edge to the OAuthSession entity by ID if the given value is not nil.
func (ortuo *OAuthRefreshTokenUpdateOne) SetNillableSessionID(id *int) *OAuthRefreshTokenUpdateOne {
	if id != nil {
		ortuo = ortuo.SetSessionID(*id)
	}
	return ortuo
}

// SetSession sets the "session" edge to the OAuthSession entity.
func (ortuo *OAuthRefreshTokenUpdateOne) SetSession(o *OAuthSession) *OAuthRefreshTokenUpdateOne {
	return ortuo.SetSessionID(o.ID)
}

// Mutation returns the OAuthRefreshTokenMutation object of the builder.
func (ortuo *OAuthRefreshTokenUpdateOne) Mutation() *OAuthRefreshTokenMutation {
	return ortuo.mutation
}

// ClearSession clears the "session" edge to the OAuthSession entity.
func (ortuo *OAuthRefreshTokenUpdateOne) ClearSession() *OAuthRefreshTokenUpdateOne {
	ortuo.mutation.ClearSession()
	return ortuo
}

// Where appends a list predicates to the OAuthRefreshTokenUpdate builder.
func (ortuo *OAuthRefreshTokenUpdateOne) Where(ps ...predicate.OAuthRefreshToken) *OAuthRefreshTokenUpdateOne {
	ortuo.mutation.Where(ps...)
	return ortuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ortuo *OAuthRefreshTokenUpdateOne) Select(field string, fields ...string) *OAuthRefreshTokenUpdateOne {
	ortuo.fields = append([]string{field}, fields...)
	return ortuo
}

// Save executes the query and returns the updated OAuthRefreshToken entity.
func (ortuo *OAuthRefreshTokenUpdateOne) Save(ctx context.Context) (*OAuthRefreshToken, error) {
	return withHooks(ctx, ortuo.sqlSave, ortuo.mutation, ortuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ortuo *OAuthRefreshTokenUpdateOne) SaveX(ctx context.Context) *OAuthRefreshToken {
	node, err := ortuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ortuo *OAuthRefreshTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := ortuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ortuo *OAuthRefreshTokenUpdateOne) ExecX(ctx context.Context) {
	if err := ortuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ortuo *OAuthRefreshTokenUpdateOne) sqlSave(ctx context.Context) (_node *OAuthRefreshToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthrefreshtoken.Table, oauthrefreshtoken.Columns, sqlgraph.NewFieldSpec(oauthrefreshtoken.FieldID, field.TypeInt))
	id, ok := ortuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthRefreshToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ortuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthrefreshtoken.FieldID)
		for _, f := range fields {
			if !oauthrefreshtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthrefreshtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ortuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ortuo.mutation.Signature(); ok {
		_spec.SetField(oauthrefreshtoken.FieldSignature, field.TypeString, value)
	}
	if ortuo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthrefreshtoken.SessionTable,
			Columns: []string{oauthrefreshtoken.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ortuo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthrefreshtoken.SessionTable,
			Columns: []string{oauthrefreshtoken.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OAuthRefreshToken{config: ortuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ortuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthrefreshtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ortuo.mutation.done = true
	return _node, nil
}
