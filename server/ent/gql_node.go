// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"
	"sync"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/schema"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
	"github.com/koalatea/authserver/server/ent/authcode"
	"github.com/koalatea/authserver/server/ent/cert"
	"github.com/koalatea/authserver/server/ent/denylistedjti"
	"github.com/koalatea/authserver/server/ent/oauthaccesstoken"
	"github.com/koalatea/authserver/server/ent/oauthclient"
	"github.com/koalatea/authserver/server/ent/oauthparrequest"
	"github.com/koalatea/authserver/server/ent/oauthrefreshtoken"
	"github.com/koalatea/authserver/server/ent/oauthsession"
	"github.com/koalatea/authserver/server/ent/oidcauthcode"
	"github.com/koalatea/authserver/server/ent/pkce"
	"github.com/koalatea/authserver/server/ent/user"
	"golang.org/x/sync/semaphore"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     int      `json:"id,omitempty"`     // node id.
	Type   string   `json:"type,omitempty"`   // node type.
	Fields []*Field `json:"fields,omitempty"` // node fields.
	Edges  []*Edge  `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string `json:"type,omitempty"` // edge type.
	Name string `json:"name,omitempty"` // edge name.
	IDs  []int  `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (ac *AuthCode) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ac.ID,
		Type:   "AuthCode",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(ac.Code); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "code",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ac.Active); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "bool",
		Name:  "active",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "OAuthSession",
		Name: "session",
	}
	err = ac.QuerySession().
		Select(oauthsession.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Cert) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Cert",
		Fields: make([]*Field, 0),
		Edges:  make([]*Edge, 0),
	}
	return node, nil
}

func (dlj *DenyListedJTI) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     dlj.ID,
		Type:   "DenyListedJTI",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(dlj.Jti); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "jti",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dlj.Expiration); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "expiration",
		Value: string(buf),
	}
	return node, nil
}

func (oat *OAuthAccessToken) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     oat.ID,
		Type:   "OAuthAccessToken",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(oat.Signature); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "signature",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "OAuthSession",
		Name: "session",
	}
	err = oat.QuerySession().
		Select(oauthsession.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (oc *OAuthClient) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     oc.ID,
		Type:   "OAuthClient",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(oc.ClientID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "client_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.Secret); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "secret",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.RedirectUris); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "[]string",
		Name:  "redirect_uris",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.ResponseTypes); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "[]string",
		Name:  "response_types",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.GrantTypes); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "[]string",
		Name:  "grant_types",
		Value: string(buf),
	}
	if buf, err = json.Marshal(oc.Scopes); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "[]string",
		Name:  "scopes",
		Value: string(buf),
	}
	return node, nil
}

func (opr *OAuthPARRequest) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     opr.ID,
		Type:   "OAuthPARRequest",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(opr.Request); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "request",
		Value: string(buf),
	}
	return node, nil
}

func (ort *OAuthRefreshToken) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ort.ID,
		Type:   "OAuthRefreshToken",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(ort.Signature); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "signature",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "OAuthSession",
		Name: "session",
	}
	err = ort.QuerySession().
		Select(oauthsession.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (os *OAuthSession) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     os.ID,
		Type:   "OAuthSession",
		Fields: make([]*Field, 13),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(os.Issuer); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "issuer",
		Value: string(buf),
	}
	if buf, err = json.Marshal(os.Subject); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "subject",
		Value: string(buf),
	}
	if buf, err = json.Marshal(os.Audiences); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "[]string",
		Name:  "audiences",
		Value: string(buf),
	}
	if buf, err = json.Marshal(os.ExpiresAt); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "expires_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(os.IssuedAt); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "issued_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(os.RequestedAt); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "time.Time",
		Name:  "requested_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(os.AuthTime); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "time.Time",
		Name:  "auth_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(os.RequestedScopes); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "[]string",
		Name:  "requested_scopes",
		Value: string(buf),
	}
	if buf, err = json.Marshal(os.GrantedScopes); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "[]string",
		Name:  "granted_scopes",
		Value: string(buf),
	}
	if buf, err = json.Marshal(os.RequestedAudiences); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "[]string",
		Name:  "requested_audiences",
		Value: string(buf),
	}
	if buf, err = json.Marshal(os.GrantedAudiences); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "[]string",
		Name:  "granted_audiences",
		Value: string(buf),
	}
	if buf, err = json.Marshal(os.Request); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "string",
		Name:  "request",
		Value: string(buf),
	}
	if buf, err = json.Marshal(os.Form); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "string",
		Name:  "form",
		Value: string(buf),
	}
	return node, nil
}

func (oac *OIDCAuthCode) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     oac.ID,
		Type:   "OIDCAuthCode",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(oac.AuthorizationCode); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "authorization_code",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "OAuthSession",
		Name: "session",
	}
	err = oac.QuerySession().
		Select(oauthsession.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pk *PKCE) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pk.ID,
		Type:   "PKCE",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(pk.Code); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "code",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "OAuthSession",
		Name: "session",
	}
	err = pk.QuerySession().
		Select(oauthsession.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (u *User) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     u.ID,
		Type:   "User",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(u.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "Name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.OAuthID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "OAuthID",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.IsActivated); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "bool",
		Name:  "IsActivated",
		Value: string(buf),
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id int) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, int) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, int) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, int) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id int) (string, error) {
			return c.tables.nodeType(ctx, c.driver, id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(typeResolver))
func (c *Client) Noder(ctx context.Context, id int, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id int) (Noder, error) {
	switch table {
	case authcode.Table:
		query := c.AuthCode.Query().
			Where(authcode.ID(id))
		query, err := query.CollectFields(ctx, "AuthCode")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case cert.Table:
		query := c.Cert.Query().
			Where(cert.ID(id))
		query, err := query.CollectFields(ctx, "Cert")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case denylistedjti.Table:
		query := c.DenyListedJTI.Query().
			Where(denylistedjti.ID(id))
		query, err := query.CollectFields(ctx, "DenyListedJTI")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case oauthaccesstoken.Table:
		query := c.OAuthAccessToken.Query().
			Where(oauthaccesstoken.ID(id))
		query, err := query.CollectFields(ctx, "OAuthAccessToken")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case oauthclient.Table:
		query := c.OAuthClient.Query().
			Where(oauthclient.ID(id))
		query, err := query.CollectFields(ctx, "OAuthClient")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case oauthparrequest.Table:
		query := c.OAuthPARRequest.Query().
			Where(oauthparrequest.ID(id))
		query, err := query.CollectFields(ctx, "OAuthPARRequest")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case oauthrefreshtoken.Table:
		query := c.OAuthRefreshToken.Query().
			Where(oauthrefreshtoken.ID(id))
		query, err := query.CollectFields(ctx, "OAuthRefreshToken")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case oauthsession.Table:
		query := c.OAuthSession.Query().
			Where(oauthsession.ID(id))
		query, err := query.CollectFields(ctx, "OAuthSession")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case oidcauthcode.Table:
		query := c.OIDCAuthCode.Query().
			Where(oidcauthcode.ID(id))
		query, err := query.CollectFields(ctx, "OIDCAuthCode")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case pkce.Table:
		query := c.PKCE.Query().
			Where(pkce.ID(id))
		query, err := query.CollectFields(ctx, "PKCE")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case user.Table:
		query := c.User.Query().
			Where(user.ID(id))
		query, err := query.CollectFields(ctx, "User")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []int, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]int)
	id2idx := make(map[int][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []int) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[int][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case authcode.Table:
		query := c.AuthCode.Query().
			Where(authcode.IDIn(ids...))
		query, err := query.CollectFields(ctx, "AuthCode")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case cert.Table:
		query := c.Cert.Query().
			Where(cert.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Cert")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case denylistedjti.Table:
		query := c.DenyListedJTI.Query().
			Where(denylistedjti.IDIn(ids...))
		query, err := query.CollectFields(ctx, "DenyListedJTI")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case oauthaccesstoken.Table:
		query := c.OAuthAccessToken.Query().
			Where(oauthaccesstoken.IDIn(ids...))
		query, err := query.CollectFields(ctx, "OAuthAccessToken")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case oauthclient.Table:
		query := c.OAuthClient.Query().
			Where(oauthclient.IDIn(ids...))
		query, err := query.CollectFields(ctx, "OAuthClient")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case oauthparrequest.Table:
		query := c.OAuthPARRequest.Query().
			Where(oauthparrequest.IDIn(ids...))
		query, err := query.CollectFields(ctx, "OAuthPARRequest")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case oauthrefreshtoken.Table:
		query := c.OAuthRefreshToken.Query().
			Where(oauthrefreshtoken.IDIn(ids...))
		query, err := query.CollectFields(ctx, "OAuthRefreshToken")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case oauthsession.Table:
		query := c.OAuthSession.Query().
			Where(oauthsession.IDIn(ids...))
		query, err := query.CollectFields(ctx, "OAuthSession")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case oidcauthcode.Table:
		query := c.OIDCAuthCode.Query().
			Where(oidcauthcode.IDIn(ids...))
		query, err := query.CollectFields(ctx, "OIDCAuthCode")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case pkce.Table:
		query := c.PKCE.Query().
			Where(pkce.IDIn(ids...))
		query, err := query.CollectFields(ctx, "PKCE")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case user.Table:
		query := c.User.Query().
			Where(user.IDIn(ids...))
		query, err := query.CollectFields(ctx, "User")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}

type tables struct {
	once  sync.Once
	sem   *semaphore.Weighted
	value atomic.Value
}

func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id int) (string, error) {
	tables, err := t.Load(ctx, drv)
	if err != nil {
		return "", err
	}
	idx := int(id / (1<<32 - 1))
	if idx < 0 || idx >= len(tables) {
		return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
	}
	return tables[idx], nil
}

func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
	if err := t.sem.Acquire(ctx, 1); err != nil {
		return nil, err
	}
	defer t.sem.Release(1)
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	tables, err := t.load(ctx, drv)
	if err == nil {
		t.value.Store(tables)
	}
	return tables, err
}

func (*tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	rows := &sql.Rows{}
	query, args := sql.Dialect(drv.Dialect()).
		Select("type").
		From(sql.Table(schema.TypeTable)).
		OrderBy(sql.Asc("id")).
		Query()
	if err := drv.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var tables []string
	return tables, sql.ScanSlice(rows, &tables)
}
