// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/accessrequest"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// AccessRequestUpdate is the builder for updating AccessRequest entities.
type AccessRequestUpdate struct {
	config
	hooks    []Hook
	mutation *AccessRequestMutation
}

// Where appends a list predicates to the AccessRequestUpdate builder.
func (aru *AccessRequestUpdate) Where(ps ...predicate.AccessRequest) *AccessRequestUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetRequestedScopes sets the "requested_scopes" field.
func (aru *AccessRequestUpdate) SetRequestedScopes(s []string) *AccessRequestUpdate {
	aru.mutation.SetRequestedScopes(s)
	return aru
}

// AppendRequestedScopes appends s to the "requested_scopes" field.
func (aru *AccessRequestUpdate) AppendRequestedScopes(s []string) *AccessRequestUpdate {
	aru.mutation.AppendRequestedScopes(s)
	return aru
}

// SetGrantedScopes sets the "granted_scopes" field.
func (aru *AccessRequestUpdate) SetGrantedScopes(s []string) *AccessRequestUpdate {
	aru.mutation.SetGrantedScopes(s)
	return aru
}

// AppendGrantedScopes appends s to the "granted_scopes" field.
func (aru *AccessRequestUpdate) AppendGrantedScopes(s []string) *AccessRequestUpdate {
	aru.mutation.AppendGrantedScopes(s)
	return aru
}

// SetRequestedAudiences sets the "requested_audiences" field.
func (aru *AccessRequestUpdate) SetRequestedAudiences(s []string) *AccessRequestUpdate {
	aru.mutation.SetRequestedAudiences(s)
	return aru
}

// AppendRequestedAudiences appends s to the "requested_audiences" field.
func (aru *AccessRequestUpdate) AppendRequestedAudiences(s []string) *AccessRequestUpdate {
	aru.mutation.AppendRequestedAudiences(s)
	return aru
}

// SetGrantedAudiences sets the "granted_audiences" field.
func (aru *AccessRequestUpdate) SetGrantedAudiences(s []string) *AccessRequestUpdate {
	aru.mutation.SetGrantedAudiences(s)
	return aru
}

// AppendGrantedAudiences appends s to the "granted_audiences" field.
func (aru *AccessRequestUpdate) AppendGrantedAudiences(s []string) *AccessRequestUpdate {
	aru.mutation.AppendGrantedAudiences(s)
	return aru
}

// SetRequest sets the "request" field.
func (aru *AccessRequestUpdate) SetRequest(s string) *AccessRequestUpdate {
	aru.mutation.SetRequest(s)
	return aru
}

// SetForm sets the "form" field.
func (aru *AccessRequestUpdate) SetForm(s string) *AccessRequestUpdate {
	aru.mutation.SetForm(s)
	return aru
}

// SetActive sets the "active" field.
func (aru *AccessRequestUpdate) SetActive(b bool) *AccessRequestUpdate {
	aru.mutation.SetActive(b)
	return aru
}

// Mutation returns the AccessRequestMutation object of the builder.
func (aru *AccessRequestUpdate) Mutation() *AccessRequestMutation {
	return aru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AccessRequestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aru.hooks) == 0 {
		affected, err = aru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccessRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aru.mutation = mutation
			affected, err = aru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aru.hooks) - 1; i >= 0; i-- {
			if aru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AccessRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AccessRequestUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AccessRequestUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aru *AccessRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accessrequest.Table,
			Columns: accessrequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accessrequest.FieldID,
			},
		},
	}
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.RequestedScopes(); ok {
		_spec.SetField(accessrequest.FieldRequestedScopes, field.TypeJSON, value)
	}
	if value, ok := aru.mutation.AppendedRequestedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accessrequest.FieldRequestedScopes, value)
		})
	}
	if value, ok := aru.mutation.GrantedScopes(); ok {
		_spec.SetField(accessrequest.FieldGrantedScopes, field.TypeJSON, value)
	}
	if value, ok := aru.mutation.AppendedGrantedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accessrequest.FieldGrantedScopes, value)
		})
	}
	if value, ok := aru.mutation.RequestedAudiences(); ok {
		_spec.SetField(accessrequest.FieldRequestedAudiences, field.TypeJSON, value)
	}
	if value, ok := aru.mutation.AppendedRequestedAudiences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accessrequest.FieldRequestedAudiences, value)
		})
	}
	if value, ok := aru.mutation.GrantedAudiences(); ok {
		_spec.SetField(accessrequest.FieldGrantedAudiences, field.TypeJSON, value)
	}
	if value, ok := aru.mutation.AppendedGrantedAudiences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accessrequest.FieldGrantedAudiences, value)
		})
	}
	if value, ok := aru.mutation.Request(); ok {
		_spec.SetField(accessrequest.FieldRequest, field.TypeString, value)
	}
	if value, ok := aru.mutation.Form(); ok {
		_spec.SetField(accessrequest.FieldForm, field.TypeString, value)
	}
	if value, ok := aru.mutation.Active(); ok {
		_spec.SetField(accessrequest.FieldActive, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accessrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AccessRequestUpdateOne is the builder for updating a single AccessRequest entity.
type AccessRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccessRequestMutation
}

// SetRequestedScopes sets the "requested_scopes" field.
func (aruo *AccessRequestUpdateOne) SetRequestedScopes(s []string) *AccessRequestUpdateOne {
	aruo.mutation.SetRequestedScopes(s)
	return aruo
}

// AppendRequestedScopes appends s to the "requested_scopes" field.
func (aruo *AccessRequestUpdateOne) AppendRequestedScopes(s []string) *AccessRequestUpdateOne {
	aruo.mutation.AppendRequestedScopes(s)
	return aruo
}

// SetGrantedScopes sets the "granted_scopes" field.
func (aruo *AccessRequestUpdateOne) SetGrantedScopes(s []string) *AccessRequestUpdateOne {
	aruo.mutation.SetGrantedScopes(s)
	return aruo
}

// AppendGrantedScopes appends s to the "granted_scopes" field.
func (aruo *AccessRequestUpdateOne) AppendGrantedScopes(s []string) *AccessRequestUpdateOne {
	aruo.mutation.AppendGrantedScopes(s)
	return aruo
}

// SetRequestedAudiences sets the "requested_audiences" field.
func (aruo *AccessRequestUpdateOne) SetRequestedAudiences(s []string) *AccessRequestUpdateOne {
	aruo.mutation.SetRequestedAudiences(s)
	return aruo
}

// AppendRequestedAudiences appends s to the "requested_audiences" field.
func (aruo *AccessRequestUpdateOne) AppendRequestedAudiences(s []string) *AccessRequestUpdateOne {
	aruo.mutation.AppendRequestedAudiences(s)
	return aruo
}

// SetGrantedAudiences sets the "granted_audiences" field.
func (aruo *AccessRequestUpdateOne) SetGrantedAudiences(s []string) *AccessRequestUpdateOne {
	aruo.mutation.SetGrantedAudiences(s)
	return aruo
}

// AppendGrantedAudiences appends s to the "granted_audiences" field.
func (aruo *AccessRequestUpdateOne) AppendGrantedAudiences(s []string) *AccessRequestUpdateOne {
	aruo.mutation.AppendGrantedAudiences(s)
	return aruo
}

// SetRequest sets the "request" field.
func (aruo *AccessRequestUpdateOne) SetRequest(s string) *AccessRequestUpdateOne {
	aruo.mutation.SetRequest(s)
	return aruo
}

// SetForm sets the "form" field.
func (aruo *AccessRequestUpdateOne) SetForm(s string) *AccessRequestUpdateOne {
	aruo.mutation.SetForm(s)
	return aruo
}

// SetActive sets the "active" field.
func (aruo *AccessRequestUpdateOne) SetActive(b bool) *AccessRequestUpdateOne {
	aruo.mutation.SetActive(b)
	return aruo
}

// Mutation returns the AccessRequestMutation object of the builder.
func (aruo *AccessRequestUpdateOne) Mutation() *AccessRequestMutation {
	return aruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AccessRequestUpdateOne) Select(field string, fields ...string) *AccessRequestUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AccessRequest entity.
func (aruo *AccessRequestUpdateOne) Save(ctx context.Context) (*AccessRequest, error) {
	var (
		err  error
		node *AccessRequest
	)
	if len(aruo.hooks) == 0 {
		node, err = aruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccessRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aruo.mutation = mutation
			node, err = aruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aruo.hooks) - 1; i >= 0; i-- {
			if aruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AccessRequest)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AccessRequestMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AccessRequestUpdateOne) SaveX(ctx context.Context) *AccessRequest {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AccessRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AccessRequestUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aruo *AccessRequestUpdateOne) sqlSave(ctx context.Context) (_node *AccessRequest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accessrequest.Table,
			Columns: accessrequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accessrequest.FieldID,
			},
		},
	}
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccessRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accessrequest.FieldID)
		for _, f := range fields {
			if !accessrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accessrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.RequestedScopes(); ok {
		_spec.SetField(accessrequest.FieldRequestedScopes, field.TypeJSON, value)
	}
	if value, ok := aruo.mutation.AppendedRequestedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accessrequest.FieldRequestedScopes, value)
		})
	}
	if value, ok := aruo.mutation.GrantedScopes(); ok {
		_spec.SetField(accessrequest.FieldGrantedScopes, field.TypeJSON, value)
	}
	if value, ok := aruo.mutation.AppendedGrantedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accessrequest.FieldGrantedScopes, value)
		})
	}
	if value, ok := aruo.mutation.RequestedAudiences(); ok {
		_spec.SetField(accessrequest.FieldRequestedAudiences, field.TypeJSON, value)
	}
	if value, ok := aruo.mutation.AppendedRequestedAudiences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accessrequest.FieldRequestedAudiences, value)
		})
	}
	if value, ok := aruo.mutation.GrantedAudiences(); ok {
		_spec.SetField(accessrequest.FieldGrantedAudiences, field.TypeJSON, value)
	}
	if value, ok := aruo.mutation.AppendedGrantedAudiences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accessrequest.FieldGrantedAudiences, value)
		})
	}
	if value, ok := aruo.mutation.Request(); ok {
		_spec.SetField(accessrequest.FieldRequest, field.TypeString, value)
	}
	if value, ok := aruo.mutation.Form(); ok {
		_spec.SetField(accessrequest.FieldForm, field.TypeString, value)
	}
	if value, ok := aruo.mutation.Active(); ok {
		_spec.SetField(accessrequest.FieldActive, field.TypeBool, value)
	}
	_node = &AccessRequest{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accessrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
