// Code generated by ent, DO NOT EDIT.

package oauthrefreshtoken

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldLTE(FieldID, id))
}

// Signature applies equality check predicate on the "signature" field. It's identical to SignatureEQ.
func Signature(v string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldEQ(FieldSignature, v))
}

// SignatureEQ applies the EQ predicate on the "signature" field.
func SignatureEQ(v string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldEQ(FieldSignature, v))
}

// SignatureNEQ applies the NEQ predicate on the "signature" field.
func SignatureNEQ(v string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldNEQ(FieldSignature, v))
}

// SignatureIn applies the In predicate on the "signature" field.
func SignatureIn(vs ...string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldIn(FieldSignature, vs...))
}

// SignatureNotIn applies the NotIn predicate on the "signature" field.
func SignatureNotIn(vs ...string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldNotIn(FieldSignature, vs...))
}

// SignatureGT applies the GT predicate on the "signature" field.
func SignatureGT(v string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldGT(FieldSignature, v))
}

// SignatureGTE applies the GTE predicate on the "signature" field.
func SignatureGTE(v string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldGTE(FieldSignature, v))
}

// SignatureLT applies the LT predicate on the "signature" field.
func SignatureLT(v string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldLT(FieldSignature, v))
}

// SignatureLTE applies the LTE predicate on the "signature" field.
func SignatureLTE(v string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldLTE(FieldSignature, v))
}

// SignatureContains applies the Contains predicate on the "signature" field.
func SignatureContains(v string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldContains(FieldSignature, v))
}

// SignatureHasPrefix applies the HasPrefix predicate on the "signature" field.
func SignatureHasPrefix(v string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldHasPrefix(FieldSignature, v))
}

// SignatureHasSuffix applies the HasSuffix predicate on the "signature" field.
func SignatureHasSuffix(v string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldHasSuffix(FieldSignature, v))
}

// SignatureEqualFold applies the EqualFold predicate on the "signature" field.
func SignatureEqualFold(v string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldEqualFold(FieldSignature, v))
}

// SignatureContainsFold applies the ContainsFold predicate on the "signature" field.
func SignatureContainsFold(v string) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.FieldContainsFold(FieldSignature, v))
}

// HasSession applies the HasEdge predicate on the "session" edge.
func HasSession() predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SessionTable, SessionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionWith applies the HasEdge predicate on the "session" edge with a given conditions (other predicates).
func HasSessionWith(preds ...predicate.OAuthSession) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(func(s *sql.Selector) {
		step := newSessionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OAuthRefreshToken) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OAuthRefreshToken) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OAuthRefreshToken) predicate.OAuthRefreshToken {
	return predicate.OAuthRefreshToken(sql.NotPredicates(p))
}
