// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/oauthsession"
	"github.com/koalatea/authserver/server/ent/oidcauthcode"
)

// OIDCAuthCodeCreate is the builder for creating a OIDCAuthCode entity.
type OIDCAuthCodeCreate struct {
	config
	mutation *OIDCAuthCodeMutation
	hooks    []Hook
}

// SetAuthorizationCode sets the "authorization_code" field.
func (oacc *OIDCAuthCodeCreate) SetAuthorizationCode(s string) *OIDCAuthCodeCreate {
	oacc.mutation.SetAuthorizationCode(s)
	return oacc
}

// SetSessionID sets the "session" edge to the OAuthSession entity by ID.
func (oacc *OIDCAuthCodeCreate) SetSessionID(id int) *OIDCAuthCodeCreate {
	oacc.mutation.SetSessionID(id)
	return oacc
}

// SetNillableSessionID sets the "session" edge to the OAuthSession entity by ID if the given value is not nil.
func (oacc *OIDCAuthCodeCreate) SetNillableSessionID(id *int) *OIDCAuthCodeCreate {
	if id != nil {
		oacc = oacc.SetSessionID(*id)
	}
	return oacc
}

// SetSession sets the "session" edge to the OAuthSession entity.
func (oacc *OIDCAuthCodeCreate) SetSession(o *OAuthSession) *OIDCAuthCodeCreate {
	return oacc.SetSessionID(o.ID)
}

// Mutation returns the OIDCAuthCodeMutation object of the builder.
func (oacc *OIDCAuthCodeCreate) Mutation() *OIDCAuthCodeMutation {
	return oacc.mutation
}

// Save creates the OIDCAuthCode in the database.
func (oacc *OIDCAuthCodeCreate) Save(ctx context.Context) (*OIDCAuthCode, error) {
	var (
		err  error
		node *OIDCAuthCode
	)
	if len(oacc.hooks) == 0 {
		if err = oacc.check(); err != nil {
			return nil, err
		}
		node, err = oacc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OIDCAuthCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oacc.check(); err != nil {
				return nil, err
			}
			oacc.mutation = mutation
			if node, err = oacc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oacc.hooks) - 1; i >= 0; i-- {
			if oacc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oacc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oacc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OIDCAuthCode)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OIDCAuthCodeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oacc *OIDCAuthCodeCreate) SaveX(ctx context.Context) *OIDCAuthCode {
	v, err := oacc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oacc *OIDCAuthCodeCreate) Exec(ctx context.Context) error {
	_, err := oacc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacc *OIDCAuthCodeCreate) ExecX(ctx context.Context) {
	if err := oacc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oacc *OIDCAuthCodeCreate) check() error {
	if _, ok := oacc.mutation.AuthorizationCode(); !ok {
		return &ValidationError{Name: "authorization_code", err: errors.New(`ent: missing required field "OIDCAuthCode.authorization_code"`)}
	}
	return nil
}

func (oacc *OIDCAuthCodeCreate) sqlSave(ctx context.Context) (*OIDCAuthCode, error) {
	_node, _spec := oacc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oacc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oacc *OIDCAuthCodeCreate) createSpec() (*OIDCAuthCode, *sqlgraph.CreateSpec) {
	var (
		_node = &OIDCAuthCode{config: oacc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: oidcauthcode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oidcauthcode.FieldID,
			},
		}
	)
	if value, ok := oacc.mutation.AuthorizationCode(); ok {
		_spec.SetField(oidcauthcode.FieldAuthorizationCode, field.TypeString, value)
		_node.AuthorizationCode = value
	}
	if nodes := oacc.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oidcauthcode.SessionTable,
			Columns: []string{oidcauthcode.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oauthsession.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.oidc_auth_code_session = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OIDCAuthCodeCreateBulk is the builder for creating many OIDCAuthCode entities in bulk.
type OIDCAuthCodeCreateBulk struct {
	config
	builders []*OIDCAuthCodeCreate
}

// Save creates the OIDCAuthCode entities in the database.
func (oaccb *OIDCAuthCodeCreateBulk) Save(ctx context.Context) ([]*OIDCAuthCode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oaccb.builders))
	nodes := make([]*OIDCAuthCode, len(oaccb.builders))
	mutators := make([]Mutator, len(oaccb.builders))
	for i := range oaccb.builders {
		func(i int, root context.Context) {
			builder := oaccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OIDCAuthCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oaccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oaccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oaccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oaccb *OIDCAuthCodeCreateBulk) SaveX(ctx context.Context) []*OIDCAuthCode {
	v, err := oaccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oaccb *OIDCAuthCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := oaccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oaccb *OIDCAuthCodeCreateBulk) ExecX(ctx context.Context) {
	if err := oaccb.Exec(ctx); err != nil {
		panic(err)
	}
}
