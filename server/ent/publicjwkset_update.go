// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/predicate"
	"github.com/koalatea/authserver/server/ent/publicjwkset"
)

// PublicJWKSetUpdate is the builder for updating PublicJWKSet entities.
type PublicJWKSetUpdate struct {
	config
	hooks    []Hook
	mutation *PublicJWKSetMutation
}

// Where appends a list predicates to the PublicJWKSetUpdate builder.
func (pjsu *PublicJWKSetUpdate) Where(ps ...predicate.PublicJWKSet) *PublicJWKSetUpdate {
	pjsu.mutation.Where(ps...)
	return pjsu
}

// Mutation returns the PublicJWKSetMutation object of the builder.
func (pjsu *PublicJWKSetUpdate) Mutation() *PublicJWKSetMutation {
	return pjsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pjsu *PublicJWKSetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pjsu.sqlSave, pjsu.mutation, pjsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pjsu *PublicJWKSetUpdate) SaveX(ctx context.Context) int {
	affected, err := pjsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pjsu *PublicJWKSetUpdate) Exec(ctx context.Context) error {
	_, err := pjsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjsu *PublicJWKSetUpdate) ExecX(ctx context.Context) {
	if err := pjsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pjsu *PublicJWKSetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicjwkset.Table, publicjwkset.Columns, sqlgraph.NewFieldSpec(publicjwkset.FieldID, field.TypeInt))
	if ps := pjsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pjsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicjwkset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pjsu.mutation.done = true
	return n, nil
}

// PublicJWKSetUpdateOne is the builder for updating a single PublicJWKSet entity.
type PublicJWKSetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicJWKSetMutation
}

// Mutation returns the PublicJWKSetMutation object of the builder.
func (pjsuo *PublicJWKSetUpdateOne) Mutation() *PublicJWKSetMutation {
	return pjsuo.mutation
}

// Where appends a list predicates to the PublicJWKSetUpdate builder.
func (pjsuo *PublicJWKSetUpdateOne) Where(ps ...predicate.PublicJWKSet) *PublicJWKSetUpdateOne {
	pjsuo.mutation.Where(ps...)
	return pjsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pjsuo *PublicJWKSetUpdateOne) Select(field string, fields ...string) *PublicJWKSetUpdateOne {
	pjsuo.fields = append([]string{field}, fields...)
	return pjsuo
}

// Save executes the query and returns the updated PublicJWKSet entity.
func (pjsuo *PublicJWKSetUpdateOne) Save(ctx context.Context) (*PublicJWKSet, error) {
	return withHooks(ctx, pjsuo.sqlSave, pjsuo.mutation, pjsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pjsuo *PublicJWKSetUpdateOne) SaveX(ctx context.Context) *PublicJWKSet {
	node, err := pjsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pjsuo *PublicJWKSetUpdateOne) Exec(ctx context.Context) error {
	_, err := pjsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjsuo *PublicJWKSetUpdateOne) ExecX(ctx context.Context) {
	if err := pjsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pjsuo *PublicJWKSetUpdateOne) sqlSave(ctx context.Context) (_node *PublicJWKSet, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicjwkset.Table, publicjwkset.Columns, sqlgraph.NewFieldSpec(publicjwkset.FieldID, field.TypeInt))
	id, ok := pjsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicJWKSet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pjsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicjwkset.FieldID)
		for _, f := range fields {
			if !publicjwkset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publicjwkset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pjsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &PublicJWKSet{config: pjsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pjsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicjwkset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pjsuo.mutation.done = true
	return _node, nil
}
