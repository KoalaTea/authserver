// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/oauthrefreshtoken"
	"github.com/koalatea/authserver/server/ent/oauthsession"
)

// OAuthRefreshTokenCreate is the builder for creating a OAuthRefreshToken entity.
type OAuthRefreshTokenCreate struct {
	config
	mutation *OAuthRefreshTokenMutation
	hooks    []Hook
}

// SetSignature sets the "signature" field.
func (ortc *OAuthRefreshTokenCreate) SetSignature(s string) *OAuthRefreshTokenCreate {
	ortc.mutation.SetSignature(s)
	return ortc
}

// SetSessionID sets the "session" edge to the OAuthSession entity by ID.
func (ortc *OAuthRefreshTokenCreate) SetSessionID(id int) *OAuthRefreshTokenCreate {
	ortc.mutation.SetSessionID(id)
	return ortc
}

// SetNillableSessionID sets the "session" edge to the OAuthSession entity by ID if the given value is not nil.
func (ortc *OAuthRefreshTokenCreate) SetNillableSessionID(id *int) *OAuthRefreshTokenCreate {
	if id != nil {
		ortc = ortc.SetSessionID(*id)
	}
	return ortc
}

// SetSession sets the "session" edge to the OAuthSession entity.
func (ortc *OAuthRefreshTokenCreate) SetSession(o *OAuthSession) *OAuthRefreshTokenCreate {
	return ortc.SetSessionID(o.ID)
}

// Mutation returns the OAuthRefreshTokenMutation object of the builder.
func (ortc *OAuthRefreshTokenCreate) Mutation() *OAuthRefreshTokenMutation {
	return ortc.mutation
}

// Save creates the OAuthRefreshToken in the database.
func (ortc *OAuthRefreshTokenCreate) Save(ctx context.Context) (*OAuthRefreshToken, error) {
	var (
		err  error
		node *OAuthRefreshToken
	)
	if len(ortc.hooks) == 0 {
		if err = ortc.check(); err != nil {
			return nil, err
		}
		node, err = ortc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OAuthRefreshTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ortc.check(); err != nil {
				return nil, err
			}
			ortc.mutation = mutation
			if node, err = ortc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ortc.hooks) - 1; i >= 0; i-- {
			if ortc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ortc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ortc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OAuthRefreshToken)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OAuthRefreshTokenMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ortc *OAuthRefreshTokenCreate) SaveX(ctx context.Context) *OAuthRefreshToken {
	v, err := ortc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ortc *OAuthRefreshTokenCreate) Exec(ctx context.Context) error {
	_, err := ortc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ortc *OAuthRefreshTokenCreate) ExecX(ctx context.Context) {
	if err := ortc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ortc *OAuthRefreshTokenCreate) check() error {
	if _, ok := ortc.mutation.Signature(); !ok {
		return &ValidationError{Name: "signature", err: errors.New(`ent: missing required field "OAuthRefreshToken.signature"`)}
	}
	return nil
}

func (ortc *OAuthRefreshTokenCreate) sqlSave(ctx context.Context) (*OAuthRefreshToken, error) {
	_node, _spec := ortc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ortc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ortc *OAuthRefreshTokenCreate) createSpec() (*OAuthRefreshToken, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthRefreshToken{config: ortc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: oauthrefreshtoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauthrefreshtoken.FieldID,
			},
		}
	)
	if value, ok := ortc.mutation.Signature(); ok {
		_spec.SetField(oauthrefreshtoken.FieldSignature, field.TypeString, value)
		_node.Signature = value
	}
	if nodes := ortc.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauthrefreshtoken.SessionTable,
			Columns: []string{oauthrefreshtoken.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: oauthsession.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.oauth_refresh_token_session = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OAuthRefreshTokenCreateBulk is the builder for creating many OAuthRefreshToken entities in bulk.
type OAuthRefreshTokenCreateBulk struct {
	config
	builders []*OAuthRefreshTokenCreate
}

// Save creates the OAuthRefreshToken entities in the database.
func (ortcb *OAuthRefreshTokenCreateBulk) Save(ctx context.Context) ([]*OAuthRefreshToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ortcb.builders))
	nodes := make([]*OAuthRefreshToken, len(ortcb.builders))
	mutators := make([]Mutator, len(ortcb.builders))
	for i := range ortcb.builders {
		func(i int, root context.Context) {
			builder := ortcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthRefreshTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ortcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ortcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ortcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ortcb *OAuthRefreshTokenCreateBulk) SaveX(ctx context.Context) []*OAuthRefreshToken {
	v, err := ortcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ortcb *OAuthRefreshTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := ortcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ortcb *OAuthRefreshTokenCreateBulk) ExecX(ctx context.Context) {
	if err := ortcb.Exec(ctx); err != nil {
		panic(err)
	}
}
