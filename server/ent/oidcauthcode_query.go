// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/koalatea/authserver/server/ent/accessrequest"
	"github.com/koalatea/authserver/server/ent/oidcauthcode"
	"github.com/koalatea/authserver/server/ent/oidcsession"
	"github.com/koalatea/authserver/server/ent/predicate"
)

// OIDCAuthCodeQuery is the builder for querying OIDCAuthCode entities.
type OIDCAuthCodeQuery struct {
	config
	limit             *int
	offset            *int
	unique            *bool
	order             []OrderFunc
	fields            []string
	predicates        []predicate.OIDCAuthCode
	withAccessRequest *AccessRequestQuery
	withSession       *OIDCSessionQuery
	withFKs           bool
	modifiers         []func(*sql.Selector)
	loadTotal         []func(context.Context, []*OIDCAuthCode) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OIDCAuthCodeQuery builder.
func (oacq *OIDCAuthCodeQuery) Where(ps ...predicate.OIDCAuthCode) *OIDCAuthCodeQuery {
	oacq.predicates = append(oacq.predicates, ps...)
	return oacq
}

// Limit adds a limit step to the query.
func (oacq *OIDCAuthCodeQuery) Limit(limit int) *OIDCAuthCodeQuery {
	oacq.limit = &limit
	return oacq
}

// Offset adds an offset step to the query.
func (oacq *OIDCAuthCodeQuery) Offset(offset int) *OIDCAuthCodeQuery {
	oacq.offset = &offset
	return oacq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oacq *OIDCAuthCodeQuery) Unique(unique bool) *OIDCAuthCodeQuery {
	oacq.unique = &unique
	return oacq
}

// Order adds an order step to the query.
func (oacq *OIDCAuthCodeQuery) Order(o ...OrderFunc) *OIDCAuthCodeQuery {
	oacq.order = append(oacq.order, o...)
	return oacq
}

// QueryAccessRequest chains the current query on the "access_request" edge.
func (oacq *OIDCAuthCodeQuery) QueryAccessRequest() *AccessRequestQuery {
	query := &AccessRequestQuery{config: oacq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oacq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oacq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oidcauthcode.Table, oidcauthcode.FieldID, selector),
			sqlgraph.To(accessrequest.Table, accessrequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oidcauthcode.AccessRequestTable, oidcauthcode.AccessRequestColumn),
		)
		fromU = sqlgraph.SetNeighbors(oacq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySession chains the current query on the "session" edge.
func (oacq *OIDCAuthCodeQuery) QuerySession() *OIDCSessionQuery {
	query := &OIDCSessionQuery{config: oacq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oacq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oacq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(oidcauthcode.Table, oidcauthcode.FieldID, selector),
			sqlgraph.To(oidcsession.Table, oidcsession.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, oidcauthcode.SessionTable, oidcauthcode.SessionColumn),
		)
		fromU = sqlgraph.SetNeighbors(oacq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OIDCAuthCode entity from the query.
// Returns a *NotFoundError when no OIDCAuthCode was found.
func (oacq *OIDCAuthCodeQuery) First(ctx context.Context) (*OIDCAuthCode, error) {
	nodes, err := oacq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oidcauthcode.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oacq *OIDCAuthCodeQuery) FirstX(ctx context.Context) *OIDCAuthCode {
	node, err := oacq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OIDCAuthCode ID from the query.
// Returns a *NotFoundError when no OIDCAuthCode ID was found.
func (oacq *OIDCAuthCodeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oacq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oidcauthcode.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oacq *OIDCAuthCodeQuery) FirstIDX(ctx context.Context) int {
	id, err := oacq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OIDCAuthCode entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OIDCAuthCode entity is found.
// Returns a *NotFoundError when no OIDCAuthCode entities are found.
func (oacq *OIDCAuthCodeQuery) Only(ctx context.Context) (*OIDCAuthCode, error) {
	nodes, err := oacq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oidcauthcode.Label}
	default:
		return nil, &NotSingularError{oidcauthcode.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oacq *OIDCAuthCodeQuery) OnlyX(ctx context.Context) *OIDCAuthCode {
	node, err := oacq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OIDCAuthCode ID in the query.
// Returns a *NotSingularError when more than one OIDCAuthCode ID is found.
// Returns a *NotFoundError when no entities are found.
func (oacq *OIDCAuthCodeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oacq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oidcauthcode.Label}
	default:
		err = &NotSingularError{oidcauthcode.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oacq *OIDCAuthCodeQuery) OnlyIDX(ctx context.Context) int {
	id, err := oacq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OIDCAuthCodes.
func (oacq *OIDCAuthCodeQuery) All(ctx context.Context) ([]*OIDCAuthCode, error) {
	if err := oacq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return oacq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (oacq *OIDCAuthCodeQuery) AllX(ctx context.Context) []*OIDCAuthCode {
	nodes, err := oacq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OIDCAuthCode IDs.
func (oacq *OIDCAuthCodeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := oacq.Select(oidcauthcode.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oacq *OIDCAuthCodeQuery) IDsX(ctx context.Context) []int {
	ids, err := oacq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oacq *OIDCAuthCodeQuery) Count(ctx context.Context) (int, error) {
	if err := oacq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return oacq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (oacq *OIDCAuthCodeQuery) CountX(ctx context.Context) int {
	count, err := oacq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oacq *OIDCAuthCodeQuery) Exist(ctx context.Context) (bool, error) {
	if err := oacq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return oacq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (oacq *OIDCAuthCodeQuery) ExistX(ctx context.Context) bool {
	exist, err := oacq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OIDCAuthCodeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oacq *OIDCAuthCodeQuery) Clone() *OIDCAuthCodeQuery {
	if oacq == nil {
		return nil
	}
	return &OIDCAuthCodeQuery{
		config:            oacq.config,
		limit:             oacq.limit,
		offset:            oacq.offset,
		order:             append([]OrderFunc{}, oacq.order...),
		predicates:        append([]predicate.OIDCAuthCode{}, oacq.predicates...),
		withAccessRequest: oacq.withAccessRequest.Clone(),
		withSession:       oacq.withSession.Clone(),
		// clone intermediate query.
		sql:    oacq.sql.Clone(),
		path:   oacq.path,
		unique: oacq.unique,
	}
}

// WithAccessRequest tells the query-builder to eager-load the nodes that are connected to
// the "access_request" edge. The optional arguments are used to configure the query builder of the edge.
func (oacq *OIDCAuthCodeQuery) WithAccessRequest(opts ...func(*AccessRequestQuery)) *OIDCAuthCodeQuery {
	query := &AccessRequestQuery{config: oacq.config}
	for _, opt := range opts {
		opt(query)
	}
	oacq.withAccessRequest = query
	return oacq
}

// WithSession tells the query-builder to eager-load the nodes that are connected to
// the "session" edge. The optional arguments are used to configure the query builder of the edge.
func (oacq *OIDCAuthCodeQuery) WithSession(opts ...func(*OIDCSessionQuery)) *OIDCAuthCodeQuery {
	query := &OIDCSessionQuery{config: oacq.config}
	for _, opt := range opts {
		opt(query)
	}
	oacq.withSession = query
	return oacq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AuthorizationCode string `json:"authorization_code,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OIDCAuthCode.Query().
//		GroupBy(oidcauthcode.FieldAuthorizationCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oacq *OIDCAuthCodeQuery) GroupBy(field string, fields ...string) *OIDCAuthCodeGroupBy {
	grbuild := &OIDCAuthCodeGroupBy{config: oacq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := oacq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return oacq.sqlQuery(ctx), nil
	}
	grbuild.label = oidcauthcode.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AuthorizationCode string `json:"authorization_code,omitempty"`
//	}
//
//	client.OIDCAuthCode.Query().
//		Select(oidcauthcode.FieldAuthorizationCode).
//		Scan(ctx, &v)
func (oacq *OIDCAuthCodeQuery) Select(fields ...string) *OIDCAuthCodeSelect {
	oacq.fields = append(oacq.fields, fields...)
	selbuild := &OIDCAuthCodeSelect{OIDCAuthCodeQuery: oacq}
	selbuild.label = oidcauthcode.Label
	selbuild.flds, selbuild.scan = &oacq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a OIDCAuthCodeSelect configured with the given aggregations.
func (oacq *OIDCAuthCodeQuery) Aggregate(fns ...AggregateFunc) *OIDCAuthCodeSelect {
	return oacq.Select().Aggregate(fns...)
}

func (oacq *OIDCAuthCodeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range oacq.fields {
		if !oidcauthcode.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oacq.path != nil {
		prev, err := oacq.path(ctx)
		if err != nil {
			return err
		}
		oacq.sql = prev
	}
	return nil
}

func (oacq *OIDCAuthCodeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OIDCAuthCode, error) {
	var (
		nodes       = []*OIDCAuthCode{}
		withFKs     = oacq.withFKs
		_spec       = oacq.querySpec()
		loadedTypes = [2]bool{
			oacq.withAccessRequest != nil,
			oacq.withSession != nil,
		}
	)
	if oacq.withAccessRequest != nil || oacq.withSession != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, oidcauthcode.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OIDCAuthCode).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OIDCAuthCode{config: oacq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(oacq.modifiers) > 0 {
		_spec.Modifiers = oacq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oacq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oacq.withAccessRequest; query != nil {
		if err := oacq.loadAccessRequest(ctx, query, nodes, nil,
			func(n *OIDCAuthCode, e *AccessRequest) { n.Edges.AccessRequest = e }); err != nil {
			return nil, err
		}
	}
	if query := oacq.withSession; query != nil {
		if err := oacq.loadSession(ctx, query, nodes, nil,
			func(n *OIDCAuthCode, e *OIDCSession) { n.Edges.Session = e }); err != nil {
			return nil, err
		}
	}
	for i := range oacq.loadTotal {
		if err := oacq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oacq *OIDCAuthCodeQuery) loadAccessRequest(ctx context.Context, query *AccessRequestQuery, nodes []*OIDCAuthCode, init func(*OIDCAuthCode), assign func(*OIDCAuthCode, *AccessRequest)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OIDCAuthCode)
	for i := range nodes {
		if nodes[i].oidc_auth_code_access_request == nil {
			continue
		}
		fk := *nodes[i].oidc_auth_code_access_request
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(accessrequest.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "oidc_auth_code_access_request" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oacq *OIDCAuthCodeQuery) loadSession(ctx context.Context, query *OIDCSessionQuery, nodes []*OIDCAuthCode, init func(*OIDCAuthCode), assign func(*OIDCAuthCode, *OIDCSession)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OIDCAuthCode)
	for i := range nodes {
		if nodes[i].oidc_auth_code_session == nil {
			continue
		}
		fk := *nodes[i].oidc_auth_code_session
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(oidcsession.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "oidc_auth_code_session" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (oacq *OIDCAuthCodeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oacq.querySpec()
	if len(oacq.modifiers) > 0 {
		_spec.Modifiers = oacq.modifiers
	}
	_spec.Node.Columns = oacq.fields
	if len(oacq.fields) > 0 {
		_spec.Unique = oacq.unique != nil && *oacq.unique
	}
	return sqlgraph.CountNodes(ctx, oacq.driver, _spec)
}

func (oacq *OIDCAuthCodeQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := oacq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (oacq *OIDCAuthCodeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   oidcauthcode.Table,
			Columns: oidcauthcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oidcauthcode.FieldID,
			},
		},
		From:   oacq.sql,
		Unique: true,
	}
	if unique := oacq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := oacq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oidcauthcode.FieldID)
		for i := range fields {
			if fields[i] != oidcauthcode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := oacq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oacq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oacq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oacq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oacq *OIDCAuthCodeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oacq.driver.Dialect())
	t1 := builder.Table(oidcauthcode.Table)
	columns := oacq.fields
	if len(columns) == 0 {
		columns = oidcauthcode.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oacq.sql != nil {
		selector = oacq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oacq.unique != nil && *oacq.unique {
		selector.Distinct()
	}
	for _, p := range oacq.predicates {
		p(selector)
	}
	for _, p := range oacq.order {
		p(selector)
	}
	if offset := oacq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oacq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OIDCAuthCodeGroupBy is the group-by builder for OIDCAuthCode entities.
type OIDCAuthCodeGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oacgb *OIDCAuthCodeGroupBy) Aggregate(fns ...AggregateFunc) *OIDCAuthCodeGroupBy {
	oacgb.fns = append(oacgb.fns, fns...)
	return oacgb
}

// Scan applies the group-by query and scans the result into the given value.
func (oacgb *OIDCAuthCodeGroupBy) Scan(ctx context.Context, v any) error {
	query, err := oacgb.path(ctx)
	if err != nil {
		return err
	}
	oacgb.sql = query
	return oacgb.sqlScan(ctx, v)
}

func (oacgb *OIDCAuthCodeGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range oacgb.fields {
		if !oidcauthcode.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := oacgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oacgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (oacgb *OIDCAuthCodeGroupBy) sqlQuery() *sql.Selector {
	selector := oacgb.sql.Select()
	aggregation := make([]string, 0, len(oacgb.fns))
	for _, fn := range oacgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(oacgb.fields)+len(oacgb.fns))
		for _, f := range oacgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(oacgb.fields...)...)
}

// OIDCAuthCodeSelect is the builder for selecting fields of OIDCAuthCode entities.
type OIDCAuthCodeSelect struct {
	*OIDCAuthCodeQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oacs *OIDCAuthCodeSelect) Aggregate(fns ...AggregateFunc) *OIDCAuthCodeSelect {
	oacs.fns = append(oacs.fns, fns...)
	return oacs
}

// Scan applies the selector query and scans the result into the given value.
func (oacs *OIDCAuthCodeSelect) Scan(ctx context.Context, v any) error {
	if err := oacs.prepareQuery(ctx); err != nil {
		return err
	}
	oacs.sql = oacs.OIDCAuthCodeQuery.sqlQuery(ctx)
	return oacs.sqlScan(ctx, v)
}

func (oacs *OIDCAuthCodeSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(oacs.fns))
	for _, fn := range oacs.fns {
		aggregation = append(aggregation, fn(oacs.sql))
	}
	switch n := len(*oacs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		oacs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		oacs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := oacs.sql.Query()
	if err := oacs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
