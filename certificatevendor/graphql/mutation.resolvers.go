package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"bytes"
	"context"
	"encoding/pem"
	"fmt"

	"github.com/koalatea/authserver/certificatevendor/graphql/generated"
)

// RequestClientCert is the resolver for the requestClientCert field. Takes a pem pubkey, Returns certificate PEM string.
func (r *mutationResolver) RequestClientCert(ctx context.Context, hostname string, pubKey string) (string, error) {
	cert, err := r.certificates.NewDeviceCert(hostname, pubKey)
	if err != nil {
		return "", fmt.Errorf("failed to create client certificate: %w", err)
	}
	certPEM := new(bytes.Buffer)
	pem.Encode(certPEM, &pem.Block{
		Type:  "CERTIFICATE",
		Bytes: cert.Raw,
	})
	return certPEM.String(), nil
}

// RequestHTTPSCert is the resolver for the requestHTTPSCert field. Takes a pem pubkey, Returns certificate PEM string.
func (r *mutationResolver) RequestHTTPSCert(ctx context.Context, url string, pubkey string) (string, error) {
	cert, err := r.certificates.NewHTTPSCert(url, pubkey)
	if err != nil {
		return "", fmt.Errorf("failed to create HTTPS certificate: %w", err)
	}
	certPEM := new(bytes.Buffer)
	pem.Encode(certPEM, &pem.Block{
		Type:  "CERTIFICATE",
		Bytes: cert.Raw,
	})
	return certPEM.String(), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
